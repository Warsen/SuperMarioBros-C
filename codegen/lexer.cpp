/* A lexical scanner generated by flex */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <cstdio>
#include <cstring>
#include <cerrno>
#include <cstdlib>

/* end standard C headers. */

/* flex integer type definitions */

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

using flex_int8_t = signed char;
using flex_int16_t = short int;
using flex_int32_t = int;
using flex_uint8_t = unsigned char;
using flex_uint16_t = unsigned short int;
using flex_uint32_t = unsigned int;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

/* begin standard C++ headers. */

#define yynoreturn

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))


/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + (state) + 1)

constexpr auto YY_END_OF_BUFFER_CHAR = 0;

/* Size of default input buffer. */
constexpr auto YY_BUF_SIZE = 16384;

using YY_BUFFER_STATE = struct yy_buffer_state*;
using yy_size_t = size_t;

extern int yyleng;

extern FILE *yyin, *yyout;

constexpr auto EOB_ACT_CONTINUE_SCAN = 0;
constexpr auto EOB_ACT_END_OF_FILE = 1;
constexpr auto EOB_ACT_LAST_MATCH = 2;

struct yy_buffer_state
{
	FILE* yy_input_file;

	char* yy_ch_buf; /* input buffer */
	char* yy_buf_pos; /* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	int yy_bs_lineno; /**< The line count. */
	int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
};

constexpr auto YY_BUFFER_NEW = 0;
constexpr auto YY_BUFFER_NORMAL = 1;
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
constexpr auto YY_BUFFER_EOF_PENDING = 2;



/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE* yy_buffer_stack = nullptr; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars; /* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char* yy_c_buf_p = nullptr;
static int yy_init = 0; /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart(FILE* input_file);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer);
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size);
void yy_delete_buffer(YY_BUFFER_STATE b);
void yy_flush_buffer(YY_BUFFER_STATE b);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer);
void yypop_buffer_state(void);

static void yyensure_buffer_stack(void);
static void yy_load_buffer_state(void);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file);

YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size);
YY_BUFFER_STATE yy_scan_string(const char* yystr);
YY_BUFFER_STATE yy_scan_bytes(const char* yybytes, int _yybytes_len);

void* yyalloc(yy_size_t);
void* yyrealloc(void*, yy_size_t);
void yyfree(void*);

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
using YY_CHAR = flex_uint8_t;

FILE *yyin = nullptr, *yyout = nullptr;

using yy_state_type = int;

extern int yylineno;
int yylineno = 1;

extern char* yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state();
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state);
static int yy_get_next_buffer();
static void yynoreturn yy_fatal_error(const char* msg);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_END_OF_BUFFER 80
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
};

static const flex_int16_t yy_accept[141] =
{   0,
    0,    0,   80,   78,    1,    1,   74,   78,   78,   76,
   77,   70,   75,   71,   78,   68,    2,   72,   69,   73,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,    7,    8,    1,   66,   67,
    5,    5,   68,    2,   65,    6,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,    3,    4,   29,   25,   40,   47,   48,   49,   28,
   50,   51,   52,   62,   53,   54,   55,   56,   57,   58,

   31,   32,   33,   37,   38,   39,   26,   34,   35,   36,
   44,   45,    9,   10,   11,   41,   63,   27,   21,   22,
   23,   24,   42,   43,   64,   46,   30,   59,   60,   61,
   12,   13,   14,   15,   16,   19,   17,   20,   18,    0
} ;

static const YY_CHAR yy_ec[256] =
{   0,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    1,    4,    5,    6,    1,    1,    7,
    8,    1,    9,   10,   11,   12,    1,   13,   13,   14,
   14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
   18,   19,    1,    1,   20,   20,   20,   20,   20,   20,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
    1,    1,    1,    1,   22,    1,   23,   24,   25,   26,

   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
   37,   38,   39,   40,   41,   42,   29,   43,   44,   45,
   46,   29,    1,   47,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1
} ;

static const YY_CHAR yy_meta[48] =
{   0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    4,    1,    1,    1,    1,    3,
    4,    4,    5,    5,    5,    5,    5,    5,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    1
} ;

static const flex_int16_t yy_base[146] =
{   0,
    0,    0,   83,  556,   46,   48,  556,    0,   39,  556,
  556,  556,  556,  556,   52,   40,    0,  556,  556,  556,
   42,   46,   63,   39,   40,   59,   43,   76,   79,   82,
   88,   92,   97,  109,  114,  112,  116,   60,    0,   45,
    0,   47,   96,    0,   55,  556,  120,  137,  128,  132,
  146,  149,  141,  150,  152,  161,  167,  172,  178,  172,
  170,  195,  188,  202,  195,  197,  211,  204,  211,  227,
  232,  237,  239,  227,  255,  257,  253,  261,  263,  269,
  272,    0,    0,  228,  275,  286,  293,  294,  295,  297,
  306,  313,  314,  315,  317,  326,  333,  334,  335,  337,

  346,  353,  354,  355,  357,  366,  373,  374,  375,  377,
  386,  393,  394,  395,  397,  406,  413,  414,  415,  417,
  426,  433,  434,  435,  437,  446,  453,  454,  455,  457,
  466,  473,  474,  475,  477,  486,  493,  494,  495,  556,
  534,  535,  541,  545,  549
} ;

static const flex_int16_t yy_def[146] =
{   0,
  140,    1,  140,  140,  140,  140,  140,  141,  140,  140,
  140,  140,  140,  140,  142,  140,  143,  140,  140,  140,
  144,  144,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   24,   24,   24,   22,   22,   22,  140,  141,  140,
  142,  142,  140,  143,  145,  140,   22,   22,   22,   24,
   22,   22,   34,   34,   34,   24,   24,   22,   22,   24,
   35,   35,   24,   35,   24,   24,   35,   24,   24,   24,
   24,   24,   24,   22,   22,   59,   35,   35,   35,   35,
   35,  142,  142,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,    0,
  140,  140,  140,  140,  140
} ;

static const flex_int16_t yy_nxt[604] =
{   0,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   16,    4,   17,   18,   19,   20,   21,
   21,    4,   22,   23,   24,   25,   26,   21,   21,   21,
   27,   28,   21,   29,   21,   30,   31,   32,   21,   33,
   34,   35,   21,   21,   36,   37,    4,   38,   38,   38,
   38,   40,   43,   43,   45,   45,   46,   40,   45,   45,
   46,   38,   38,   45,   47,   47,   62,   45,   47,   46,
   82,   48,   59,   60,   47,   47,   61,   42,   64,   47,
   47,   49,  140,   47,   47,   40,   50,   51,   47,   52,
   83,   40,  140,   53,   47,   63,  140,   54,   55,   47,

   56,   47,   57,   47,   67,   58,  140,   47,   43,   43,
   65,   47,  140,   47,   47,  140,   66,   47,   69,   68,
  140,   71,   47,   47,  140,   72,   47,   70,   47,   47,
   47,   47,   75,   73,   47,   76,   78,   47,   74,   47,
  140,   47,   47,   47,  140,   47,   47,   47,  140,   47,
   77,   47,   47,   85,   79,   47,   47,  140,   80,   81,
   47,   84,   47,   47,   47,   86,   47,   47,   47,   47,
   87,   47,   47,   47,   47,   47,   47,   47,   92,  140,
   91,   47,   90,  140,   47,  140,   88,   89,  140,   47,
  140,   47,   47,   47,   93,   47,   95,   47,   47,   94,

   47,   47,   97,   98,   47,   47,   47,   47,   99,  101,
   47,  140,   96,   47,  102,  103,  140,   47,   47,  104,
  100,   47,   47,  140,   47,   47,  108,  107,   47,   47,
   47,   47,  111,  113,   47,   47,  112,   47,   47,  105,
  106,   47,   47,  116,   47,   47,  109,  110,  117,  118,
  140,   47,   47,   47,  119,  114,  115,  125,  140,  121,
   47,   47,   47,   47,   47,   47,   47,  126,   47,  120,
   47,   47,  123,   47,  122,  131,   47,  140,  124,  127,
   47,  128,  129,   47,  140,   47,  140,  130,  140,  140,
   47,  137,  140,   47,  139,   47,  140,  132,  133,   47,

   47,   47,  140,   47,  140,  134,  135,  136,   47,  138,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,
   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,
   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,
   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,

   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,
   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,
   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,
   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,
   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,

   47,   47,   47,  140,  140,  140,   47,  140,   47,   47,
   47,   47,   47,   47,   47,   47,  140,   47,   47,   47,
   47,   47,  140,  140,  140,  140,   47,  140,   47,   47,
   47,  140,  140,   47,   47,   47,   39,  140,   39,   41,
   41,   44,  140,   44,   44,   44,   44,   47,   47,   47,
   47,   45,   45,   45,   45,    3,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,

  140,  140,  140
} ;

static const flex_int16_t yy_chk[604] =
{   0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    5,    5,    6,
    6,    9,   16,   16,   21,   21,   21,   40,   22,   22,
   22,   38,   38,   21,   24,   25,   25,   22,   27,   45,
   42,   22,   24,   24,   24,   25,   24,   15,   27,   24,
   25,   22,    3,   27,   26,    9,   22,   23,   23,   23,
   42,   40,    0,   23,   26,   26,    0,   23,   23,   26,

   23,   28,   23,   23,   29,   23,    0,   30,   43,   43,
   28,   28,    0,   31,   29,    0,   28,   30,   30,   29,
    0,   32,   30,   31,    0,   32,   32,   31,   31,   32,
   33,   33,   34,   33,   33,   34,   35,   36,   33,   35,
    0,   37,   34,   34,    0,   47,   34,   36,    0,   35,
   34,   37,   36,   49,   35,   47,   37,    0,   35,   35,
   47,   48,   48,   49,   53,   50,   50,   53,   49,   50,
   51,   51,   48,   54,   52,   55,   54,   48,   55,    0,
   54,   51,   53,    0,   52,    0,   51,   52,    0,   52,
    0,   54,   61,   55,   56,   56,   58,   58,   56,   57,

   57,   57,   59,   59,   57,   60,   60,   58,   59,   60,
   61,    0,   58,   59,   61,   61,    0,   62,   59,   62,
   59,   63,   63,    0,   64,   63,   64,   63,   65,   65,
   66,   66,   65,   67,   66,   62,   66,   68,   68,   62,
   62,   68,   64,   68,   69,   69,   64,   64,   69,   70,
    0,   67,   74,   84,   71,   67,   67,   74,    0,   72,
   70,   70,   74,   84,   70,   71,   71,   74,   84,   71,
   72,   72,   73,   73,   72,   77,   73,    0,   73,   75,
   75,   76,   76,   78,    0,   79,    0,   76,    0,    0,
   75,   80,    0,   77,   81,   75,    0,   77,   77,   76,

   85,   78,    0,   79,    0,   78,   78,   79,   79,   80,
   85,   86,   81,   80,   80,   85,   81,   81,   87,   88,
   89,   86,   90,    0,    0,    0,   86,    0,   87,   88,
   89,   91,   90,   87,   88,   89,    0,   90,   92,   93,
   94,   91,   95,    0,    0,    0,   91,    0,   92,   93,
   94,   96,   95,   92,   93,   94,    0,   95,   97,   98,
   99,   96,  100,    0,    0,    0,   96,    0,   97,   98,
   99,  101,  100,   97,   98,   99,    0,  100,  102,  103,
  104,  101,  105,    0,    0,    0,  101,    0,  102,  103,
  104,  106,  105,  102,  103,  104,    0,  105,  107,  108,

  109,  106,  110,    0,    0,    0,  106,    0,  107,  108,
  109,  111,  110,  107,  108,  109,    0,  110,  112,  113,
  114,  111,  115,    0,    0,    0,  111,    0,  112,  113,
  114,  116,  115,  112,  113,  114,    0,  115,  117,  118,
  119,  116,  120,    0,    0,    0,  116,    0,  117,  118,
  119,  121,  120,  117,  118,  119,    0,  120,  122,  123,
  124,  121,  125,    0,    0,    0,  121,    0,  122,  123,
  124,  126,  125,  122,  123,  124,    0,  125,  127,  128,
  129,  126,  130,    0,    0,    0,  126,    0,  127,  128,
  129,  131,  130,  127,  128,  129,    0,  130,  132,  133,

  134,  131,  135,    0,    0,    0,  131,    0,  132,  133,
  134,  136,  135,  132,  133,  134,    0,  135,  137,  138,
  139,  136,    0,    0,    0,    0,  136,    0,  137,  138,
  139,    0,    0,  137,  138,  139,  141,    0,  141,  142,
  142,  143,    0,  143,  143,  143,  143,  144,  144,  144,
  144,  145,  145,  145,  145,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,

  140,  140,  140
} ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[80] =
{   0,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static yy_state_type yy_last_accepting_state;
static char* yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

constexpr auto YY_MORE_ADJ = 0;
#define YY_RESTORE_YY_MORE_OFFSET
char* yytext;

#include <cstring>
#include "ast.hpp"
#include "util.hpp"
#include "parser.hpp"

#define YY_USER_ACTION yylloc.first_line = yylloc.last_line = yylineno;

void yyerror(const char*);

#define YY_EXTRA_TYPE void *

static int yy_init_globals();

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy();

int yyget_debug();

void yyset_debug(int _bdebug);

YY_EXTRA_TYPE yyget_extra();

void yyset_extra(YY_EXTRA_TYPE user_defined);

FILE* yyget_in();

void yyset_in(FILE* _in_str);

FILE* yyget_out();

void yyset_out(FILE* _out_str);

int yyget_leng();

char* yyget_text();

int yyget_lineno();

void yyset_lineno(int _line_number);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

/* Amount of stuff to slurp up with each read. */
constexpr auto YY_READ_BUF_SIZE = 8192;

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < (max_size) && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			(buf)[n] = (char) c; \
		if ( c == '\n' ) \
			(buf)[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		(result) = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( ((result) = (int) fread(buf, 1, (yy_size_t) (max_size), yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return YY_NULL

/* Report a fatal error. */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )

/* end tables serialization structures and prototypes */

extern int yylex();

/* Code executed at the end of each rule. */
#define YY_BREAK /*LINTED*/break;

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
int yylex()
{
	if (!yy_init)
	{
		yy_init = 1;

		if (!yy_start)
			yy_start = 1; /* first start state */

		if (!yyin)
			yyin = stdin;

		if (!yyout)
			yyout = stdout;

		if (!YY_CURRENT_BUFFER)
		{
			yyensure_buffer_stack();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin, YY_BUF_SIZE);
		}

		yy_load_buffer_state();
	}

	{
		while (/*CONSTCOND*/true) /* loops until end-of-file is reached */
		{
			char* yy_cp = yy_c_buf_p;

			/* Support of yytext. */
			*yy_cp = yy_hold_char;

			/* yy_bp points to the position in yy_ch_buf of the start of
			 * the current run.
			 */
			char* yy_bp = yy_cp;

			yy_state_type yy_current_state = yy_start;
		yy_match:
			do
			{
				YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
				if (yy_accept[yy_current_state])
				{
					yy_last_accepting_state = yy_current_state;
					yy_last_accepting_cpos = yy_cp;
				}
				while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
				{
					yy_current_state = static_cast<int>(yy_def[yy_current_state]);
					if (yy_current_state >= 141)
						yy_c = yy_meta[yy_c];
				}
				yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
				++yy_cp;
			}
			while (yy_base[yy_current_state] != 556);

		yy_find_action:
			int yy_act = yy_accept[yy_current_state];
			if (yy_act == 0)
			{
				/* have to back up */
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				yy_act = yy_accept[yy_current_state];
			}

			YY_DO_BEFORE_ACTION;

			if (yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act])
			{
				for (int yyl = 0; yyl < yyleng; ++yyl)
					if (yytext[yyl] == '\n')

						yylineno++;
			}

		do_action: /* This label is used only to access EOF actions. */

			switch (yy_act)
			{
			/* beginning of action switch */
			case 0: /* must back up */
				/* undo the effects of YY_DO_BEFORE_ACTION */
				*yy_cp = yy_hold_char;
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;

			case 1:
				/* rule 1 can match eol */
				YY_RULE_SETUP
				{
				}
				YY_BREAK
			case 2:
				YY_RULE_SETUP
				{
					mapComment(yylineno, yytext);
				}
				YY_BREAK
			case 3:
				YY_RULE_SETUP
				{
					return DATABYTES;
				}
			case 4:
				YY_RULE_SETUP
				{
					return DATAWORDS;
				}
			case 5:
				YY_RULE_SETUP
				{
					yylval.str = DUP_YYTEXT;
					return DIRECTIVE;
				}
			case 6:
				YY_RULE_SETUP
				{
					yylval.str = DUP_YYTEXT;
					return LABEL;
				}
			case 7:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 8:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 9:
				YY_RULE_SETUP
				{
					return LDA;
				}
			case 10:
				YY_RULE_SETUP
				{
					return LDX;
				}
			case 11:
				YY_RULE_SETUP
				{
					return LDY;
				}
			case 12:
				YY_RULE_SETUP
				{
					return STA;
				}
			case 13:
				YY_RULE_SETUP
				{
					return STX;
				}
			case 14:
				YY_RULE_SETUP
				{
					return STY;
				}
			case 15:
				YY_RULE_SETUP
				{
					return TAX;
				}
			case 16:
				YY_RULE_SETUP
				{
					return TAY;
				}
			case 17:
				YY_RULE_SETUP
				{
					return TXA;
				}
			case 18:
				YY_RULE_SETUP
				{
					return TYA;
				}
			case 19:
				YY_RULE_SETUP
				{
					return TSX;
				}
			case 20:
				YY_RULE_SETUP
				{
					return TXS;
				}
			case 21:
				YY_RULE_SETUP
				{
					return PHA;
				}
			case 22:
				YY_RULE_SETUP
				{
					return PHP;
				}
			case 23:
				YY_RULE_SETUP
				{
					return PLA;
				}
			case 24:
				YY_RULE_SETUP
				{
					return PLP;
				}
			case 25:
				YY_RULE_SETUP
				{
					return AND;
				}
			case 26:
				YY_RULE_SETUP
				{
					return EOR;
				}
			case 27:
				YY_RULE_SETUP
				{
					return ORA;
				}
			case 28:
				YY_RULE_SETUP
				{
					return BIT;
				}
			case 29:
				YY_RULE_SETUP
				{
					return ADC;
				}
			case 30:
				YY_RULE_SETUP
				{
					return SBC;
				}
			case 31:
				YY_RULE_SETUP
				{
					return CMP;
				}
			case 32:
				YY_RULE_SETUP
				{
					return CPX;
				}
			case 33:
				YY_RULE_SETUP
				{
					return CPY;
				}
			case 34:
				YY_RULE_SETUP
				{
					return INC;
				}
			case 35:
				YY_RULE_SETUP
				{
					return INX;
				}
			case 36:
				YY_RULE_SETUP
				{
					return INY;
				}
			case 37:
				YY_RULE_SETUP
				{
					return DEC;
				}
			case 38:
				YY_RULE_SETUP
				{
					return DEX;
				}
			case 39:
				YY_RULE_SETUP
				{
					return DEY;
				}
			case 40:
				YY_RULE_SETUP
				{
					return ASL;
				}
			case 41:
				YY_RULE_SETUP
				{
					return LSR;
				}
			case 42:
				YY_RULE_SETUP
				{
					return ROL;
				}
			case 43:
				YY_RULE_SETUP
				{
					return ROR;
				}
			case 44:
				YY_RULE_SETUP
				{
					return JMP;
				}
			case 45:
				YY_RULE_SETUP
				{
					return JSR;
				}
			case 46:
				YY_RULE_SETUP
				{
					return RTS;
				}
			case 47:
				YY_RULE_SETUP
				{
					return BCC;
				}
			case 48:
				YY_RULE_SETUP
				{
					return BCS;
				}
			case 49:
				YY_RULE_SETUP
				{
					return BEQ;
				}
			case 50:
				YY_RULE_SETUP
				{
					return BMI;
				}
			case 51:
				YY_RULE_SETUP
				{
					return BNE;
				}
			case 52:
				YY_RULE_SETUP
				{
					return BPL;
				}
			case 53:
				YY_RULE_SETUP
				{
					return BVC;
				}
			case 54:
				YY_RULE_SETUP
				{
					return BVS;
				}
			case 55:
				YY_RULE_SETUP
				{
					return CLC;
				}
			case 56:
				YY_RULE_SETUP
				{
					return CLD;
				}
			case 57:
				YY_RULE_SETUP
				{
					return CLI;
				}
			case 58:
				YY_RULE_SETUP
				{
					return CLV;
				}
			case 59:
				YY_RULE_SETUP
				{
					return SEC;
				}
			case 60:
				YY_RULE_SETUP
				{
					return SED;
				}
			case 61:
				YY_RULE_SETUP
				{
					return SEI;
				}
			case 62:
				YY_RULE_SETUP
				{
					return BRK;
				}
			case 63:
				YY_RULE_SETUP
				{
					return NOP;
				}
			case 64:
				YY_RULE_SETUP
				{
					return RTI;
				}
			case 65:
				YY_RULE_SETUP
				{
					yylval.str = DUP_YYTEXT;
					return NAME;
				}
			case 66:
				YY_RULE_SETUP
				{
					yylval.str = DUP_YYTEXT;
					return HEXCONST;
				}
			case 67:
				YY_RULE_SETUP
				{
					yylval.str = DUP_YYTEXT;
					return BINCONST;
				}
			case 68:
				YY_RULE_SETUP
				{
					yylval.str = DUP_YYTEXT;
					return DECCONST;
				}
			case 69:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 70:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 71:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 72:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 73:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 74:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 75:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 76:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 77:
				YY_RULE_SETUP
				{
					return *yytext;
				}
			case 78:
				YY_RULE_SETUP
				{
					printf("invalid token (line %d): %s\n", yylineno, yytext);
					yyerror(yytext);
				}
				YY_BREAK
			case 79:
				YY_RULE_SETUP
				ECHO;
				YY_BREAK
			case YY_STATE_EOF(0):
				yyterminate();

			case YY_END_OF_BUFFER:
				{
					/* Amount of text matched not including the EOB char. */
					int yy_amount_of_matched_text = static_cast<int>(yy_cp - yytext_ptr) - 1;

					/* Undo the effects of YY_DO_BEFORE_ACTION. */
					*yy_cp = yy_hold_char;
					YY_RESTORE_YY_MORE_OFFSET

					if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
					{
						/* We're scanning a new file or input source.  It's
						 * possible that this happened because the user
						 * just pointed yyin at a new source and called
						 * yylex().  If so, then we have to assure
						 * consistency between YY_CURRENT_BUFFER and our
						 * globals.  Here is the right place to do so, because
						 * this is the first action (other than possibly a
						 * back-up) that will match for the new input source.
						 */
						yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
						YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
						YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
					}

					/* Note that here we test for yy_c_buf_p "<=" to the position
					 * of the first EOB in the buffer, since yy_c_buf_p will
					 * already have been incremented past the NUL character
					 * (since all states make transitions on EOB to the
					 * end-of-buffer state).  Contrast this with the test
					 * in input().
					 */
					if (yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yy_n_chars])
					{
						/* This was really a NUL. */

						yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

						yy_current_state = yy_get_previous_state();

						/* Okay, we're now positioned to make the NUL
						 * transition.  We couldn't have
						 * yy_get_previous_state() go ahead and do it
						 * for us because it doesn't know how to deal
						 * with the possibility of jamming (and we don't
						 * want to build jamming into it because then it
						 * will run more slowly).
						 */

						yy_state_type yy_next_state = yy_try_NUL_trans(yy_current_state);

						yy_bp = yytext_ptr + YY_MORE_ADJ;

						if (yy_next_state)
						{
							/* Consume the NUL. */
							yy_cp = ++yy_c_buf_p;
							yy_current_state = yy_next_state;
							goto yy_match;
						}
						yy_cp = yy_c_buf_p;
						goto yy_find_action;
					}
					switch (yy_get_next_buffer())
					{
					case EOB_ACT_END_OF_FILE:
						{
							yy_did_buffer_switch_on_eof = 0;

							if (yywrap())
							{
								/* Note: because we've taken care in
								 * yy_get_next_buffer() to have set up
								 * yytext, we can now set up
								 * yy_c_buf_p so that if some total
								 * hoser (like flex itself) wants to
								 * call the scanner after we return the
								 * YY_NULL, it'll still work - another
								 * YY_NULL will get returned.
								 */
								yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

								yy_act = YY_STATE_EOF(YY_START);
								goto do_action;
							}
						}

					case EOB_ACT_CONTINUE_SCAN:
						yy_c_buf_p =
							yytext_ptr + yy_amount_of_matched_text;

						yy_current_state = yy_get_previous_state();

						yy_cp = yy_c_buf_p;
						yy_bp = yytext_ptr + YY_MORE_ADJ;
						goto yy_match;

					case EOB_ACT_LAST_MATCH:
						yy_c_buf_p =
							&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yy_n_chars];

						yy_current_state = yy_get_previous_state();

						yy_cp = yy_c_buf_p;
						yy_bp = yytext_ptr + YY_MORE_ADJ;
						goto yy_find_action;
					}

					break;
				}

			default:
				YY_FATAL_ERROR(
					"fatal flex scanner internal error--no action found");
			} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(void)
{
	char* dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char* source = yytext_ptr;
	int ret_val;

	if (yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yy_n_chars + 1])
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed");

	if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
	{
		/* Don't try to fill the buffer, so this is an EOF. */
		if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
		{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}
		/* We matched some text prior to the EOB, first
			 * process it.
			 */
		return EOB_ACT_LAST_MATCH;
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	int number_to_move = static_cast<int>(yy_c_buf_p - yytext_ptr - 1);

	for (int i = 0; i < number_to_move; ++i)
		*dest++ = *source++;

	if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yy_n_chars = 0;

	else
	{
		int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)
		{
			/* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				static_cast<int>(yy_c_buf_p - b->yy_ch_buf);

			if (b->yy_is_our_buffer)
			{
				int new_size = b->yy_buf_size * 2;

				if (new_size <= 0)
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = static_cast<char*>(
					/* Include room in for 2 EOB chars. */
					yyrealloc(b->yy_ch_buf,
					          b->yy_buf_size + 2));
			}
			else
			/* Can't grow it, we don't own it. */
				b->yy_ch_buf = nullptr;

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow");

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
				number_to_move - 1;
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
		         (yy_n_chars), num_to_read);

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yy_n_chars;
	}

	if (yy_n_chars == 0)
	{
		if (number_to_move == YY_MORE_ADJ)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (yy_n_chars + number_to_move > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
	{
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yy_n_chars + number_to_move + (yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = static_cast<char*>(yyrealloc(
			YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, static_cast<yy_size_t>(new_size)));
		if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
			YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = new_size - 2;
	}

	yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
{
	yy_state_type yy_current_state = yy_start;

	for (char* yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
	{
		YY_CHAR yy_c = *yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1;
		if (yy_accept[yy_current_state])
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
		while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
			yy_current_state = static_cast<int>(yy_def[yy_current_state]);
			if (yy_current_state >= 141)
				yy_c = yy_meta[yy_c];
		}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
{
	char* yy_cp = yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if (yy_accept[yy_current_state])
	{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
	}
	while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
	{
		yy_current_state = static_cast<int>(yy_def[yy_current_state]);
		if (yy_current_state >= 141)
			yy_c = yy_meta[yy_c];
	}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	int yy_is_jam = yy_current_state == 140;

	return yy_is_jam ? 0 : yy_current_state;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart(FILE* input_file)
{
	if (!YY_CURRENT_BUFFER)
	{
		yyensure_buffer_stack();
		YY_CURRENT_BUFFER_LVALUE =
			yy_create_buffer(yyin, YY_BUF_SIZE);
	}

	yy_init_buffer(YY_CURRENT_BUFFER, input_file);
	yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
	 */
	yyensure_buffer_stack();
	if (YY_CURRENT_BUFFER == new_buffer)
		return;

	if (YY_CURRENT_BUFFER)
	{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yy_n_chars;
	}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state()
{
	yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yytext_ptr = yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size)
{
	YY_BUFFER_STATE b;

	b = static_cast<YY_BUFFER_STATE>(yyalloc(sizeof(yy_buffer_state)));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = static_cast<char*>(yyalloc(b->yy_buf_size + 2));
	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b, file);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer(YY_BUFFER_STATE b)
{
	if (!b)
		return;

	if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = static_cast<YY_BUFFER_STATE>(nullptr);

	if (b->yy_is_our_buffer)
		yyfree(b->yy_ch_buf);

	yyfree(b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file)
{
	const int oerrno = *_errno();

	yy_flush_buffer(b);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	/* If b is the current buffer, then yy_init_buffer was _probably_
	 * called from yyrestart() or through yy_get_next_buffer.
	 * In that case, we don't want to reset the lineno or column.
	 */
	if (b != YY_CURRENT_BUFFER)
	{
		b->yy_bs_lineno = 1;
		b->yy_bs_column = 0;
	}

	b->yy_is_interactive = 0;

	*_errno() = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer(YY_BUFFER_STATE b)
{
	if (!b)
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if (b == YY_CURRENT_BUFFER)
		yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
	if (new_buffer == nullptr)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if (YY_CURRENT_BUFFER)
	{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yy_n_chars;
	}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state();
	yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state()
{
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER);
	YY_CURRENT_BUFFER_LVALUE = nullptr;
	if (yy_buffer_stack_top > 0)
		--yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER)
	{
		yy_load_buffer_state();
		yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack()
{
	yy_size_t num_to_alloc;

	if (!yy_buffer_stack)
	{
		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
		 */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yy_buffer_stack = static_cast<yy_buffer_state**>(yyalloc
			(num_to_alloc * sizeof(yy_buffer_state*)
			));
		if (!yy_buffer_stack)
			YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

		memset(yy_buffer_stack, 0, num_to_alloc * sizeof(yy_buffer_state*));

		yy_buffer_stack_max = num_to_alloc;
		yy_buffer_stack_top = 0;
		return;
	}

	if (yy_buffer_stack_top >= yy_buffer_stack_max - 1)
	{
		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yy_buffer_stack_max + grow_size;
		yy_buffer_stack = static_cast<yy_buffer_state**>(yyrealloc
			(yy_buffer_stack,
			 num_to_alloc * sizeof(yy_buffer_state*)
			));
		if (!yy_buffer_stack)
			YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

		/* zero only the new slots.*/
		memset(yy_buffer_stack + yy_buffer_stack_max, 0, grow_size * sizeof(yy_buffer_state*));
		yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size)
{
	YY_BUFFER_STATE b;

	if (size < 2 ||
		base[size - 2] != YY_END_OF_BUFFER_CHAR ||
		base[size - 1] != YY_END_OF_BUFFER_CHAR)
		/* They forgot to leave room for the EOB's. */
		return nullptr;

	b = static_cast<YY_BUFFER_STATE>(yyalloc(sizeof(yy_buffer_state)));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

	b->yy_buf_size = static_cast<int>(size - 2); /* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = nullptr;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b);

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string(const char* yystr)
{
	return yy_scan_bytes(yystr, static_cast<int>(strlen(yystr)));
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes(const char* yybytes, int _yybytes_len)
{
	/* Get memory for full buffer, including space for trailing EOB's. */
	auto n = static_cast<yy_size_t>(_yybytes_len + 2);
	auto buf = static_cast<char*>(yyalloc(n));
	if (!buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

	for (int i = 0; i < _yybytes_len; ++i)
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

	YY_BUFFER_STATE b = yy_scan_buffer(buf, n);
	if (!b)
		YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

constexpr auto YY_EXIT_FAILURE = 2;

[[ noreturn ]] static void yy_fatal_error(const char* msg)
{
	fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno()
{
	return yylineno;
}

/** Get the input stream.
 *
 */
FILE* yyget_in()
{
	return yyin;
}

/** Get the output stream.
 *
 */
FILE* yyget_out()
{
	return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng()
{
	return yyleng;
}

/** Get the current token.
 *
 */

char* yyget_text()
{
	return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 *
 */
void yyset_lineno(int _line_number)
{
	yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in(FILE* _in_str)
{
	yyin = _in_str;
}

void yyset_out(FILE* _out_str)
{
	yyout = _out_str;
}

int yyget_debug()
{
	return yy_flex_debug;
}

void yyset_debug(int _bdebug)
{
	yy_flex_debug = _bdebug;
}

static int yy_init_globals()
{
	/* Initialization is the same as for the non-reentrant scanner.
 * This function is called from yylex_destroy(), so don't allocate here.
 */

	/* We do not touch yylineno unless the option is enabled. */
	yylineno = 1;

	yy_buffer_stack = nullptr;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;
	yy_c_buf_p = nullptr;
	yy_init = 0;
	yy_start = 0;

	/* Defined in main.c */
	yyin = nullptr;
	yyout = nullptr;

	/* For future reference: Set errno on error, since we are called by
	 * yylex_init()
	 */
	return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy()
{
	/* Pop the buffer stack, destroying each element. */
	while (YY_CURRENT_BUFFER)
	{
		yy_delete_buffer(YY_CURRENT_BUFFER);
		YY_CURRENT_BUFFER_LVALUE = nullptr;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree(yy_buffer_stack);
	yy_buffer_stack = nullptr;

	/* Reset the globals. This is important in a non-reentrant scanner so the next time
	 * yylex() is called, initialization will occur. */
	yy_init_globals();

	return 0;
}

/*
 * Internal utility routines.
 */

void* yyalloc(yy_size_t size)
{
	return malloc(size);
}

void* yyrealloc(void* ptr, yy_size_t size)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree(void* ptr)
{
	free(ptr); /* see yyrealloc() for (char *) cast */
}