// This is an automatically generated file.
// Do not edit directly.
//
#include "SMB.hpp"

void SMBEngine::loadConstantData()
{
    // VRAM_AddrTable_Low
    //
    const uint8_t VRAM_AddrTable_Low_data[] = {
        LOBYTE(VRAM_Buffer1), LOBYTE(WaterPaletteData), LOBYTE(GroundPaletteData),
        LOBYTE(UndergroundPaletteData), LOBYTE(CastlePaletteData), LOBYTE(VRAM_Buffer1_Offset),
        LOBYTE(VRAM_Buffer2), LOBYTE(VRAM_Buffer2), LOBYTE(BowserPaletteData),
        LOBYTE(DaySnowPaletteData), LOBYTE(NightSnowPaletteData), LOBYTE(MushroomPaletteData),
        LOBYTE(MarioThanksMessage), LOBYTE(LuigiThanksMessage), LOBYTE(MushroomRetainerSaved),
        LOBYTE(PrincessSaved1), LOBYTE(PrincessSaved2), LOBYTE(WorldSelectMessage1),
        LOBYTE(WorldSelectMessage2)
    };
    writeData(VRAM_AddrTable_Low, VRAM_AddrTable_Low_data, sizeof(VRAM_AddrTable_Low_data));

    // VRAM_AddrTable_High
    //
    const uint8_t VRAM_AddrTable_High_data[] = {
        HIBYTE(VRAM_Buffer1), HIBYTE(WaterPaletteData), HIBYTE(GroundPaletteData),
        HIBYTE(UndergroundPaletteData), HIBYTE(CastlePaletteData), HIBYTE(VRAM_Buffer1_Offset),
        HIBYTE(VRAM_Buffer2), HIBYTE(VRAM_Buffer2), HIBYTE(BowserPaletteData),
        HIBYTE(DaySnowPaletteData), HIBYTE(NightSnowPaletteData), HIBYTE(MushroomPaletteData),
        HIBYTE(MarioThanksMessage), HIBYTE(LuigiThanksMessage), HIBYTE(MushroomRetainerSaved),
        HIBYTE(PrincessSaved1), HIBYTE(PrincessSaved2), HIBYTE(WorldSelectMessage1),
        HIBYTE(WorldSelectMessage2)
    };
    writeData(VRAM_AddrTable_High, VRAM_AddrTable_High_data, sizeof(VRAM_AddrTable_High_data));

    // VRAM_Buffer_Offset
    //
    const uint8_t VRAM_Buffer_Offset_data[] = {
        LOBYTE(VRAM_Buffer1_Offset), LOBYTE(VRAM_Buffer2_Offset)
    };
    writeData(VRAM_Buffer_Offset, VRAM_Buffer_Offset_data, sizeof(VRAM_Buffer_Offset_data));

    // WSelectBufferTemplate
    //
    const uint8_t WSelectBufferTemplate_data[] = {
        0x04, 0x20, 0x73, 0x01, 0x00, 0x00
    };
    writeData(WSelectBufferTemplate, WSelectBufferTemplate_data, sizeof(WSelectBufferTemplate_data));

    // MushroomIconData
    //
    const uint8_t MushroomIconData_data[] = {
        0x07, 0x22, 0x49, 0x83, 0xce, 0x24, 0x24, 0x00
    };
    writeData(MushroomIconData, MushroomIconData_data, sizeof(MushroomIconData_data));

    // DemoActionData
    //
    const uint8_t DemoActionData_data[] = {
        0x01, 0x80, 0x02, 0x81, 0x41, 0x80, 0x01,
        0x42, 0xc2, 0x02, 0x80, 0x41, 0xc1, 0x41, 0xc1,
        0x01, 0xc1, 0x01, 0x02, 0x80, 0x00
    };
    writeData(DemoActionData, DemoActionData_data, sizeof(DemoActionData_data));

    // DemoTimingData
    //
    const uint8_t DemoTimingData_data[] = {
        0x9b, 0x10, 0x18, 0x05, 0x2c, 0x20, 0x24,
        0x15, 0x5a, 0x10, 0x20, 0x28, 0x30, 0x20, 0x10,
        0x80, 0x20, 0x30, 0x30, 0x01, 0xff, 0x00
    };
    writeData(DemoTimingData, DemoTimingData_data, sizeof(DemoTimingData_data));

    // FloateyNumTileData
    //
    const uint8_t FloateyNumTileData_data[] = {
        0xff, 0xff, // dummy
        0xf6, 0xfb, //  "100"
        0xf7, 0xfb, //  "200"
        0xf8, 0xfb, //  "400"
        0xf9, 0xfb, //  "500"
        0xfa, 0xfb, //  "800"
        0xf6, 0x50, //  "1000"
        0xf7, 0x50, //  "2000"
        0xf8, 0x50, //  "4000"
        0xf9, 0x50, //  "5000"
        0xfa, 0x50, //  "8000"
        0xfd, 0xfe //  "1-UP"
    };
    writeData(FloateyNumTileData, FloateyNumTileData_data, sizeof(FloateyNumTileData_data));

    // ScoreUpdateData
    //
    const uint8_t ScoreUpdateData_data[] = {
        0xff, // dummy
        0x41, 0x42, 0x44, 0x45, 0x48,
        0x31, 0x32, 0x34, 0x35, 0x38, 0x00
    };
    writeData(ScoreUpdateData, ScoreUpdateData_data, sizeof(ScoreUpdateData_data));

    // AreaPalette
    //
    const uint8_t AreaPalette_data[] = {
        0x01, 0x02, 0x03, 0x04
    };
    writeData(AreaPalette, AreaPalette_data, sizeof(AreaPalette_data));

    // BGColorCtrl_Addr
    //
    const uint8_t BGColorCtrl_Addr_data[] = {
        0x00, 0x09, 0x0a, 0x04
    };
    writeData(BGColorCtrl_Addr, BGColorCtrl_Addr_data, sizeof(BGColorCtrl_Addr_data));

    // BackgroundColors
    //
    const uint8_t BackgroundColors_data[] = {
        0x22, 0x22, 0x0f, 0x0f, // used by area type if bg color ctrl not set
        0x0f, 0x22, 0x0f, 0x0f // used by background color control if set
    };
    writeData(BackgroundColors, BackgroundColors_data, sizeof(BackgroundColors_data));

    // PlayerColors
    //
    const uint8_t PlayerColors_data[] = {
        0x22, 0x16, 0x27, 0x18, // mario's colors
        0x22, 0x30, 0x27, 0x19, // luigi's colors
        0x22, 0x37, 0x27, 0x16 // fiery (used by both)
    };
    writeData(PlayerColors, PlayerColors_data, sizeof(PlayerColors_data));

    // TopStatusBarLine
    //
    const uint8_t TopStatusBarLine_data[] = {
        0x20, 0x43, 0x05, 0x16, 0x0a, 0x1b, 0x12, 0x18, //  "MARIO"
        0x20, 0x52, 0x0b, 0x20, 0x18, 0x1b, 0x15, 0x0d, //  "WORLD  TIME"
        0x24, 0x24, 0x1d, 0x12, 0x16, 0x0e,
        0x20, 0x68, 0x05, 0x00, 0x24, 0x24, 0x2e, 0x29, //  score trailing digit and coin display
        0x23, 0xc0, 0x7f, 0xaa, //  attribute table data, clears name table 0 to palette 2
        0x23, 0xc2, 0x01, 0xea, //  attribute table data, used for coin icon in status bar
        0xff //  end of data block
    };
    writeData(TopStatusBarLine, TopStatusBarLine_data, sizeof(TopStatusBarLine_data));

    // WorldLivesDisplay
    //
    const uint8_t WorldLivesDisplay_data[] = {
        0x21, 0xcd, 0x07, 0x24, 0x24, //  cross with spaces used on
        0x29, 0x24, 0x24, 0x24, 0x24, //  lives display
        0x21, 0x4b, 0x09, 0x20, 0x18, //  "WORLD  - " used on lives display
        0x1b, 0x15, 0x0d, 0x24, 0x24, 0x28, 0x24,
        0x22, 0x0c, 0x47, 0x24, //  possibly used to clear time up
        0x23, 0xdc, 0x01, 0xba, //  attribute table data for crown if more than 9 lives
        0xff
    };
    writeData(WorldLivesDisplay, WorldLivesDisplay_data, sizeof(WorldLivesDisplay_data));

    // TwoPlayerTimeUp
    //
    const uint8_t TwoPlayerTimeUp_data[] = {
        0x21, 0xcd, 0x05, 0x16, 0x0a, 0x1b, 0x12, 0x18 //  "MARIO"
    };
    writeData(TwoPlayerTimeUp, TwoPlayerTimeUp_data, sizeof(TwoPlayerTimeUp_data));

    // OnePlayerTimeUp
    //
    const uint8_t OnePlayerTimeUp_data[] = {
        0x22, 0x0c, 0x07, 0x1d, 0x12, 0x16, 0x0e, 0x24, 0x1e, 0x19, //  "TIME UP"
        0xff
    };
    writeData(OnePlayerTimeUp, OnePlayerTimeUp_data, sizeof(OnePlayerTimeUp_data));

    // TwoPlayerGameOver
    //
    const uint8_t TwoPlayerGameOver_data[] = {
        0x21, 0xcd, 0x05, 0x16, 0x0a, 0x1b, 0x12, 0x18 //  "MARIO"
    };
    writeData(TwoPlayerGameOver, TwoPlayerGameOver_data, sizeof(TwoPlayerGameOver_data));

    // OnePlayerGameOver
    //
    const uint8_t OnePlayerGameOver_data[] = {
        0x22, 0x0b, 0x09, 0x10, 0x0a, 0x16, 0x0e, 0x24, //  "GAME OVER"
        0x18, 0x1f, 0x0e, 0x1b,
        0xff
    };
    writeData(OnePlayerGameOver, OnePlayerGameOver_data, sizeof(OnePlayerGameOver_data));

    // WarpZoneWelcome
    //
    const uint8_t WarpZoneWelcome_data[] = {
        0x25, 0x84, 0x15, 0x20, 0x0e, 0x15, 0x0c, 0x18, 0x16, //  "WELCOME TO WARP ZONE!"
        0x0e, 0x24, 0x1d, 0x18, 0x24, 0x20, 0x0a, 0x1b, 0x19,
        0x24, 0x23, 0x18, 0x17, 0x0e, 0x2b,
        0x26, 0x25, 0x01, 0x24, //  placeholder for left pipe
        0x26, 0x2d, 0x01, 0x24, //  placeholder for middle pipe
        0x26, 0x35, 0x01, 0x24, //  placeholder for right pipe
        0x27, 0xd9, 0x46, 0xaa, //  attribute data
        0x27, 0xe1, 0x45, 0xaa,
        0xff
    };
    writeData(WarpZoneWelcome, WarpZoneWelcome_data, sizeof(WarpZoneWelcome_data));

    // LuigiName
    //
    const uint8_t LuigiName_data[] = {
        0x15, 0x1e, 0x12, 0x10, 0x12 //  "LUIGI", no address or length
    };
    writeData(LuigiName, LuigiName_data, sizeof(LuigiName_data));

    // WarpZoneNumbers
    //
    const uint8_t WarpZoneNumbers_data[] = {
        0x04, 0x03, 0x02, 0x00, //  warp zone numbers, note spaces on middle
        0x24, 0x05, 0x24, 0x00, //  zone, partly responsible for
        0x08, 0x07, 0x06, 0x00 //  the minus world
    };
    writeData(WarpZoneNumbers, WarpZoneNumbers_data, sizeof(WarpZoneNumbers_data));

    // GameTextOffsets
    //
    const uint8_t GameTextOffsets_data[] = {
        TopStatusBarLine - GameText, TopStatusBarLine - GameText,
        WorldLivesDisplay - GameText, WorldLivesDisplay - GameText,
        TwoPlayerTimeUp - GameText, OnePlayerTimeUp - GameText,
        TwoPlayerGameOver - GameText, OnePlayerGameOver - GameText,
        WarpZoneWelcome - GameText, WarpZoneWelcome - GameText
    };
    writeData(GameTextOffsets, GameTextOffsets_data, sizeof(GameTextOffsets_data));

    // ColorRotatePalette
    //
    const uint8_t ColorRotatePalette_data[] = {
        0x27, 0x27, 0x27, 0x17, 0x07, 0x17
    };
    writeData(ColorRotatePalette, ColorRotatePalette_data, sizeof(ColorRotatePalette_data));

    // BlankPalette
    //
    const uint8_t BlankPalette_data[] = {
        0x3f, 0x0c, 0x04, 0xff, 0xff, 0xff, 0xff, 0x00
    };
    writeData(BlankPalette, BlankPalette_data, sizeof(BlankPalette_data));

    // Palette3Data
    //
    const uint8_t Palette3Data_data[] = {
        0x0f, 0x07, 0x12, 0x0f,
        0x0f, 0x07, 0x17, 0x0f,
        0x0f, 0x07, 0x17, 0x1c,
        0x0f, 0x07, 0x17, 0x00
    };
    writeData(Palette3Data, Palette3Data_data, sizeof(Palette3Data_data));

    // BlockGfxData
    //
    const uint8_t BlockGfxData_data[] = {
        0x45, 0x45, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47,
        0x57, 0x58, 0x59, 0x5a,
        0x24, 0x24, 0x24, 0x24,
        0x26, 0x26, 0x26, 0x26
    };
    writeData(BlockGfxData, BlockGfxData_data, sizeof(BlockGfxData_data));

    // MetatileGraphics_Low
    //
    const uint8_t MetatileGraphics_Low_data[] = {
        LOBYTE(Palette0_MTiles), LOBYTE(Palette1_MTiles), LOBYTE(Palette2_MTiles), LOBYTE(Palette3_MTiles)
    };
    writeData(MetatileGraphics_Low, MetatileGraphics_Low_data, sizeof(MetatileGraphics_Low_data));

    // MetatileGraphics_High
    //
    const uint8_t MetatileGraphics_High_data[] = {
        HIBYTE(Palette0_MTiles), HIBYTE(Palette1_MTiles), HIBYTE(Palette2_MTiles), HIBYTE(Palette3_MTiles)
    };
    writeData(MetatileGraphics_High, MetatileGraphics_High_data, sizeof(MetatileGraphics_High_data));

    // Palette0_MTiles
    //
    const uint8_t Palette0_MTiles_data[] = {
        0x24, 0x24, 0x24, 0x24, // blank
        0x27, 0x27, 0x27, 0x27, // black metatile
        0x24, 0x24, 0x24, 0x35, // bush left
        0x36, 0x25, 0x37, 0x25, // bush middle
        0x24, 0x38, 0x24, 0x24, // bush right
        0x24, 0x30, 0x30, 0x26, // mountain left
        0x26, 0x26, 0x34, 0x26, // mountain left bottom/middle center
        0x24, 0x31, 0x24, 0x32, // mountain middle top
        0x33, 0x26, 0x24, 0x33, // mountain right
        0x34, 0x26, 0x26, 0x26, // mountain right bottom
        0x26, 0x26, 0x26, 0x26, // mountain middle bottom
        0x24, 0xc0, 0x24, 0xc0, // bridge guardrail
        0x24, 0x7f, 0x7f, 0x24, // chain
        0xb8, 0xba, 0xb9, 0xbb, // tall tree top, top half
        0xb8, 0xbc, 0xb9, 0xbd, // short tree top
        0xba, 0xbc, 0xbb, 0xbd, // tall tree top, bottom half
        0x60, 0x64, 0x61, 0x65, // warp pipe end left, points up
        0x62, 0x66, 0x63, 0x67, // warp pipe end right, points up
        0x60, 0x64, 0x61, 0x65, // decoration pipe end left, points up
        0x62, 0x66, 0x63, 0x67, // decoration pipe end right, points up
        0x68, 0x68, 0x69, 0x69, // pipe shaft left
        0x26, 0x26, 0x6a, 0x6a, // pipe shaft right
        0x4b, 0x4c, 0x4d, 0x4e, // tree ledge left edge
        0x4d, 0x4f, 0x4d, 0x4f, // tree ledge middle
        0x4d, 0x4e, 0x50, 0x51, // tree ledge right edge
        0x6b, 0x70, 0x2c, 0x2d, // mushroom left edge
        0x6c, 0x71, 0x6d, 0x72, // mushroom middle
        0x6e, 0x73, 0x6f, 0x74, // mushroom right edge
        0x86, 0x8a, 0x87, 0x8b, // sideways pipe end top
        0x88, 0x8c, 0x88, 0x8c, // sideways pipe shaft top
        0x89, 0x8d, 0x69, 0x69, // sideways pipe joint top
        0x8e, 0x91, 0x8f, 0x92, // sideways pipe end bottom
        0x26, 0x93, 0x26, 0x93, // sideways pipe shaft bottom
        0x90, 0x94, 0x69, 0x69, // sideways pipe joint bottom
        0xa4, 0xe9, 0xea, 0xeb, // seaplant
        0x24, 0x24, 0x24, 0x24, // blank, used on bricks or blocks that are hit
        0x24, 0x2f, 0x24, 0x3d, // flagpole ball
        0xa2, 0xa2, 0xa3, 0xa3, // flagpole shaft
        0x24, 0x24, 0x24, 0x24 // blank, used in conjunction with vines
    };
    writeData(Palette0_MTiles, Palette0_MTiles_data, sizeof(Palette0_MTiles_data));

    // Palette1_MTiles
    //
    const uint8_t Palette1_MTiles_data[] = {
        0xa2, 0xa2, 0xa3, 0xa3, // vertical rope
        0x99, 0x24, 0x99, 0x24, // horizontal rope
        0x24, 0xa2, 0x3e, 0x3f, // left pulley
        0x5b, 0x5c, 0x24, 0xa3, // right pulley
        0x24, 0x24, 0x24, 0x24, // blank used for balance rope
        0x9d, 0x47, 0x9e, 0x47, // castle top
        0x47, 0x47, 0x27, 0x27, // castle window left
        0x47, 0x47, 0x47, 0x47, // castle brick wall
        0x27, 0x27, 0x47, 0x47, // castle window right
        0xa9, 0x47, 0xaa, 0x47, // castle top w/ brick
        0x9b, 0x27, 0x9c, 0x27, // entrance top
        0x27, 0x27, 0x27, 0x27, // entrance bottom
        0x52, 0x52, 0x52, 0x52, // green ledge stump
        0x80, 0xa0, 0x81, 0xa1, // fence
        0xbe, 0xbe, 0xbf, 0xbf, // tree trunk
        0x75, 0xba, 0x76, 0xbb, // mushroom stump top
        0xba, 0xba, 0xbb, 0xbb, // mushroom stump bottom
        0x45, 0x47, 0x45, 0x47, // breakable brick w/ line 
        0x47, 0x47, 0x47, 0x47, // breakable brick 
        0x45, 0x47, 0x45, 0x47, // breakable brick (not used)
        0xb4, 0xb6, 0xb5, 0xb7, // cracked rock terrain
        0x45, 0x47, 0x45, 0x47, // brick with line (power-up)
        0x45, 0x47, 0x45, 0x47, // brick with line (vine)
        0x45, 0x47, 0x45, 0x47, // brick with line (star)
        0x45, 0x47, 0x45, 0x47, // brick with line (coins)
        0x45, 0x47, 0x45, 0x47, // brick with line (1-up)
        0x47, 0x47, 0x47, 0x47, // brick (power-up)
        0x47, 0x47, 0x47, 0x47, // brick (vine)
        0x47, 0x47, 0x47, 0x47, // brick (star)
        0x47, 0x47, 0x47, 0x47, // brick (coins)
        0x47, 0x47, 0x47, 0x47, // brick (1-up)
        0x24, 0x24, 0x24, 0x24, // hidden block (1 coin)
        0x24, 0x24, 0x24, 0x24, // hidden block (1-up)
        0xab, 0xac, 0xad, 0xae, // solid block (3-d block)
        0x5d, 0x5e, 0x5d, 0x5e, // solid block (white wall)
        0xc1, 0x24, 0xc1, 0x24, // bridge
        0xc6, 0xc8, 0xc7, 0xc9, // bullet bill cannon barrel
        0xca, 0xcc, 0xcb, 0xcd, // bullet bill cannon top
        0x2a, 0x2a, 0x40, 0x40, // bullet bill cannon bottom
        0x24, 0x24, 0x24, 0x24, // blank used for jumpspring
        0x24, 0x47, 0x24, 0x47, // half brick used for jumpspring
        0x82, 0x83, 0x84, 0x85, // solid block (water level, green rock)
        0x24, 0x47, 0x24, 0x47, // half brick (???)
        0x86, 0x8a, 0x87, 0x8b, // water pipe top
        0x8e, 0x91, 0x8f, 0x92, // water pipe bottom
        0x24, 0x2f, 0x24, 0x3d // flag ball (residual object)
    };
    writeData(Palette1_MTiles, Palette1_MTiles_data, sizeof(Palette1_MTiles_data));

    // Palette2_MTiles
    //
    const uint8_t Palette2_MTiles_data[] = {
        0x24, 0x24, 0x24, 0x35, // cloud left
        0x36, 0x25, 0x37, 0x25, // cloud middle
        0x24, 0x38, 0x24, 0x24, // cloud right
        0x24, 0x24, 0x39, 0x24, // cloud bottom left
        0x3a, 0x24, 0x3b, 0x24, // cloud bottom middle
        0x3c, 0x24, 0x24, 0x24, // cloud bottom right
        0x41, 0x26, 0x41, 0x26, // water/lava top
        0x26, 0x26, 0x26, 0x26, // water/lava
        0xb0, 0xb1, 0xb2, 0xb3, // cloud level terrain
        0x77, 0x79, 0x77, 0x79 // bowser's bridge
    };
    writeData(Palette2_MTiles, Palette2_MTiles_data, sizeof(Palette2_MTiles_data));

    // Palette3_MTiles
    //
    const uint8_t Palette3_MTiles_data[] = {
        0x53, 0x55, 0x54, 0x56, // question block (coin)
        0x53, 0x55, 0x54, 0x56, // question block (power-up)
        0xa5, 0xa7, 0xa6, 0xa8, // coin
        0xc2, 0xc4, 0xc3, 0xc5, // underwater coin
        0x57, 0x59, 0x58, 0x5a, // empty block
        0x7b, 0x7d, 0x7c, 0x7e // axe
    };
    writeData(Palette3_MTiles, Palette3_MTiles_data, sizeof(Palette3_MTiles_data));

    // WaterPaletteData
    //
    const uint8_t WaterPaletteData_data[] = {
        0x3f, 0x00, 0x20,
        0x0f, 0x15, 0x12, 0x25,
        0x0f, 0x3a, 0x1a, 0x0f,
        0x0f, 0x30, 0x12, 0x0f,
        0x0f, 0x27, 0x12, 0x0f,
        0x22, 0x16, 0x27, 0x18,
        0x0f, 0x10, 0x30, 0x27,
        0x0f, 0x16, 0x30, 0x27,
        0x0f, 0x0f, 0x30, 0x10,
        0x00
    };
    writeData(WaterPaletteData, WaterPaletteData_data, sizeof(WaterPaletteData_data));

    // GroundPaletteData
    //
    const uint8_t GroundPaletteData_data[] = {
        0x3f, 0x00, 0x20,
        0x0f, 0x29, 0x1a, 0x0f,
        0x0f, 0x36, 0x17, 0x0f,
        0x0f, 0x30, 0x21, 0x0f,
        0x0f, 0x27, 0x17, 0x0f,
        0x0f, 0x16, 0x27, 0x18,
        0x0f, 0x1a, 0x30, 0x27,
        0x0f, 0x16, 0x30, 0x27,
        0x0f, 0x0f, 0x36, 0x17,
        0x00
    };
    writeData(GroundPaletteData, GroundPaletteData_data, sizeof(GroundPaletteData_data));

    // UndergroundPaletteData
    //
    const uint8_t UndergroundPaletteData_data[] = {
        0x3f, 0x00, 0x20,
        0x0f, 0x29, 0x1a, 0x09,
        0x0f, 0x3c, 0x1c, 0x0f,
        0x0f, 0x30, 0x21, 0x1c,
        0x0f, 0x27, 0x17, 0x1c,
        0x0f, 0x16, 0x27, 0x18,
        0x0f, 0x1c, 0x36, 0x17,
        0x0f, 0x16, 0x30, 0x27,
        0x0f, 0x0c, 0x3c, 0x1c,
        0x00
    };
    writeData(UndergroundPaletteData, UndergroundPaletteData_data, sizeof(UndergroundPaletteData_data));

    // CastlePaletteData
    //
    const uint8_t CastlePaletteData_data[] = {
        0x3f, 0x00, 0x20,
        0x0f, 0x30, 0x10, 0x00,
        0x0f, 0x30, 0x10, 0x00,
        0x0f, 0x30, 0x16, 0x00,
        0x0f, 0x27, 0x17, 0x00,
        0x0f, 0x16, 0x27, 0x18,
        0x0f, 0x1c, 0x36, 0x17,
        0x0f, 0x16, 0x30, 0x27,
        0x0f, 0x00, 0x30, 0x10,
        0x00
    };
    writeData(CastlePaletteData, CastlePaletteData_data, sizeof(CastlePaletteData_data));

    // DaySnowPaletteData
    //
    const uint8_t DaySnowPaletteData_data[] = {
        0x3f, 0x00, 0x04,
        0x22, 0x30, 0x00, 0x10,
        0x00
    };
    writeData(DaySnowPaletteData, DaySnowPaletteData_data, sizeof(DaySnowPaletteData_data));

    // NightSnowPaletteData
    //
    const uint8_t NightSnowPaletteData_data[] = {
        0x3f, 0x00, 0x04,
        0x0f, 0x30, 0x00, 0x10,
        0x00
    };
    writeData(NightSnowPaletteData, NightSnowPaletteData_data, sizeof(NightSnowPaletteData_data));

    // MushroomPaletteData
    //
    const uint8_t MushroomPaletteData_data[] = {
        0x3f, 0x00, 0x04,
        0x22, 0x27, 0x16, 0x0f,
        0x00
    };
    writeData(MushroomPaletteData, MushroomPaletteData_data, sizeof(MushroomPaletteData_data));

    // BowserPaletteData
    //
    const uint8_t BowserPaletteData_data[] = {
        0x3f, 0x14, 0x04,
        0x0f, 0x1a, 0x30, 0x27,
        0x00
    };
    writeData(BowserPaletteData, BowserPaletteData_data, sizeof(BowserPaletteData_data));

    // MarioThanksMessage
    //
    const uint8_t MarioThanksMessage_data[] = {
        0x25, 0x48, 0x10,
        0x1d, 0x11, 0x0a, 0x17, 0x14, 0x24,
        0x22, 0x18, 0x1e, 0x24,
        0x16, 0x0a, 0x1b, 0x12, 0x18, 0x2b,
        0x00
    };
    writeData(MarioThanksMessage, MarioThanksMessage_data, sizeof(MarioThanksMessage_data));

    // LuigiThanksMessage
    //
    const uint8_t LuigiThanksMessage_data[] = {
        0x25, 0x48, 0x10,
        0x1d, 0x11, 0x0a, 0x17, 0x14, 0x24,
        0x22, 0x18, 0x1e, 0x24,
        0x15, 0x1e, 0x12, 0x10, 0x12, 0x2b,
        0x00
    };
    writeData(LuigiThanksMessage, LuigiThanksMessage_data, sizeof(LuigiThanksMessage_data));

    // MushroomRetainerSaved
    //
    const uint8_t MushroomRetainerSaved_data[] = {
        0x25, 0xc5, 0x16,
        0x0b, 0x1e, 0x1d, 0x24, 0x18, 0x1e, 0x1b, 0x24,
        0x19, 0x1b, 0x12, 0x17, 0x0c, 0x0e, 0x1c, 0x1c, 0x24,
        0x12, 0x1c, 0x24, 0x12, 0x17,
        0x26, 0x05, 0x0f,
        0x0a, 0x17, 0x18, 0x1d, 0x11, 0x0e, 0x1b, 0x24,
        0x0c, 0x0a, 0x1c, 0x1d, 0x15, 0x0e, 0x2b, 0x00
    };
    writeData(MushroomRetainerSaved, MushroomRetainerSaved_data, sizeof(MushroomRetainerSaved_data));

    // PrincessSaved1
    //
    const uint8_t PrincessSaved1_data[] = {
        0x25, 0xa7, 0x13,
        0x22, 0x18, 0x1e, 0x1b, 0x24,
        0x1a, 0x1e, 0x0e, 0x1c, 0x1d, 0x24,
        0x12, 0x1c, 0x24, 0x18, 0x1f, 0x0e, 0x1b, 0xaf,
        0x00
    };
    writeData(PrincessSaved1, PrincessSaved1_data, sizeof(PrincessSaved1_data));

    // PrincessSaved2
    //
    const uint8_t PrincessSaved2_data[] = {
        0x25, 0xe3, 0x1b,
        0x20, 0x0e, 0x24,
        0x19, 0x1b, 0x0e, 0x1c, 0x0e, 0x17, 0x1d, 0x24,
        0x22, 0x18, 0x1e, 0x24, 0x0a, 0x24, 0x17, 0x0e, 0x20, 0x24,
        0x1a, 0x1e, 0x0e, 0x1c, 0x1d, 0xaf,
        0x00
    };
    writeData(PrincessSaved2, PrincessSaved2_data, sizeof(PrincessSaved2_data));

    // WorldSelectMessage1
    //
    const uint8_t WorldSelectMessage1_data[] = {
        0x26, 0x4a, 0x0d,
        0x19, 0x1e, 0x1c, 0x11, 0x24,
        0x0b, 0x1e, 0x1d, 0x1d, 0x18, 0x17, 0x24, 0x0b,
        0x00
    };
    writeData(WorldSelectMessage1, WorldSelectMessage1_data, sizeof(WorldSelectMessage1_data));

    // WorldSelectMessage2
    //
    const uint8_t WorldSelectMessage2_data[] = {
        0x26, 0x88, 0x11,
        0x1d, 0x18, 0x24, 0x1c, 0x0e, 0x15, 0x0e, 0x0c, 0x1d, 0x24,
        0x0a, 0x24, 0x20, 0x18, 0x1b, 0x15, 0x0d,
        0x00
    };
    writeData(WorldSelectMessage2, WorldSelectMessage2_data, sizeof(WorldSelectMessage2_data));

    // StatusBarData
    //
    const uint8_t StatusBarData_data[] = {
        0xf0, 0x06, //  top score display on title screen
        0x62, 0x06, //  player score
        0x62, 0x06,
        0x6d, 0x02, //  coin tally
        0x6d, 0x02,
        0x7a, 0x03 //  game timer
    };
    writeData(StatusBarData, StatusBarData_data, sizeof(StatusBarData_data));

    // StatusBarOffset
    //
    const uint8_t StatusBarOffset_data[] = {
        0x06, 0x0c, 0x12, 0x18, 0x1e, 0x24
    };
    writeData(StatusBarOffset, StatusBarOffset_data, sizeof(StatusBarOffset_data));

    // DefaultSprOffsets
    //
    const uint8_t DefaultSprOffsets_data[] = {
        0x04, 0x30, 0x48, 0x60, 0x78, 0x90, 0xa8, 0xc0,
        0xd8, 0xe8, 0x24, 0xf8, 0xfc, 0x28, 0x2c
    };
    writeData(DefaultSprOffsets, DefaultSprOffsets_data, sizeof(DefaultSprOffsets_data));

    // Sprite0Data
    //
    const uint8_t Sprite0Data_data[] = {
        0x18, 0xff, 0x23, 0x58
    };
    writeData(Sprite0Data, Sprite0Data_data, sizeof(Sprite0Data_data));

    // MusicSelectData
    //
    const uint8_t MusicSelectData_data[] = {
        WaterMusic, GroundMusic, UndergroundMusic, CastleMusic,
        CloudMusic, PipeIntroMusic
    };
    writeData(MusicSelectData, MusicSelectData_data, sizeof(MusicSelectData_data));

    // PlayerStarting_X_Pos
    //
    const uint8_t PlayerStarting_X_Pos_data[] = {
        0x28, 0x18,
        0x38, 0x28
    };
    writeData(PlayerStarting_X_Pos, PlayerStarting_X_Pos_data, sizeof(PlayerStarting_X_Pos_data));

    // AltYPosOffset
    //
    const uint8_t AltYPosOffset_data[] = {
        0x08, 0x00
    };
    writeData(AltYPosOffset, AltYPosOffset_data, sizeof(AltYPosOffset_data));

    // PlayerStarting_Y_Pos
    //
    const uint8_t PlayerStarting_Y_Pos_data[] = {
        0x00, 0x20, 0xb0, 0x50, 0x00, 0x00, 0xb0, 0xb0,
        0xf0
    };
    writeData(PlayerStarting_Y_Pos, PlayerStarting_Y_Pos_data, sizeof(PlayerStarting_Y_Pos_data));

    // PlayerBGPriorityData
    //
    const uint8_t PlayerBGPriorityData_data[] = {
        0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    writeData(PlayerBGPriorityData, PlayerBGPriorityData_data, sizeof(PlayerBGPriorityData_data));

    // GameTimerData
    //
    const uint8_t GameTimerData_data[] = {
        0x20, // dummy byte, used as part of bg priority data
        0x04, 0x03, 0x02
    };
    writeData(GameTimerData, GameTimerData_data, sizeof(GameTimerData_data));

    // HalfwayPageNybbles
    //
    const uint8_t HalfwayPageNybbles_data[] = {
        0x56, 0x40,
        0x65, 0x70,
        0x66, 0x40,
        0x66, 0x40,
        0x66, 0x40,
        0x66, 0x60,
        0x65, 0x70,
        0x00, 0x00
    };
    writeData(HalfwayPageNybbles, HalfwayPageNybbles_data, sizeof(HalfwayPageNybbles_data));

    // BSceneDataOffsets
    //
    const uint8_t BSceneDataOffsets_data[] = {
        0x00, 0x30, 0x60
    };
    writeData(BSceneDataOffsets, BSceneDataOffsets_data, sizeof(BSceneDataOffsets_data));

    // BackSceneryData
    //
    const uint8_t BackSceneryData_data[] = {
        0x93, 0x00, 0x00, 0x11, 0x12, 0x12, 0x13, 0x00, // clouds
        0x00, 0x51, 0x52, 0x53, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x02, 0x02, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x91, 0x92, 0x93, 0x00,
        0x00, 0x00, 0x00, 0x51, 0x52, 0x53, 0x41, 0x42,
        0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x92,
        0x97, 0x87, 0x88, 0x89, 0x99, 0x00, 0x00, 0x00, // mountains and bushes
        0x11, 0x12, 0x13, 0xa4, 0xa5, 0xa5, 0xa5, 0xa6,
        0x97, 0x98, 0x99, 0x01, 0x02, 0x03, 0x00, 0xa4,
        0xa5, 0xa6, 0x00, 0x11, 0x12, 0x12, 0x12, 0x13,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x03,
        0x00, 0xa4, 0xa5, 0xa5, 0xa6, 0x00, 0x00, 0x00,
        0x11, 0x12, 0x12, 0x13, 0x00, 0x00, 0x00, 0x00, // trees and fences
        0x00, 0x00, 0x00, 0x9c, 0x00, 0x8b, 0xaa, 0xaa,
        0xaa, 0xaa, 0x11, 0x12, 0x13, 0x8b, 0x00, 0x9c,
        0x9c, 0x00, 0x00, 0x01, 0x02, 0x03, 0x11, 0x12,
        0x12, 0x13, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa,
        0x9c, 0xaa, 0x00, 0x8b, 0x00, 0x01, 0x02, 0x03
    };
    writeData(BackSceneryData, BackSceneryData_data, sizeof(BackSceneryData_data));

    // BackSceneryMetatiles
    //
    const uint8_t BackSceneryMetatiles_data[] = {
        0x80, 0x83, 0x00, // cloud left
        0x81, 0x84, 0x00, // cloud middle
        0x82, 0x85, 0x00, // cloud right
        0x02, 0x00, 0x00, // bush left
        0x03, 0x00, 0x00, // bush middle
        0x04, 0x00, 0x00, // bush right
        0x00, 0x05, 0x06, // mountain left
        0x07, 0x06, 0x0a, // mountain middle
        0x00, 0x08, 0x09, // mountain right
        0x4d, 0x00, 0x00, // fence
        0x0d, 0x0f, 0x4e, // tall tree
        0x0e, 0x4e, 0x4e // short tree
    };
    writeData(BackSceneryMetatiles, BackSceneryMetatiles_data, sizeof(BackSceneryMetatiles_data));

    // FSceneDataOffsets
    //
    const uint8_t FSceneDataOffsets_data[] = {
        0x00, 0x0d, 0x1a
    };
    writeData(FSceneDataOffsets, FSceneDataOffsets_data, sizeof(FSceneDataOffsets_data));

    // ForeSceneryData
    //
    const uint8_t ForeSceneryData_data[] = {
        0x86, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, // in water
        0x87, 0x87, 0x87, 0x87, 0x69, 0x69,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x47, // wall
        0x47, 0x47, 0x47, 0x47, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // over water
        0x00, 0x00, 0x00, 0x00, 0x86, 0x87
    };
    writeData(ForeSceneryData, ForeSceneryData_data, sizeof(ForeSceneryData_data));

    // TerrainMetatiles
    //
    const uint8_t TerrainMetatiles_data[] = {
        0x69, 0x54, 0x52, 0x62
    };
    writeData(TerrainMetatiles, TerrainMetatiles_data, sizeof(TerrainMetatiles_data));

    // TerrainRenderBits
    //
    const uint8_t TerrainRenderBits_data[] = {
        0b00000000, 0b00000000, // no ceiling or floor
        0b00000000, 0b00011000, // no ceiling, floor 2
        0b00000001, 0b00011000, // ceiling 1, floor 2
        0b00000111, 0b00011000, // ceiling 3, floor 2
        0b00001111, 0b00011000, // ceiling 4, floor 2
        0b11111111, 0b00011000, // ceiling 8, floor 2
        0b00000001, 0b00011111, // ceiling 1, floor 5
        0b00000111, 0b00011111, // ceiling 3, floor 5
        0b00001111, 0b00011111, // ceiling 4, floor 5
        0b10000001, 0b00011111, // ceiling 1, floor 6
        0b00000001, 0b00000000, // ceiling 1, no floor
        0b10001111, 0b00011111, // ceiling 4, floor 6
        0b11110001, 0b00011111, // ceiling 1, floor 9
        0b11111001, 0b00011000, // ceiling 1, middle 5, floor 2
        0b11110001, 0b00011000, // ceiling 1, middle 4, floor 2
        0b11111111, 0b00011111 // completely solid top to bottom
    };
    writeData(TerrainRenderBits, TerrainRenderBits_data, sizeof(TerrainRenderBits_data));

    // BlockBuffLowBounds
    //
    const uint8_t BlockBuffLowBounds_data[] = {
        0x10, 0x51, 0x88, 0xc0
    };
    writeData(BlockBuffLowBounds, BlockBuffLowBounds_data, sizeof(BlockBuffLowBounds_data));

    // FrenzyIDData
    //
    const uint8_t FrenzyIDData_data[] = {
        FlyCheepCheepFrenzy, BBill_CCheep_Frenzy, Stop_Frenzy
    };
    writeData(FrenzyIDData, FrenzyIDData_data, sizeof(FrenzyIDData_data));

    // PulleyRopeMetatiles
    //
    const uint8_t PulleyRopeMetatiles_data[] = {
        0x42, 0x41, 0x43
    };
    writeData(PulleyRopeMetatiles, PulleyRopeMetatiles_data, sizeof(PulleyRopeMetatiles_data));

    // CastleMetatiles
    //
    const uint8_t CastleMetatiles_data[] = {
        0x00, 0x45, 0x45, 0x45, 0x00,
        0x00, 0x48, 0x47, 0x46, 0x00,
        0x45, 0x49, 0x49, 0x49, 0x45,
        0x47, 0x47, 0x4a, 0x47, 0x47,
        0x47, 0x47, 0x4b, 0x47, 0x47,
        0x49, 0x49, 0x49, 0x49, 0x49,
        0x47, 0x4a, 0x47, 0x4a, 0x47,
        0x47, 0x4b, 0x47, 0x4b, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47,
        0x4a, 0x47, 0x4a, 0x47, 0x4a,
        0x4b, 0x47, 0x4b, 0x47, 0x4b
    };
    writeData(CastleMetatiles, CastleMetatiles_data, sizeof(CastleMetatiles_data));

    // SidePipeShaftData
    //
    const uint8_t SidePipeShaftData_data[] = {
        0x15, 0x14, // used to control whether or not vertical pipe shaft
        0x00, 0x00 // is drawn, and if so, controls the metatile number
    };
    writeData(SidePipeShaftData, SidePipeShaftData_data, sizeof(SidePipeShaftData_data));

    // SidePipeTopPart
    //
    const uint8_t SidePipeTopPart_data[] = {
        0x15, 0x1e, // top part of sideways part of pipe
        0x1d, 0x1c
    };
    writeData(SidePipeTopPart, SidePipeTopPart_data, sizeof(SidePipeTopPart_data));

    // SidePipeBottomPart
    //
    const uint8_t SidePipeBottomPart_data[] = {
        0x15, 0x21, // bottom part of sideways part of pipe
        0x20, 0x1f
    };
    writeData(SidePipeBottomPart, SidePipeBottomPart_data, sizeof(SidePipeBottomPart_data));

    // VerticalPipeData
    //
    const uint8_t VerticalPipeData_data[] = {
        0x11, 0x10, // used by pipes that lead somewhere
        0x15, 0x14,
        0x13, 0x12, // used by decoration pipes
        0x15, 0x14
    };
    writeData(VerticalPipeData, VerticalPipeData_data, sizeof(VerticalPipeData_data));

    // CoinMetatileData
    //
    const uint8_t CoinMetatileData_data[] = {
        0xc3, 0xc2, 0xc2, 0xc2
    };
    writeData(CoinMetatileData, CoinMetatileData_data, sizeof(CoinMetatileData_data));

    // C_ObjectRow
    //
    const uint8_t C_ObjectRow_data[] = {
        0x06, 0x07, 0x08
    };
    writeData(C_ObjectRow, C_ObjectRow_data, sizeof(C_ObjectRow_data));

    // C_ObjectMetatile
    //
    const uint8_t C_ObjectMetatile_data[] = {
        0xc5, 0x0c, 0x89
    };
    writeData(C_ObjectMetatile, C_ObjectMetatile_data, sizeof(C_ObjectMetatile_data));

    // SolidBlockMetatiles
    //
    const uint8_t SolidBlockMetatiles_data[] = {
        0x69, 0x61, 0x61, 0x62
    };
    writeData(SolidBlockMetatiles, SolidBlockMetatiles_data, sizeof(SolidBlockMetatiles_data));

    // BrickMetatiles
    //
    const uint8_t BrickMetatiles_data[] = {
        0x22, 0x51, 0x52, 0x52,
        0x88 // used only by row of bricks object
    };
    writeData(BrickMetatiles, BrickMetatiles_data, sizeof(BrickMetatiles_data));

    // StaircaseHeightData
    //
    const uint8_t StaircaseHeightData_data[] = {
        0x07, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00
    };
    writeData(StaircaseHeightData, StaircaseHeightData_data, sizeof(StaircaseHeightData_data));

    // StaircaseRowData
    //
    const uint8_t StaircaseRowData_data[] = {
        0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a
    };
    writeData(StaircaseRowData, StaircaseRowData_data, sizeof(StaircaseRowData_data));

    // HoleMetatiles
    //
    const uint8_t HoleMetatiles_data[] = {
        0x87, 0x00, 0x00, 0x00
    };
    writeData(HoleMetatiles, HoleMetatiles_data, sizeof(HoleMetatiles_data));

    // BlockBufferAddr
    //
    const uint8_t BlockBufferAddr_data[] = {
        LOBYTE(Block_Buffer_1), LOBYTE(Block_Buffer_2),
        HIBYTE(Block_Buffer_1), HIBYTE(Block_Buffer_2)
    };
    writeData(BlockBufferAddr, BlockBufferAddr_data, sizeof(BlockBufferAddr_data));

    // AreaDataOfsLoopback
    //
    const uint8_t AreaDataOfsLoopback_data[] = {
        0x12, 0x36, 0x0e, 0x0e, 0x0e, 0x32, 0x32, 0x32, 0x0a, 0x26, 0x40
    };
    writeData(AreaDataOfsLoopback, AreaDataOfsLoopback_data, sizeof(AreaDataOfsLoopback_data));

    // WorldAddrOffsets
    //
    const uint8_t WorldAddrOffsets_data[] = {
        World1Areas - AreaAddrOffsets, World2Areas - AreaAddrOffsets,
        World3Areas - AreaAddrOffsets, World4Areas - AreaAddrOffsets,
        World5Areas - AreaAddrOffsets, World6Areas - AreaAddrOffsets,
        World7Areas - AreaAddrOffsets, World8Areas - AreaAddrOffsets
    };
    writeData(WorldAddrOffsets, WorldAddrOffsets_data, sizeof(WorldAddrOffsets_data));

    // World1Areas
    //
    const uint8_t World1Areas_data[] = {
        0x25, 0x29, 0xc0, 0x26, 0x60
    };
    writeData(World1Areas, World1Areas_data, sizeof(World1Areas_data));

    // World2Areas
    //
    const uint8_t World2Areas_data[] = {
        0x28, 0x29, 0x01, 0x27, 0x62
    };
    writeData(World2Areas, World2Areas_data, sizeof(World2Areas_data));

    // World3Areas
    //
    const uint8_t World3Areas_data[] = {
        0x24, 0x35, 0x20, 0x63
    };
    writeData(World3Areas, World3Areas_data, sizeof(World3Areas_data));

    // World4Areas
    //
    const uint8_t World4Areas_data[] = {
        0x22, 0x29, 0x41, 0x2c, 0x61
    };
    writeData(World4Areas, World4Areas_data, sizeof(World4Areas_data));

    // World5Areas
    //
    const uint8_t World5Areas_data[] = {
        0x2a, 0x31, 0x26, 0x62
    };
    writeData(World5Areas, World5Areas_data, sizeof(World5Areas_data));

    // World6Areas
    //
    const uint8_t World6Areas_data[] = {
        0x2e, 0x23, 0x2d, 0x60
    };
    writeData(World6Areas, World6Areas_data, sizeof(World6Areas_data));

    // World7Areas
    //
    const uint8_t World7Areas_data[] = {
        0x33, 0x29, 0x01, 0x27, 0x64
    };
    writeData(World7Areas, World7Areas_data, sizeof(World7Areas_data));

    // World8Areas
    //
    const uint8_t World8Areas_data[] = {
        0x30, 0x32, 0x21, 0x65
    };
    writeData(World8Areas, World8Areas_data, sizeof(World8Areas_data));

    // EnemyAddrHOffsets
    //
    const uint8_t EnemyAddrHOffsets_data[] = {
        0x1f, 0x06, 0x1c, 0x00
    };
    writeData(EnemyAddrHOffsets, EnemyAddrHOffsets_data, sizeof(EnemyAddrHOffsets_data));

    // EnemyDataAddrLow
    //
    const uint8_t EnemyDataAddrLow_data[] = {
        LOBYTE(E_CastleArea1), LOBYTE(E_CastleArea2), LOBYTE(E_CastleArea3), LOBYTE(E_CastleArea4), LOBYTE(E_CastleArea5), LOBYTE(E_CastleArea6),
        LOBYTE(E_GroundArea1), LOBYTE(E_GroundArea2), LOBYTE(E_GroundArea3), LOBYTE(E_GroundArea4), LOBYTE(E_GroundArea5), LOBYTE(E_GroundArea6),
        LOBYTE(E_GroundArea7), LOBYTE(E_GroundArea8), LOBYTE(E_GroundArea9), LOBYTE(E_GroundArea10), LOBYTE(E_GroundArea11), LOBYTE(E_GroundArea12),
        LOBYTE(E_GroundArea13), LOBYTE(E_GroundArea14), LOBYTE(E_GroundArea15), LOBYTE(E_GroundArea16), LOBYTE(E_GroundArea17), LOBYTE(E_GroundArea18),
        LOBYTE(E_GroundArea19), LOBYTE(E_GroundArea20), LOBYTE(E_GroundArea21), LOBYTE(E_GroundArea22), LOBYTE(E_UndergroundArea1),
        LOBYTE(E_UndergroundArea2), LOBYTE(E_UndergroundArea3), LOBYTE(E_WaterArea1), LOBYTE(E_WaterArea2), LOBYTE(E_WaterArea3)
    };
    writeData(EnemyDataAddrLow, EnemyDataAddrLow_data, sizeof(EnemyDataAddrLow_data));

    // EnemyDataAddrHigh
    //
    const uint8_t EnemyDataAddrHigh_data[] = {
        HIBYTE(E_CastleArea1), HIBYTE(E_CastleArea2), HIBYTE(E_CastleArea3), HIBYTE(E_CastleArea4), HIBYTE(E_CastleArea5), HIBYTE(E_CastleArea6),
        HIBYTE(E_GroundArea1), HIBYTE(E_GroundArea2), HIBYTE(E_GroundArea3), HIBYTE(E_GroundArea4), HIBYTE(E_GroundArea5), HIBYTE(E_GroundArea6),
        HIBYTE(E_GroundArea7), HIBYTE(E_GroundArea8), HIBYTE(E_GroundArea9), HIBYTE(E_GroundArea10), HIBYTE(E_GroundArea11), HIBYTE(E_GroundArea12),
        HIBYTE(E_GroundArea13), HIBYTE(E_GroundArea14), HIBYTE(E_GroundArea15), HIBYTE(E_GroundArea16), HIBYTE(E_GroundArea17), HIBYTE(E_GroundArea18),
        HIBYTE(E_GroundArea19), HIBYTE(E_GroundArea20), HIBYTE(E_GroundArea21), HIBYTE(E_GroundArea22), HIBYTE(E_UndergroundArea1),
        HIBYTE(E_UndergroundArea2), HIBYTE(E_UndergroundArea3), HIBYTE(E_WaterArea1), HIBYTE(E_WaterArea2), HIBYTE(E_WaterArea3)
    };
    writeData(EnemyDataAddrHigh, EnemyDataAddrHigh_data, sizeof(EnemyDataAddrHigh_data));

    // AreaDataHOffsets
    //
    const uint8_t AreaDataHOffsets_data[] = {
        0x00, 0x03, 0x19, 0x1c
    };
    writeData(AreaDataHOffsets, AreaDataHOffsets_data, sizeof(AreaDataHOffsets_data));

    // AreaDataAddrLow
    //
    const uint8_t AreaDataAddrLow_data[] = {
        LOBYTE(L_WaterArea1), LOBYTE(L_WaterArea2), LOBYTE(L_WaterArea3), LOBYTE(L_GroundArea1), LOBYTE(L_GroundArea2), LOBYTE(L_GroundArea3),
        LOBYTE(L_GroundArea4), LOBYTE(L_GroundArea5), LOBYTE(L_GroundArea6), LOBYTE(L_GroundArea7), LOBYTE(L_GroundArea8), LOBYTE(L_GroundArea9),
        LOBYTE(L_GroundArea10), LOBYTE(L_GroundArea11), LOBYTE(L_GroundArea12), LOBYTE(L_GroundArea13), LOBYTE(L_GroundArea14), LOBYTE(L_GroundArea15),
        LOBYTE(L_GroundArea16), LOBYTE(L_GroundArea17), LOBYTE(L_GroundArea18), LOBYTE(L_GroundArea19), LOBYTE(L_GroundArea20), LOBYTE(L_GroundArea21),
        LOBYTE(L_GroundArea22), LOBYTE(L_UndergroundArea1), LOBYTE(L_UndergroundArea2), LOBYTE(L_UndergroundArea3), LOBYTE(L_CastleArea1),
        LOBYTE(L_CastleArea2), LOBYTE(L_CastleArea3), LOBYTE(L_CastleArea4), LOBYTE(L_CastleArea5), LOBYTE(L_CastleArea6)
    };
    writeData(AreaDataAddrLow, AreaDataAddrLow_data, sizeof(AreaDataAddrLow_data));

    // AreaDataAddrHigh
    //
    const uint8_t AreaDataAddrHigh_data[] = {
        HIBYTE(L_WaterArea1), HIBYTE(L_WaterArea2), HIBYTE(L_WaterArea3), HIBYTE(L_GroundArea1), HIBYTE(L_GroundArea2), HIBYTE(L_GroundArea3),
        HIBYTE(L_GroundArea4), HIBYTE(L_GroundArea5), HIBYTE(L_GroundArea6), HIBYTE(L_GroundArea7), HIBYTE(L_GroundArea8), HIBYTE(L_GroundArea9),
        HIBYTE(L_GroundArea10), HIBYTE(L_GroundArea11), HIBYTE(L_GroundArea12), HIBYTE(L_GroundArea13), HIBYTE(L_GroundArea14), HIBYTE(L_GroundArea15),
        HIBYTE(L_GroundArea16), HIBYTE(L_GroundArea17), HIBYTE(L_GroundArea18), HIBYTE(L_GroundArea19), HIBYTE(L_GroundArea20), HIBYTE(L_GroundArea21),
        HIBYTE(L_GroundArea22), HIBYTE(L_UndergroundArea1), HIBYTE(L_UndergroundArea2), HIBYTE(L_UndergroundArea3), HIBYTE(L_CastleArea1),
        HIBYTE(L_CastleArea2), HIBYTE(L_CastleArea3), HIBYTE(L_CastleArea4), HIBYTE(L_CastleArea5), HIBYTE(L_CastleArea6)
    };
    writeData(AreaDataAddrHigh, AreaDataAddrHigh_data, sizeof(AreaDataAddrHigh_data));

    // E_CastleArea1
    //
    const uint8_t E_CastleArea1_data[] = {
        0x76, 0xdd, 0xbb, 0x4c, 0xea, 0x1d, 0x1b, 0xcc, 0x56, 0x5d,
        0x16, 0x9d, 0xc6, 0x1d, 0x36, 0x9d, 0xc9, 0x1d, 0x04, 0xdb,
        0x49, 0x1d, 0x84, 0x1b, 0xc9, 0x5d, 0x88, 0x95, 0x0f, 0x08,
        0x30, 0x4c, 0x78, 0x2d, 0xa6, 0x28, 0x90, 0xb5,
        0xff
    };
    writeData(E_CastleArea1, E_CastleArea1_data, sizeof(E_CastleArea1_data));

    // E_CastleArea2
    //
    const uint8_t E_CastleArea2_data[] = {
        0x0f, 0x03, 0x56, 0x1b, 0xc9, 0x1b, 0x0f, 0x07, 0x36, 0x1b,
        0xaa, 0x1b, 0x48, 0x95, 0x0f, 0x0a, 0x2a, 0x1b, 0x5b, 0x0c,
        0x78, 0x2d, 0x90, 0xb5,
        0xff
    };
    writeData(E_CastleArea2, E_CastleArea2_data, sizeof(E_CastleArea2_data));

    // E_CastleArea3
    //
    const uint8_t E_CastleArea3_data[] = {
        0x0b, 0x8c, 0x4b, 0x4c, 0x77, 0x5f, 0xeb, 0x0c, 0xbd, 0xdb,
        0x19, 0x9d, 0x75, 0x1d, 0x7d, 0x5b, 0xd9, 0x1d, 0x3d, 0xdd,
        0x99, 0x1d, 0x26, 0x9d, 0x5a, 0x2b, 0x8a, 0x2c, 0xca, 0x1b,
        0x20, 0x95, 0x7b, 0x5c, 0xdb, 0x4c, 0x1b, 0xcc, 0x3b, 0xcc,
        0x78, 0x2d, 0xa6, 0x28, 0x90, 0xb5,
        0xff
    };
    writeData(E_CastleArea3, E_CastleArea3_data, sizeof(E_CastleArea3_data));

    // E_CastleArea4
    //
    const uint8_t E_CastleArea4_data[] = {
        0x0b, 0x8c, 0x3b, 0x1d, 0x8b, 0x1d, 0xab, 0x0c, 0xdb, 0x1d,
        0x0f, 0x03, 0x65, 0x1d, 0x6b, 0x1b, 0x05, 0x9d, 0x0b, 0x1b,
        0x05, 0x9b, 0x0b, 0x1d, 0x8b, 0x0c, 0x1b, 0x8c, 0x70, 0x15,
        0x7b, 0x0c, 0xdb, 0x0c, 0x0f, 0x08, 0x78, 0x2d, 0xa6, 0x28,
        0x90, 0xb5,
        0xff
    };
    writeData(E_CastleArea4, E_CastleArea4_data, sizeof(E_CastleArea4_data));

    // E_CastleArea5
    //
    const uint8_t E_CastleArea5_data[] = {
        0x27, 0xa9, 0x4b, 0x0c, 0x68, 0x29, 0x0f, 0x06, 0x77, 0x1b,
        0x0f, 0x0b, 0x60, 0x15, 0x4b, 0x8c, 0x78, 0x2d, 0x90, 0xb5,
        0xff
    };
    writeData(E_CastleArea5, E_CastleArea5_data, sizeof(E_CastleArea5_data));

    // E_CastleArea6
    //
    const uint8_t E_CastleArea6_data[] = {
        0x0f, 0x03, 0x8e, 0x65, 0xe1, 0xbb, 0x38, 0x6d, 0xa8, 0x3e, 0xe5, 0xe7,
        0x0f, 0x08, 0x0b, 0x02, 0x2b, 0x02, 0x5e, 0x65, 0xe1, 0xbb, 0x0e,
        0xdb, 0x0e, 0xbb, 0x8e, 0xdb, 0x0e, 0xfe, 0x65, 0xec, 0x0f, 0x0d,
        0x4e, 0x65, 0xe1, 0x0f, 0x0e, 0x4e, 0x02, 0xe0, 0x0f, 0x10, 0xfe, 0xe5, 0xe1,
        0x1b, 0x85, 0x7b, 0x0c, 0x5b, 0x95, 0x78, 0x2d, 0x90, 0xb5,
        0xff
    };
    writeData(E_CastleArea6, E_CastleArea6_data, sizeof(E_CastleArea6_data));

    // E_GroundArea1
    //
    const uint8_t E_GroundArea1_data[] = {
        0xa5, 0x86, 0xe4, 0x28, 0x18, 0xa8, 0x45, 0x83, 0x69, 0x03,
        0xc6, 0x29, 0x9b, 0x83, 0x16, 0xa4, 0x88, 0x24, 0xe9, 0x28,
        0x05, 0xa8, 0x7b, 0x28, 0x24, 0x8f, 0xc8, 0x03, 0xe8, 0x03,
        0x46, 0xa8, 0x85, 0x24, 0xc8, 0x24,
        0xff
    };
    writeData(E_GroundArea1, E_GroundArea1_data, sizeof(E_GroundArea1_data));

    // E_GroundArea2
    //
    const uint8_t E_GroundArea2_data[] = {
        0xeb, 0x8e, 0x0f, 0x03, 0xfb, 0x05, 0x17, 0x85, 0xdb, 0x8e,
        0x0f, 0x07, 0x57, 0x05, 0x7b, 0x05, 0x9b, 0x80, 0x2b, 0x85,
        0xfb, 0x05, 0x0f, 0x0b, 0x1b, 0x05, 0x9b, 0x05,
        0xff
    };
    writeData(E_GroundArea2, E_GroundArea2_data, sizeof(E_GroundArea2_data));

    // E_GroundArea3
    //
    const uint8_t E_GroundArea3_data[] = {
        0x2e, 0xc2, 0x66, 0xe2, 0x11, 0x0f, 0x07, 0x02, 0x11, 0x0f, 0x0c,
        0x12, 0x11,
        0xff
    };
    writeData(E_GroundArea3, E_GroundArea3_data, sizeof(E_GroundArea3_data));

    // E_GroundArea4
    //
    const uint8_t E_GroundArea4_data[] = {
        0x0e, 0xc2, 0xa8, 0xab, 0x00, 0xbb, 0x8e, 0x6b, 0x82, 0xde, 0x00, 0xa0,
        0x33, 0x86, 0x43, 0x06, 0x3e, 0xb4, 0xa0, 0xcb, 0x02, 0x0f, 0x07,
        0x7e, 0x42, 0xa6, 0x83, 0x02, 0x0f, 0x0a, 0x3b, 0x02, 0xcb, 0x37,
        0x0f, 0x0c, 0xe3, 0x0e,
        0xff
    };
    writeData(E_GroundArea4, E_GroundArea4_data, sizeof(E_GroundArea4_data));

    // E_GroundArea5
    //
    const uint8_t E_GroundArea5_data[] = {
        0x9b, 0x8e, 0xca, 0x0e, 0xee, 0x42, 0x44, 0x5b, 0x86, 0x80, 0xb8,
        0x1b, 0x80, 0x50, 0xba, 0x10, 0xb7, 0x5b, 0x00, 0x17, 0x85,
        0x4b, 0x05, 0xfe, 0x34, 0x40, 0xb7, 0x86, 0xc6, 0x06, 0x5b, 0x80,
        0x83, 0x00, 0xd0, 0x38, 0x5b, 0x8e, 0x8a, 0x0e, 0xa6, 0x00,
        0xbb, 0x0e, 0xc5, 0x80, 0xf3, 0x00,
        0xff
    };
    writeData(E_GroundArea5, E_GroundArea5_data, sizeof(E_GroundArea5_data));

    // E_GroundArea6
    //
    const uint8_t E_GroundArea6_data[] = {
        0x1e, 0xc2, 0x00, 0x6b, 0x06, 0x8b, 0x86, 0x63, 0xb7, 0x0f, 0x05,
        0x03, 0x06, 0x23, 0x06, 0x4b, 0xb7, 0xbb, 0x00, 0x5b, 0xb7,
        0xfb, 0x37, 0x3b, 0xb7, 0x0f, 0x0b, 0x1b, 0x37,
        0xff
    };
    writeData(E_GroundArea6, E_GroundArea6_data, sizeof(E_GroundArea6_data));

    // E_GroundArea7
    //
    const uint8_t E_GroundArea7_data[] = {
        0x2b, 0xd7, 0xe3, 0x03, 0xc2, 0x86, 0xe2, 0x06, 0x76, 0xa5,
        0xa3, 0x8f, 0x03, 0x86, 0x2b, 0x57, 0x68, 0x28, 0xe9, 0x28,
        0xe5, 0x83, 0x24, 0x8f, 0x36, 0xa8, 0x5b, 0x03,
        0xff
    };
    writeData(E_GroundArea7, E_GroundArea7_data, sizeof(E_GroundArea7_data));

    // E_GroundArea8
    //
    const uint8_t E_GroundArea8_data[] = {
        0x0f, 0x02, 0x78, 0x40, 0x48, 0xce, 0xf8, 0xc3, 0xf8, 0xc3,
        0x0f, 0x07, 0x7b, 0x43, 0xc6, 0xd0, 0x0f, 0x8a, 0xc8, 0x50,
        0xff
    };
    writeData(E_GroundArea8, E_GroundArea8_data, sizeof(E_GroundArea8_data));

    // E_GroundArea9
    //
    const uint8_t E_GroundArea9_data[] = {
        0x85, 0x86, 0x0b, 0x80, 0x1b, 0x00, 0xdb, 0x37, 0x77, 0x80,
        0xeb, 0x37, 0xfe, 0x2b, 0x20, 0x2b, 0x80, 0x7b, 0x38, 0xab, 0xb8,
        0x77, 0x86, 0xfe, 0x42, 0x20, 0x49, 0x86, 0x8b, 0x06, 0x9b, 0x80,
        0x7b, 0x8e, 0x5b, 0xb7, 0x9b, 0x0e, 0xbb, 0x0e, 0x9b, 0x80
    };
    writeData(E_GroundArea9, E_GroundArea9_data, sizeof(E_GroundArea9_data));

    // E_GroundArea10
    //
    const uint8_t E_GroundArea10_data[] = {
        0xff
    };
    writeData(E_GroundArea10, E_GroundArea10_data, sizeof(E_GroundArea10_data));

    // E_GroundArea11
    //
    const uint8_t E_GroundArea11_data[] = {
        0x0b, 0x80, 0x60, 0x38, 0x10, 0xb8, 0xc0, 0x3b, 0xdb, 0x8e,
        0x40, 0xb8, 0xf0, 0x38, 0x7b, 0x8e, 0xa0, 0xb8, 0xc0, 0xb8,
        0xfb, 0x00, 0xa0, 0xb8, 0x30, 0xbb, 0xee, 0x42, 0x88, 0x0f, 0x0b,
        0x2b, 0x0e, 0x67, 0x0e,
        0xff
    };
    writeData(E_GroundArea11, E_GroundArea11_data, sizeof(E_GroundArea11_data));

    // E_GroundArea12
    //
    const uint8_t E_GroundArea12_data[] = {
        0x0a, 0xaa, 0x0e, 0x28, 0x2a, 0x0e, 0x31, 0x88,
        0xff
    };
    writeData(E_GroundArea12, E_GroundArea12_data, sizeof(E_GroundArea12_data));

    // E_GroundArea13
    //
    const uint8_t E_GroundArea13_data[] = {
        0xc7, 0x83, 0xd7, 0x03, 0x42, 0x8f, 0x7a, 0x03, 0x05, 0xa4,
        0x78, 0x24, 0xa6, 0x25, 0xe4, 0x25, 0x4b, 0x83, 0xe3, 0x03,
        0x05, 0xa4, 0x89, 0x24, 0xb5, 0x24, 0x09, 0xa4, 0x65, 0x24,
        0xc9, 0x24, 0x0f, 0x08, 0x85, 0x25,
        0xff
    };
    writeData(E_GroundArea13, E_GroundArea13_data, sizeof(E_GroundArea13_data));

    // E_GroundArea14
    //
    const uint8_t E_GroundArea14_data[] = {
        0xcd, 0xa5, 0xb5, 0xa8, 0x07, 0xa8, 0x76, 0x28, 0xcc, 0x25,
        0x65, 0xa4, 0xa9, 0x24, 0xe5, 0x24, 0x19, 0xa4, 0x0f, 0x07,
        0x95, 0x28, 0xe6, 0x24, 0x19, 0xa4, 0xd7, 0x29, 0x16, 0xa9,
        0x58, 0x29, 0x97, 0x29,
        0xff
    };
    writeData(E_GroundArea14, E_GroundArea14_data, sizeof(E_GroundArea14_data));

    // E_GroundArea15
    //
    const uint8_t E_GroundArea15_data[] = {
        0x0f, 0x02, 0x02, 0x11, 0x0f, 0x07, 0x02, 0x11,
        0xff
    };
    writeData(E_GroundArea15, E_GroundArea15_data, sizeof(E_GroundArea15_data));

    // E_GroundArea16
    //
    const uint8_t E_GroundArea16_data[] = {
        0xff
    };
    writeData(E_GroundArea16, E_GroundArea16_data, sizeof(E_GroundArea16_data));

    // E_GroundArea17
    //
    const uint8_t E_GroundArea17_data[] = {
        0x2b, 0x82, 0xab, 0x38, 0xde, 0x42, 0xe2, 0x1b, 0xb8, 0xeb,
        0x3b, 0xdb, 0x80, 0x8b, 0xb8, 0x1b, 0x82, 0xfb, 0xb8, 0x7b,
        0x80, 0xfb, 0x3c, 0x5b, 0xbc, 0x7b, 0xb8, 0x1b, 0x8e, 0xcb,
        0x0e, 0x1b, 0x8e, 0x0f, 0x0d, 0x2b, 0x3b, 0xbb, 0xb8, 0xeb, 0x82,
        0x4b, 0xb8, 0xbb, 0x38, 0x3b, 0xb7, 0xbb, 0x02, 0x0f, 0x13,
        0x1b, 0x00, 0xcb, 0x80, 0x6b, 0xbc,
        0xff
    };
    writeData(E_GroundArea17, E_GroundArea17_data, sizeof(E_GroundArea17_data));

    // E_GroundArea18
    //
    const uint8_t E_GroundArea18_data[] = {
        0x7b, 0x80, 0xae, 0x00, 0x80, 0x8b, 0x8e, 0xe8, 0x05, 0xf9, 0x86,
        0x17, 0x86, 0x16, 0x85, 0x4e, 0x2b, 0x80, 0xab, 0x8e, 0x87, 0x85,
        0xc3, 0x05, 0x8b, 0x82, 0x9b, 0x02, 0xab, 0x02, 0xbb, 0x86,
        0xcb, 0x06, 0xd3, 0x03, 0x3b, 0x8e, 0x6b, 0x0e, 0xa7, 0x8e,
        0xff
    };
    writeData(E_GroundArea18, E_GroundArea18_data, sizeof(E_GroundArea18_data));

    // E_GroundArea19
    //
    const uint8_t E_GroundArea19_data[] = {
        0x29, 0x8e, 0x52, 0x11, 0x83, 0x0e, 0x0f, 0x03, 0x9b, 0x0e,
        0x2b, 0x8e, 0x5b, 0x0e, 0xcb, 0x8e, 0xfb, 0x0e, 0xfb, 0x82,
        0x9b, 0x82, 0xbb, 0x02, 0xfe, 0x42, 0xe8, 0xbb, 0x8e, 0x0f, 0x0a,
        0xab, 0x0e, 0xcb, 0x0e, 0xf9, 0x0e, 0x88, 0x86, 0xa6, 0x06,
        0xdb, 0x02, 0xb6, 0x8e,
        0xff
    };
    writeData(E_GroundArea19, E_GroundArea19_data, sizeof(E_GroundArea19_data));

    // E_GroundArea20
    //
    const uint8_t E_GroundArea20_data[] = {
        0xab, 0xce, 0xde, 0x42, 0xc0, 0xcb, 0xce, 0x5b, 0x8e, 0x1b, 0xce,
        0x4b, 0x85, 0x67, 0x45, 0x0f, 0x07, 0x2b, 0x00, 0x7b, 0x85,
        0x97, 0x05, 0x0f, 0x0a, 0x92, 0x02,
        0xff
    };
    writeData(E_GroundArea20, E_GroundArea20_data, sizeof(E_GroundArea20_data));

    // E_GroundArea21
    //
    const uint8_t E_GroundArea21_data[] = {
        0x0a, 0xaa, 0x0e, 0x24, 0x4a, 0x1e, 0x23, 0xaa,
        0xff
    };
    writeData(E_GroundArea21, E_GroundArea21_data, sizeof(E_GroundArea21_data));

    // E_GroundArea22
    //
    const uint8_t E_GroundArea22_data[] = {
        0x1b, 0x80, 0xbb, 0x38, 0x4b, 0xbc, 0xeb, 0x3b, 0x0f, 0x04,
        0x2b, 0x00, 0xab, 0x38, 0xeb, 0x00, 0xcb, 0x8e, 0xfb, 0x80,
        0xab, 0xb8, 0x6b, 0x80, 0xfb, 0x3c, 0x9b, 0xbb, 0x5b, 0xbc,
        0xfb, 0x00, 0x6b, 0xb8, 0xfb, 0x38,
        0xff
    };
    writeData(E_GroundArea22, E_GroundArea22_data, sizeof(E_GroundArea22_data));

    // E_UndergroundArea1
    //
    const uint8_t E_UndergroundArea1_data[] = {
        0x0b, 0x86, 0x1a, 0x06, 0xdb, 0x06, 0xde, 0xc2, 0x02, 0xf0, 0x3b,
        0xbb, 0x80, 0xeb, 0x06, 0x0b, 0x86, 0x93, 0x06, 0xf0, 0x39,
        0x0f, 0x06, 0x60, 0xb8, 0x1b, 0x86, 0xa0, 0xb9, 0xb7, 0x27,
        0xbd, 0x27, 0x2b, 0x83, 0xa1, 0x26, 0xa9, 0x26, 0xee, 0x25, 0x0b,
        0x27, 0xb4,
        0xff
    };
    writeData(E_UndergroundArea1, E_UndergroundArea1_data, sizeof(E_UndergroundArea1_data));

    // E_UndergroundArea2
    //
    const uint8_t E_UndergroundArea2_data[] = {
        0x0f, 0x02, 0x1e, 0x2f, 0x60, 0xe0, 0x3a, 0xa5, 0xa7, 0xdb, 0x80,
        0x3b, 0x82, 0x8b, 0x02, 0xfe, 0x42, 0x68, 0x70, 0xbb, 0x25, 0xa7,
        0x2c, 0x27, 0xb2, 0x26, 0xb9, 0x26, 0x9b, 0x80, 0xa8, 0x82,
        0xb5, 0x27, 0xbc, 0x27, 0xb0, 0xbb, 0x3b, 0x82, 0x87, 0x34,
        0xee, 0x25, 0x6b,
        0xff
    };
    writeData(E_UndergroundArea2, E_UndergroundArea2_data, sizeof(E_UndergroundArea2_data));

    // E_UndergroundArea3
    //
    const uint8_t E_UndergroundArea3_data[] = {
        0x1e, 0xa5, 0x0a, 0x2e, 0x28, 0x27, 0x2e, 0x33, 0xc7, 0x0f, 0x03, 0x1e, 0x40, 0x07,
        0x2e, 0x30, 0xe7, 0x0f, 0x05, 0x1e, 0x24, 0x44, 0x0f, 0x07, 0x1e, 0x22, 0x6a,
        0x2e, 0x23, 0xab, 0x0f, 0x09, 0x1e, 0x41, 0x68, 0x1e, 0x2a, 0x8a, 0x2e, 0x23, 0xa2,
        0x2e, 0x32, 0xea,
        0xff
    };
    writeData(E_UndergroundArea3, E_UndergroundArea3_data, sizeof(E_UndergroundArea3_data));

    // E_WaterArea1
    //
    const uint8_t E_WaterArea1_data[] = {
        0x3b, 0x87, 0x66, 0x27, 0xcc, 0x27, 0xee, 0x31, 0x87, 0xee, 0x23, 0xa7,
        0x3b, 0x87, 0xdb, 0x07,
        0xff
    };
    writeData(E_WaterArea1, E_WaterArea1_data, sizeof(E_WaterArea1_data));

    // E_WaterArea2
    //
    const uint8_t E_WaterArea2_data[] = {
        0x0f, 0x01, 0x2e, 0x25, 0x2b, 0x2e, 0x25, 0x4b, 0x4e, 0x25, 0xcb, 0x6b, 0x07,
        0x97, 0x47, 0xe9, 0x87, 0x47, 0xc7, 0x7a, 0x07, 0xd6, 0xc7,
        0x78, 0x07, 0x38, 0x87, 0xab, 0x47, 0xe3, 0x07, 0x9b, 0x87,
        0x0f, 0x09, 0x68, 0x47, 0xdb, 0xc7, 0x3b, 0xc7,
        0xff
    };
    writeData(E_WaterArea2, E_WaterArea2_data, sizeof(E_WaterArea2_data));

    // E_WaterArea3
    //
    const uint8_t E_WaterArea3_data[] = {
        0x47, 0x9b, 0xcb, 0x07, 0xfa, 0x1d, 0x86, 0x9b, 0x3a, 0x87,
        0x56, 0x07, 0x88, 0x1b, 0x07, 0x9d, 0x2e, 0x65, 0xf0,
        0xff
    };
    writeData(E_WaterArea3, E_WaterArea3_data, sizeof(E_WaterArea3_data));

    // L_CastleArea1
    //
    const uint8_t L_CastleArea1_data[] = {
        0x9b, 0x07,
        0x05, 0x32, 0x06, 0x33, 0x07, 0x34, 0xce, 0x03, 0xdc, 0x51,
        0xee, 0x07, 0x73, 0xe0, 0x74, 0x0a, 0x7e, 0x06, 0x9e, 0x0a,
        0xce, 0x06, 0xe4, 0x00, 0xe8, 0x0a, 0xfe, 0x0a, 0x2e, 0x89,
        0x4e, 0x0b, 0x54, 0x0a, 0x14, 0x8a, 0xc4, 0x0a, 0x34, 0x8a,
        0x7e, 0x06, 0xc7, 0x0a, 0x01, 0xe0, 0x02, 0x0a, 0x47, 0x0a,
        0x81, 0x60, 0x82, 0x0a, 0xc7, 0x0a, 0x0e, 0x87, 0x7e, 0x02,
        0xa7, 0x02, 0xb3, 0x02, 0xd7, 0x02, 0xe3, 0x02, 0x07, 0x82,
        0x13, 0x02, 0x3e, 0x06, 0x7e, 0x02, 0xae, 0x07, 0xfe, 0x0a,
        0x0d, 0xc4, 0xcd, 0x43, 0xce, 0x09, 0xde, 0x0b, 0xdd, 0x42,
        0xfe, 0x02, 0x5d, 0xc7,
        0xfd
    };
    writeData(L_CastleArea1, L_CastleArea1_data, sizeof(L_CastleArea1_data));

    // L_CastleArea2
    //
    const uint8_t L_CastleArea2_data[] = {
        0x5b, 0x07,
        0x05, 0x32, 0x06, 0x33, 0x07, 0x34, 0x5e, 0x0a, 0x68, 0x64,
        0x98, 0x64, 0xa8, 0x64, 0xce, 0x06, 0xfe, 0x02, 0x0d, 0x01,
        0x1e, 0x0e, 0x7e, 0x02, 0x94, 0x63, 0xb4, 0x63, 0xd4, 0x63,
        0xf4, 0x63, 0x14, 0xe3, 0x2e, 0x0e, 0x5e, 0x02, 0x64, 0x35,
        0x88, 0x72, 0xbe, 0x0e, 0x0d, 0x04, 0xae, 0x02, 0xce, 0x08,
        0xcd, 0x4b, 0xfe, 0x02, 0x0d, 0x05, 0x68, 0x31, 0x7e, 0x0a,
        0x96, 0x31, 0xa9, 0x63, 0xa8, 0x33, 0xd5, 0x30, 0xee, 0x02,
        0xe6, 0x62, 0xf4, 0x61, 0x04, 0xb1, 0x08, 0x3f, 0x44, 0x33,
        0x94, 0x63, 0xa4, 0x31, 0xe4, 0x31, 0x04, 0xbf, 0x08, 0x3f,
        0x04, 0xbf, 0x08, 0x3f, 0xcd, 0x4b, 0x03, 0xe4, 0x0e, 0x03,
        0x2e, 0x01, 0x7e, 0x06, 0xbe, 0x02, 0xde, 0x06, 0xfe, 0x0a,
        0x0d, 0xc4, 0xcd, 0x43, 0xce, 0x09, 0xde, 0x0b, 0xdd, 0x42,
        0xfe, 0x02, 0x5d, 0xc7,
        0xfd
    };
    writeData(L_CastleArea2, L_CastleArea2_data, sizeof(L_CastleArea2_data));

    // L_CastleArea3
    //
    const uint8_t L_CastleArea3_data[] = {
        0x9b, 0x07,
        0x05, 0x32, 0x06, 0x33, 0x07, 0x34, 0xfe, 0x00, 0x27, 0xb1,
        0x65, 0x32, 0x75, 0x0a, 0x71, 0x00, 0xb7, 0x31, 0x08, 0xe4,
        0x18, 0x64, 0x1e, 0x04, 0x57, 0x3b, 0xbb, 0x0a, 0x17, 0x8a,
        0x27, 0x3a, 0x73, 0x0a, 0x7b, 0x0a, 0xd7, 0x0a, 0xe7, 0x3a,
        0x3b, 0x8a, 0x97, 0x0a, 0xfe, 0x08, 0x24, 0x8a, 0x2e, 0x00,
        0x3e, 0x40, 0x38, 0x64, 0x6f, 0x00, 0x9f, 0x00, 0xbe, 0x43,
        0xc8, 0x0a, 0xc9, 0x63, 0xce, 0x07, 0xfe, 0x07, 0x2e, 0x81,
        0x66, 0x42, 0x6a, 0x42, 0x79, 0x0a, 0xbe, 0x00, 0xc8, 0x64,
        0xf8, 0x64, 0x08, 0xe4, 0x2e, 0x07, 0x7e, 0x03, 0x9e, 0x07,
        0xbe, 0x03, 0xde, 0x07, 0xfe, 0x0a, 0x03, 0xa5, 0x0d, 0x44,
        0xcd, 0x43, 0xce, 0x09, 0xdd, 0x42, 0xde, 0x0b, 0xfe, 0x02,
        0x5d, 0xc7,
        0xfd
    };
    writeData(L_CastleArea3, L_CastleArea3_data, sizeof(L_CastleArea3_data));

    // L_CastleArea4
    //
    const uint8_t L_CastleArea4_data[] = {
        0x9b, 0x07,
        0x05, 0x32, 0x06, 0x33, 0x07, 0x34, 0xfe, 0x06, 0x0c, 0x81,
        0x39, 0x0a, 0x5c, 0x01, 0x89, 0x0a, 0xac, 0x01, 0xd9, 0x0a,
        0xfc, 0x01, 0x2e, 0x83, 0xa7, 0x01, 0xb7, 0x00, 0xc7, 0x01,
        0xde, 0x0a, 0xfe, 0x02, 0x4e, 0x83, 0x5a, 0x32, 0x63, 0x0a,
        0x69, 0x0a, 0x7e, 0x02, 0xee, 0x03, 0xfa, 0x32, 0x03, 0x8a,
        0x09, 0x0a, 0x1e, 0x02, 0xee, 0x03, 0xfa, 0x32, 0x03, 0x8a,
        0x09, 0x0a, 0x14, 0x42, 0x1e, 0x02, 0x7e, 0x0a, 0x9e, 0x07,
        0xfe, 0x0a, 0x2e, 0x86, 0x5e, 0x0a, 0x8e, 0x06, 0xbe, 0x0a,
        0xee, 0x07, 0x3e, 0x83, 0x5e, 0x07, 0xfe, 0x0a, 0x0d, 0xc4,
        0x41, 0x52, 0x51, 0x52, 0xcd, 0x43, 0xce, 0x09, 0xde, 0x0b,
        0xdd, 0x42, 0xfe, 0x02, 0x5d, 0xc7,
        0xfd
    };
    writeData(L_CastleArea4, L_CastleArea4_data, sizeof(L_CastleArea4_data));

    // L_CastleArea5
    //
    const uint8_t L_CastleArea5_data[] = {
        0x5b, 0x07,
        0x05, 0x32, 0x06, 0x33, 0x07, 0x34, 0xfe, 0x0a, 0xae, 0x86,
        0xbe, 0x07, 0xfe, 0x02, 0x0d, 0x02, 0x27, 0x32, 0x46, 0x61,
        0x55, 0x62, 0x5e, 0x0e, 0x1e, 0x82, 0x68, 0x3c, 0x74, 0x3a,
        0x7d, 0x4b, 0x5e, 0x8e, 0x7d, 0x4b, 0x7e, 0x82, 0x84, 0x62,
        0x94, 0x61, 0xa4, 0x31, 0xbd, 0x4b, 0xce, 0x06, 0xfe, 0x02,
        0x0d, 0x06, 0x34, 0x31, 0x3e, 0x0a, 0x64, 0x32, 0x75, 0x0a,
        0x7b, 0x61, 0xa4, 0x33, 0xae, 0x02, 0xde, 0x0e, 0x3e, 0x82,
        0x64, 0x32, 0x78, 0x32, 0xb4, 0x36, 0xc8, 0x36, 0xdd, 0x4b,
        0x44, 0xb2, 0x58, 0x32, 0x94, 0x63, 0xa4, 0x3e, 0xba, 0x30,
        0xc9, 0x61, 0xce, 0x06, 0xdd, 0x4b, 0xce, 0x86, 0xdd, 0x4b,
        0xfe, 0x02, 0x2e, 0x86, 0x5e, 0x02, 0x7e, 0x06, 0xfe, 0x02,
        0x1e, 0x86, 0x3e, 0x02, 0x5e, 0x06, 0x7e, 0x02, 0x9e, 0x06,
        0xfe, 0x0a, 0x0d, 0xc4, 0xcd, 0x43, 0xce, 0x09, 0xde, 0x0b,
        0xdd, 0x42, 0xfe, 0x02, 0x5d, 0xc7,
        0xfd
    };
    writeData(L_CastleArea5, L_CastleArea5_data, sizeof(L_CastleArea5_data));

    // L_CastleArea6
    //
    const uint8_t L_CastleArea6_data[] = {
        0x5b, 0x06,
        0x05, 0x32, 0x06, 0x33, 0x07, 0x34, 0x5e, 0x0a, 0xae, 0x02,
        0x0d, 0x01, 0x39, 0x73, 0x0d, 0x03, 0x39, 0x7b, 0x4d, 0x4b,
        0xde, 0x06, 0x1e, 0x8a, 0xae, 0x06, 0xc4, 0x33, 0x16, 0xfe,
        0xa5, 0x77, 0xfe, 0x02, 0xfe, 0x82, 0x0d, 0x07, 0x39, 0x73,
        0xa8, 0x74, 0xed, 0x4b, 0x49, 0xfb, 0xe8, 0x74, 0xfe, 0x0a,
        0x2e, 0x82, 0x67, 0x02, 0x84, 0x7a, 0x87, 0x31, 0x0d, 0x0b,
        0xfe, 0x02, 0x0d, 0x0c, 0x39, 0x73, 0x5e, 0x06, 0xc6, 0x76,
        0x45, 0xff, 0xbe, 0x0a, 0xdd, 0x48, 0xfe, 0x06, 0x3d, 0xcb,
        0x46, 0x7e, 0xad, 0x4a, 0xfe, 0x82, 0x39, 0xf3, 0xa9, 0x7b,
        0x4e, 0x8a, 0x9e, 0x07, 0xfe, 0x0a, 0x0d, 0xc4, 0xcd, 0x43,
        0xce, 0x09, 0xde, 0x0b, 0xdd, 0x42, 0xfe, 0x02, 0x5d, 0xc7,
        0xfd
    };
    writeData(L_CastleArea6, L_CastleArea6_data, sizeof(L_CastleArea6_data));

    // L_GroundArea1
    //
    const uint8_t L_GroundArea1_data[] = {
        0x94, 0x11,
        0x0f, 0x26, 0xfe, 0x10, 0x28, 0x94, 0x65, 0x15, 0xeb, 0x12,
        0xfa, 0x41, 0x4a, 0x96, 0x54, 0x40, 0xa4, 0x42, 0xb7, 0x13,
        0xe9, 0x19, 0xf5, 0x15, 0x11, 0x80, 0x47, 0x42, 0x71, 0x13,
        0x80, 0x41, 0x15, 0x92, 0x1b, 0x1f, 0x24, 0x40, 0x55, 0x12,
        0x64, 0x40, 0x95, 0x12, 0xa4, 0x40, 0xd2, 0x12, 0xe1, 0x40,
        0x13, 0xc0, 0x2c, 0x17, 0x2f, 0x12, 0x49, 0x13, 0x83, 0x40,
        0x9f, 0x14, 0xa3, 0x40, 0x17, 0x92, 0x83, 0x13, 0x92, 0x41,
        0xb9, 0x14, 0xc5, 0x12, 0xc8, 0x40, 0xd4, 0x40, 0x4b, 0x92,
        0x78, 0x1b, 0x9c, 0x94, 0x9f, 0x11, 0xdf, 0x14, 0xfe, 0x11,
        0x7d, 0xc1, 0x9e, 0x42, 0xcf, 0x20,
        0xfd
    };
    writeData(L_GroundArea1, L_GroundArea1_data, sizeof(L_GroundArea1_data));

    // L_GroundArea2
    //
    const uint8_t L_GroundArea2_data[] = {
        0x90, 0xb1,
        0x0f, 0x26, 0x29, 0x91, 0x7e, 0x42, 0xfe, 0x40, 0x28, 0x92,
        0x4e, 0x42, 0x2e, 0xc0, 0x57, 0x73, 0xc3, 0x25, 0xc7, 0x27,
        0x23, 0x84, 0x33, 0x20, 0x5c, 0x01, 0x77, 0x63, 0x88, 0x62,
        0x99, 0x61, 0xaa, 0x60, 0xbc, 0x01, 0xee, 0x42, 0x4e, 0xc0,
        0x69, 0x11, 0x7e, 0x42, 0xde, 0x40, 0xf8, 0x62, 0x0e, 0xc2,
        0xae, 0x40, 0xd7, 0x63, 0xe7, 0x63, 0x33, 0xa7, 0x37, 0x27,
        0x43, 0x04, 0xcc, 0x01, 0xe7, 0x73, 0x0c, 0x81, 0x3e, 0x42,
        0x0d, 0x0a, 0x5e, 0x40, 0x88, 0x72, 0xbe, 0x42, 0xe7, 0x87,
        0xfe, 0x40, 0x39, 0xe1, 0x4e, 0x00, 0x69, 0x60, 0x87, 0x60,
        0xa5, 0x60, 0xc3, 0x31, 0xfe, 0x31, 0x6d, 0xc1, 0xbe, 0x42,
        0xef, 0x20,
        0xfd
    };
    writeData(L_GroundArea2, L_GroundArea2_data, sizeof(L_GroundArea2_data));

    // L_GroundArea3
    //
    const uint8_t L_GroundArea3_data[] = {
        0x52, 0x21,
        0x0f, 0x20, 0x6e, 0x40, 0x58, 0xf2, 0x93, 0x01, 0x97, 0x00,
        0x0c, 0x81, 0x97, 0x40, 0xa6, 0x41, 0xc7, 0x40, 0x0d, 0x04,
        0x03, 0x01, 0x07, 0x01, 0x23, 0x01, 0x27, 0x01, 0xec, 0x03,
        0xac, 0xf3, 0xc3, 0x03, 0x78, 0xe2, 0x94, 0x43, 0x47, 0xf3,
        0x74, 0x43, 0x47, 0xfb, 0x74, 0x43, 0x2c, 0xf1, 0x4c, 0x63,
        0x47, 0x00, 0x57, 0x21, 0x5c, 0x01, 0x7c, 0x72, 0x39, 0xf1,
        0xec, 0x02, 0x4c, 0x81, 0xd8, 0x62, 0xec, 0x01, 0x0d, 0x0d,
        0x0f, 0x38, 0xc7, 0x07, 0xed, 0x4a, 0x1d, 0xc1, 0x5f, 0x26,
        0xfd
    };
    writeData(L_GroundArea3, L_GroundArea3_data, sizeof(L_GroundArea3_data));

    // L_GroundArea4
    //
    const uint8_t L_GroundArea4_data[] = {
        0x54, 0x21,
        0x0f, 0x26, 0xa7, 0x22, 0x37, 0xfb, 0x73, 0x20, 0x83, 0x07,
        0x87, 0x02, 0x93, 0x20, 0xc7, 0x73, 0x04, 0xf1, 0x06, 0x31,
        0x39, 0x71, 0x59, 0x71, 0xe7, 0x73, 0x37, 0xa0, 0x47, 0x04,
        0x86, 0x7c, 0xe5, 0x71, 0xe7, 0x31, 0x33, 0xa4, 0x39, 0x71,
        0xa9, 0x71, 0xd3, 0x23, 0x08, 0xf2, 0x13, 0x05, 0x27, 0x02,
        0x49, 0x71, 0x75, 0x75, 0xe8, 0x72, 0x67, 0xf3, 0x99, 0x71,
        0xe7, 0x20, 0xf4, 0x72, 0xf7, 0x31, 0x17, 0xa0, 0x33, 0x20,
        0x39, 0x71, 0x73, 0x28, 0xbc, 0x05, 0x39, 0xf1, 0x79, 0x71,
        0xa6, 0x21, 0xc3, 0x06, 0xd3, 0x20, 0xdc, 0x00, 0xfc, 0x00,
        0x07, 0xa2, 0x13, 0x21, 0x5f, 0x32, 0x8c, 0x00, 0x98, 0x7a,
        0xc7, 0x63, 0xd9, 0x61, 0x03, 0xa2, 0x07, 0x22, 0x74, 0x72,
        0x77, 0x31, 0xe7, 0x73, 0x39, 0xf1, 0x58, 0x72, 0x77, 0x73,
        0xd8, 0x72, 0x7f, 0xb1, 0x97, 0x73, 0xb6, 0x64, 0xc5, 0x65,
        0xd4, 0x66, 0xe3, 0x67, 0xf3, 0x67, 0x8d, 0xc1, 0xcf, 0x26,
        0xfd
    };
    writeData(L_GroundArea4, L_GroundArea4_data, sizeof(L_GroundArea4_data));

    // L_GroundArea5
    //
    const uint8_t L_GroundArea5_data[] = {
        0x52, 0x31,
        0x0f, 0x20, 0x6e, 0x66, 0x07, 0x81, 0x36, 0x01, 0x66, 0x00,
        0xa7, 0x22, 0x08, 0xf2, 0x67, 0x7b, 0xdc, 0x02, 0x98, 0xf2,
        0xd7, 0x20, 0x39, 0xf1, 0x9f, 0x33, 0xdc, 0x27, 0xdc, 0x57,
        0x23, 0x83, 0x57, 0x63, 0x6c, 0x51, 0x87, 0x63, 0x99, 0x61,
        0xa3, 0x06, 0xb3, 0x21, 0x77, 0xf3, 0xf3, 0x21, 0xf7, 0x2a,
        0x13, 0x81, 0x23, 0x22, 0x53, 0x00, 0x63, 0x22, 0xe9, 0x0b,
        0x0c, 0x83, 0x13, 0x21, 0x16, 0x22, 0x33, 0x05, 0x8f, 0x35,
        0xec, 0x01, 0x63, 0xa0, 0x67, 0x20, 0x73, 0x01, 0x77, 0x01,
        0x83, 0x20, 0x87, 0x20, 0xb3, 0x20, 0xb7, 0x20, 0xc3, 0x01,
        0xc7, 0x00, 0xd3, 0x20, 0xd7, 0x20, 0x67, 0xa0, 0x77, 0x07,
        0x87, 0x22, 0xe8, 0x62, 0xf5, 0x65, 0x1c, 0x82, 0x7f, 0x38,
        0x8d, 0xc1, 0xcf, 0x26,
        0xfd
    };
    writeData(L_GroundArea5, L_GroundArea5_data, sizeof(L_GroundArea5_data));

    // L_GroundArea6
    //
    const uint8_t L_GroundArea6_data[] = {
        0x50, 0x21,
        0x07, 0x81, 0x47, 0x24, 0x57, 0x00, 0x63, 0x01, 0x77, 0x01,
        0xc9, 0x71, 0x68, 0xf2, 0xe7, 0x73, 0x97, 0xfb, 0x06, 0x83,
        0x5c, 0x01, 0xd7, 0x22, 0xe7, 0x00, 0x03, 0xa7, 0x6c, 0x02,
        0xb3, 0x22, 0xe3, 0x01, 0xe7, 0x07, 0x47, 0xa0, 0x57, 0x06,
        0xa7, 0x01, 0xd3, 0x00, 0xd7, 0x01, 0x07, 0x81, 0x67, 0x20,
        0x93, 0x22, 0x03, 0xa3, 0x1c, 0x61, 0x17, 0x21, 0x6f, 0x33,
        0xc7, 0x63, 0xd8, 0x62, 0xe9, 0x61, 0xfa, 0x60, 0x4f, 0xb3,
        0x87, 0x63, 0x9c, 0x01, 0xb7, 0x63, 0xc8, 0x62, 0xd9, 0x61,
        0xea, 0x60, 0x39, 0xf1, 0x87, 0x21, 0xa7, 0x01, 0xb7, 0x20,
        0x39, 0xf1, 0x5f, 0x38, 0x6d, 0xc1, 0xaf, 0x26,
        0xfd
    };
    writeData(L_GroundArea6, L_GroundArea6_data, sizeof(L_GroundArea6_data));

    // L_GroundArea7
    //
    const uint8_t L_GroundArea7_data[] = {
        0x90, 0x11,
        0x0f, 0x26, 0xfe, 0x10, 0x2a, 0x93, 0x87, 0x17, 0xa3, 0x14,
        0xb2, 0x42, 0x0a, 0x92, 0x19, 0x40, 0x36, 0x14, 0x50, 0x41,
        0x82, 0x16, 0x2b, 0x93, 0x24, 0x41, 0xbb, 0x14, 0xb8, 0x00,
        0xc2, 0x43, 0xc3, 0x13, 0x1b, 0x94, 0x67, 0x12, 0xc4, 0x15,
        0x53, 0xc1, 0xd2, 0x41, 0x12, 0xc1, 0x29, 0x13, 0x85, 0x17,
        0x1b, 0x92, 0x1a, 0x42, 0x47, 0x13, 0x83, 0x41, 0xa7, 0x13,
        0x0e, 0x91, 0xa7, 0x63, 0xb7, 0x63, 0xc5, 0x65, 0xd5, 0x65,
        0xdd, 0x4a, 0xe3, 0x67, 0xf3, 0x67, 0x8d, 0xc1, 0xae, 0x42,
        0xdf, 0x20,
        0xfd
    };
    writeData(L_GroundArea7, L_GroundArea7_data, sizeof(L_GroundArea7_data));

    // L_GroundArea8
    //
    const uint8_t L_GroundArea8_data[] = {
        0x90, 0x11,
        0x0f, 0x26, 0x6e, 0x10, 0x8b, 0x17, 0xaf, 0x32, 0xd8, 0x62,
        0xe8, 0x62, 0xfc, 0x3f, 0xad, 0xc8, 0xf8, 0x64, 0x0c, 0xbe,
        0x43, 0x43, 0xf8, 0x64, 0x0c, 0xbf, 0x73, 0x40, 0x84, 0x40,
        0x93, 0x40, 0xa4, 0x40, 0xb3, 0x40, 0xf8, 0x64, 0x48, 0xe4,
        0x5c, 0x39, 0x83, 0x40, 0x92, 0x41, 0xb3, 0x40, 0xf8, 0x64,
        0x48, 0xe4, 0x5c, 0x39, 0xf8, 0x64, 0x13, 0xc2, 0x37, 0x65,
        0x4c, 0x24, 0x63, 0x00, 0x97, 0x65, 0xc3, 0x42, 0x0b, 0x97,
        0xac, 0x32, 0xf8, 0x64, 0x0c, 0xbe, 0x53, 0x45, 0x9d, 0x48,
        0xf8, 0x64, 0x2a, 0xe2, 0x3c, 0x47, 0x56, 0x43, 0xba, 0x62,
        0xf8, 0x64, 0x0c, 0xb7, 0x88, 0x64, 0xbc, 0x31, 0xd4, 0x45,
        0xfc, 0x31, 0x3c, 0xb1, 0x78, 0x64, 0x8c, 0x38, 0x0b, 0x9c,
        0x1a, 0x33, 0x18, 0x61, 0x28, 0x61, 0x39, 0x60, 0x5d, 0x4a,
        0xee, 0x11, 0x0f, 0xb8, 0x1d, 0xc1, 0x3e, 0x42, 0x6f, 0x20,
        0xfd
    };
    writeData(L_GroundArea8, L_GroundArea8_data, sizeof(L_GroundArea8_data));

    // L_GroundArea9
    //
    const uint8_t L_GroundArea9_data[] = {
        0x52, 0x31,
        0x0f, 0x20, 0x6e, 0x40, 0xf7, 0x20, 0x07, 0x84, 0x17, 0x20,
        0x4f, 0x34, 0xc3, 0x03, 0xc7, 0x02, 0xd3, 0x22, 0x27, 0xe3,
        0x39, 0x61, 0xe7, 0x73, 0x5c, 0xe4, 0x57, 0x00, 0x6c, 0x73,
        0x47, 0xa0, 0x53, 0x06, 0x63, 0x22, 0xa7, 0x73, 0xfc, 0x73,
        0x13, 0xa1, 0x33, 0x05, 0x43, 0x21, 0x5c, 0x72, 0xc3, 0x23,
        0xcc, 0x03, 0x77, 0xfb, 0xac, 0x02, 0x39, 0xf1, 0xa7, 0x73,
        0xd3, 0x04, 0xe8, 0x72, 0xe3, 0x22, 0x26, 0xf4, 0xbc, 0x02,
        0x8c, 0x81, 0xa8, 0x62, 0x17, 0x87, 0x43, 0x24, 0xa7, 0x01,
        0xc3, 0x04, 0x08, 0xf2, 0x97, 0x21, 0xa3, 0x02, 0xc9, 0x0b,
        0xe1, 0x69, 0xf1, 0x69, 0x8d, 0xc1, 0xcf, 0x26,
        0xfd
    };
    writeData(L_GroundArea9, L_GroundArea9_data, sizeof(L_GroundArea9_data));

    // L_GroundArea10
    //
    const uint8_t L_GroundArea10_data[] = {
        0x38, 0x11,
        0x0f, 0x26, 0xad, 0x40, 0x3d, 0xc7,
        0xfd
    };
    writeData(L_GroundArea10, L_GroundArea10_data, sizeof(L_GroundArea10_data));

    // L_GroundArea11
    //
    const uint8_t L_GroundArea11_data[] = {
        0x95, 0xb1,
        0x0f, 0x26, 0x0d, 0x02, 0xc8, 0x72, 0x1c, 0x81, 0x38, 0x72,
        0x0d, 0x05, 0x97, 0x34, 0x98, 0x62, 0xa3, 0x20, 0xb3, 0x06,
        0xc3, 0x20, 0xcc, 0x03, 0xf9, 0x91, 0x2c, 0x81, 0x48, 0x62,
        0x0d, 0x09, 0x37, 0x63, 0x47, 0x03, 0x57, 0x21, 0x8c, 0x02,
        0xc5, 0x79, 0xc7, 0x31, 0xf9, 0x11, 0x39, 0xf1, 0xa9, 0x11,
        0x6f, 0xb4, 0xd3, 0x65, 0xe3, 0x65, 0x7d, 0xc1, 0xbf, 0x26,
        0xfd
    };
    writeData(L_GroundArea11, L_GroundArea11_data, sizeof(L_GroundArea11_data));

    // L_GroundArea12
    //
    const uint8_t L_GroundArea12_data[] = {
        0x00, 0xc1,
        0x4c, 0x00, 0xf4, 0x4f, 0x0d, 0x02, 0x02, 0x42, 0x43, 0x4f,
        0x52, 0xc2, 0xde, 0x00, 0x5a, 0xc2, 0x4d, 0xc7,
        0xfd
    };
    writeData(L_GroundArea12, L_GroundArea12_data, sizeof(L_GroundArea12_data));

    // L_GroundArea13
    //
    const uint8_t L_GroundArea13_data[] = {
        0x90, 0x51,
        0x0f, 0x26, 0xee, 0x10, 0x0b, 0x94, 0x33, 0x14, 0x42, 0x42,
        0x77, 0x16, 0x86, 0x44, 0x02, 0x92, 0x4a, 0x16, 0x69, 0x42,
        0x73, 0x14, 0xb0, 0x00, 0xc7, 0x12, 0x05, 0xc0, 0x1c, 0x17,
        0x1f, 0x11, 0x36, 0x12, 0x8f, 0x14, 0x91, 0x40, 0x1b, 0x94,
        0x35, 0x12, 0x34, 0x42, 0x60, 0x42, 0x61, 0x12, 0x87, 0x12,
        0x96, 0x40, 0xa3, 0x14, 0x1c, 0x98, 0x1f, 0x11, 0x47, 0x12,
        0x9f, 0x15, 0xcc, 0x15, 0xcf, 0x11, 0x05, 0xc0, 0x1f, 0x15,
        0x39, 0x12, 0x7c, 0x16, 0x7f, 0x11, 0x82, 0x40, 0x98, 0x12,
        0xdf, 0x15, 0x16, 0xc4, 0x17, 0x14, 0x54, 0x12, 0x9b, 0x16,
        0x28, 0x94, 0xce, 0x01, 0x3d, 0xc1, 0x5e, 0x42, 0x8f, 0x20,
        0xfd
    };
    writeData(L_GroundArea13, L_GroundArea13_data, sizeof(L_GroundArea13_data));

    // L_GroundArea14
    //
    const uint8_t L_GroundArea14_data[] = {
        0x97, 0x11,
        0x0f, 0x26, 0xfe, 0x10, 0x2b, 0x92, 0x57, 0x12, 0x8b, 0x12,
        0xc0, 0x41, 0xf7, 0x13, 0x5b, 0x92, 0x69, 0x0b, 0xbb, 0x12,
        0xb2, 0x46, 0x19, 0x93, 0x71, 0x00, 0x17, 0x94, 0x7c, 0x14,
        0x7f, 0x11, 0x93, 0x41, 0xbf, 0x15, 0xfc, 0x13, 0xff, 0x11,
        0x2f, 0x95, 0x50, 0x42, 0x51, 0x12, 0x58, 0x14, 0xa6, 0x12,
        0xdb, 0x12, 0x1b, 0x93, 0x46, 0x43, 0x7b, 0x12, 0x8d, 0x49,
        0xb7, 0x14, 0x1b, 0x94, 0x49, 0x0b, 0xbb, 0x12, 0xfc, 0x13,
        0xff, 0x12, 0x03, 0xc1, 0x2f, 0x15, 0x43, 0x12, 0x4b, 0x13,
        0x77, 0x13, 0x9d, 0x4a, 0x15, 0xc1, 0xa1, 0x41, 0xc3, 0x12,
        0xfe, 0x01, 0x7d, 0xc1, 0x9e, 0x42, 0xcf, 0x20,
        0xfd
    };
    writeData(L_GroundArea14, L_GroundArea14_data, sizeof(L_GroundArea14_data));

    // L_GroundArea15
    //
    const uint8_t L_GroundArea15_data[] = {
        0x52, 0x21,
        0x0f, 0x20, 0x6e, 0x44, 0x0c, 0xf1, 0x4c, 0x01, 0xaa, 0x35,
        0xd9, 0x34, 0xee, 0x20, 0x08, 0xb3, 0x37, 0x32, 0x43, 0x04,
        0x4e, 0x21, 0x53, 0x20, 0x7c, 0x01, 0x97, 0x21, 0xb7, 0x07,
        0x9c, 0x81, 0xe7, 0x42, 0x5f, 0xb3, 0x97, 0x63, 0xac, 0x02,
        0xc5, 0x41, 0x49, 0xe0, 0x58, 0x61, 0x76, 0x64, 0x85, 0x65,
        0x94, 0x66, 0xa4, 0x22, 0xa6, 0x03, 0xc8, 0x22, 0xdc, 0x02,
        0x68, 0xf2, 0x96, 0x42, 0x13, 0x82, 0x17, 0x02, 0xaf, 0x34,
        0xf6, 0x21, 0xfc, 0x06, 0x26, 0x80, 0x2a, 0x24, 0x36, 0x01,
        0x8c, 0x00, 0xff, 0x35, 0x4e, 0xa0, 0x55, 0x21, 0x77, 0x20,
        0x87, 0x07, 0x89, 0x22, 0xae, 0x21, 0x4c, 0x82, 0x9f, 0x34,
        0xec, 0x01, 0x03, 0xe7, 0x13, 0x67, 0x8d, 0x4a, 0xad, 0x41,
        0x0f, 0xa6,
        0xfd
    };
    writeData(L_GroundArea15, L_GroundArea15_data, sizeof(L_GroundArea15_data));

    // L_GroundArea16
    //
    const uint8_t L_GroundArea16_data[] = {
        0x10, 0x51,
        0x4c, 0x00, 0xc7, 0x12, 0xc6, 0x42, 0x03, 0x92, 0x02, 0x42,
        0x29, 0x12, 0x63, 0x12, 0x62, 0x42, 0x69, 0x14, 0xa5, 0x12,
        0xa4, 0x42, 0xe2, 0x14, 0xe1, 0x44, 0xf8, 0x16, 0x37, 0xc1,
        0x8f, 0x38, 0x02, 0xbb, 0x28, 0x7a, 0x68, 0x7a, 0xa8, 0x7a,
        0xe0, 0x6a, 0xf0, 0x6a, 0x6d, 0xc5,
        0xfd
    };
    writeData(L_GroundArea16, L_GroundArea16_data, sizeof(L_GroundArea16_data));

    // L_GroundArea17
    //
    const uint8_t L_GroundArea17_data[] = {
        0x92, 0x31,
        0x0f, 0x20, 0x6e, 0x40, 0x0d, 0x02, 0x37, 0x73, 0xec, 0x00,
        0x0c, 0x80, 0x3c, 0x00, 0x6c, 0x00, 0x9c, 0x00, 0x06, 0xc0,
        0xc7, 0x73, 0x06, 0x83, 0x28, 0x72, 0x96, 0x40, 0xe7, 0x73,
        0x26, 0xc0, 0x87, 0x7b, 0xd2, 0x41, 0x39, 0xf1, 0xc8, 0xf2,
        0x97, 0xe3, 0xa3, 0x23, 0xe7, 0x02, 0xe3, 0x07, 0xf3, 0x22,
        0x37, 0xe3, 0x9c, 0x00, 0xbc, 0x00, 0xec, 0x00, 0x0c, 0x80,
        0x3c, 0x00, 0x86, 0x21, 0xa6, 0x06, 0xb6, 0x24, 0x5c, 0x80,
        0x7c, 0x00, 0x9c, 0x00, 0x29, 0xe1, 0xdc, 0x05, 0xf6, 0x41,
        0xdc, 0x80, 0xe8, 0x72, 0x0c, 0x81, 0x27, 0x73, 0x4c, 0x01,
        0x66, 0x74, 0x0d, 0x11, 0x3f, 0x35, 0xb6, 0x41, 0x2c, 0x82,
        0x36, 0x40, 0x7c, 0x02, 0x86, 0x40, 0xf9, 0x61, 0x39, 0xe1,
        0xac, 0x04, 0xc6, 0x41, 0x0c, 0x83, 0x16, 0x41, 0x88, 0xf2,
        0x39, 0xf1, 0x7c, 0x00, 0x89, 0x61, 0x9c, 0x00, 0xa7, 0x63,
        0xbc, 0x00, 0xc5, 0x65, 0xdc, 0x00, 0xe3, 0x67, 0xf3, 0x67,
        0x8d, 0xc1, 0xcf, 0x26,
        0xfd
    };
    writeData(L_GroundArea17, L_GroundArea17_data, sizeof(L_GroundArea17_data));

    // L_GroundArea18
    //
    const uint8_t L_GroundArea18_data[] = {
        0x55, 0xb1,
        0x0f, 0x26, 0xcf, 0x33, 0x07, 0xb2, 0x15, 0x11, 0x52, 0x42,
        0x99, 0x0b, 0xac, 0x02, 0xd3, 0x24, 0xd6, 0x42, 0xd7, 0x25,
        0x23, 0x84, 0xcf, 0x33, 0x07, 0xe3, 0x19, 0x61, 0x78, 0x7a,
        0xef, 0x33, 0x2c, 0x81, 0x46, 0x64, 0x55, 0x65, 0x65, 0x65,
        0xec, 0x74, 0x47, 0x82, 0x53, 0x05, 0x63, 0x21, 0x62, 0x41,
        0x96, 0x22, 0x9a, 0x41, 0xcc, 0x03, 0xb9, 0x91, 0x39, 0xf1,
        0x63, 0x26, 0x67, 0x27, 0xd3, 0x06, 0xfc, 0x01, 0x18, 0xe2,
        0xd9, 0x07, 0xe9, 0x04, 0x0c, 0x86, 0x37, 0x22, 0x93, 0x24,
        0x87, 0x84, 0xac, 0x02, 0xc2, 0x41, 0xc3, 0x23, 0xd9, 0x71,
        0xfc, 0x01, 0x7f, 0xb1, 0x9c, 0x00, 0xa7, 0x63, 0xb6, 0x64,
        0xcc, 0x00, 0xd4, 0x66, 0xe3, 0x67, 0xf3, 0x67, 0x8d, 0xc1,
        0xcf, 0x26,
        0xfd
    };
    writeData(L_GroundArea18, L_GroundArea18_data, sizeof(L_GroundArea18_data));

    // L_GroundArea19
    //
    const uint8_t L_GroundArea19_data[] = {
        0x50, 0xb1,
        0x0f, 0x26, 0xfc, 0x00, 0x1f, 0xb3, 0x5c, 0x00, 0x65, 0x65,
        0x74, 0x66, 0x83, 0x67, 0x93, 0x67, 0xdc, 0x73, 0x4c, 0x80,
        0xb3, 0x20, 0xc9, 0x0b, 0xc3, 0x08, 0xd3, 0x2f, 0xdc, 0x00,
        0x2c, 0x80, 0x4c, 0x00, 0x8c, 0x00, 0xd3, 0x2e, 0xed, 0x4a,
        0xfc, 0x00, 0xd7, 0xa1, 0xec, 0x01, 0x4c, 0x80, 0x59, 0x11,
        0xd8, 0x11, 0xda, 0x10, 0x37, 0xa0, 0x47, 0x04, 0x99, 0x11,
        0xe7, 0x21, 0x3a, 0x90, 0x67, 0x20, 0x76, 0x10, 0x77, 0x60,
        0x87, 0x07, 0xd8, 0x12, 0x39, 0xf1, 0xac, 0x00, 0xe9, 0x71,
        0x0c, 0x80, 0x2c, 0x00, 0x4c, 0x05, 0xc7, 0x7b, 0x39, 0xf1,
        0xec, 0x00, 0xf9, 0x11, 0x0c, 0x82, 0x6f, 0x34, 0xf8, 0x11,
        0xfa, 0x10, 0x7f, 0xb2, 0xac, 0x00, 0xb6, 0x64, 0xcc, 0x01,
        0xe3, 0x67, 0xf3, 0x67, 0x8d, 0xc1, 0xcf, 0x26,
        0xfd
    };
    writeData(L_GroundArea19, L_GroundArea19_data, sizeof(L_GroundArea19_data));

    // L_GroundArea20
    //
    const uint8_t L_GroundArea20_data[] = {
        0x52, 0xb1,
        0x0f, 0x20, 0x6e, 0x45, 0x39, 0x91, 0xb3, 0x04, 0xc3, 0x21,
        0xc8, 0x11, 0xca, 0x10, 0x49, 0x91, 0x7c, 0x73, 0xe8, 0x12,
        0x88, 0x91, 0x8a, 0x10, 0xe7, 0x21, 0x05, 0x91, 0x07, 0x30,
        0x17, 0x07, 0x27, 0x20, 0x49, 0x11, 0x9c, 0x01, 0xc8, 0x72,
        0x23, 0xa6, 0x27, 0x26, 0xd3, 0x03, 0xd8, 0x7a, 0x89, 0x91,
        0xd8, 0x72, 0x39, 0xf1, 0xa9, 0x11, 0x09, 0xf1, 0x63, 0x24,
        0x67, 0x24, 0xd8, 0x62, 0x28, 0x91, 0x2a, 0x10, 0x56, 0x21,
        0x70, 0x04, 0x79, 0x0b, 0x8c, 0x00, 0x94, 0x21, 0x9f, 0x35,
        0x2f, 0xb8, 0x3d, 0xc1, 0x7f, 0x26,
        0xfd
    };
    writeData(L_GroundArea20, L_GroundArea20_data, sizeof(L_GroundArea20_data));

    // L_GroundArea21
    //
    const uint8_t L_GroundArea21_data[] = {
        0x06, 0xc1,
        0x4c, 0x00, 0xf4, 0x4f, 0x0d, 0x02, 0x06, 0x20, 0x24, 0x4f,
        0x35, 0xa0, 0x36, 0x20, 0x53, 0x46, 0xd5, 0x20, 0xd6, 0x20,
        0x34, 0xa1, 0x73, 0x49, 0x74, 0x20, 0x94, 0x20, 0xb4, 0x20,
        0xd4, 0x20, 0xf4, 0x20, 0x2e, 0x80, 0x59, 0x42, 0x4d, 0xc7,
        0xfd
    };
    writeData(L_GroundArea21, L_GroundArea21_data, sizeof(L_GroundArea21_data));

    // L_GroundArea22
    //
    const uint8_t L_GroundArea22_data[] = {
        0x96, 0x31,
        0x0f, 0x26, 0x0d, 0x03, 0x1a, 0x60, 0x77, 0x42, 0xc4, 0x00,
        0xc8, 0x62, 0xb9, 0xe1, 0xd3, 0x06, 0xd7, 0x07, 0xf9, 0x61,
        0x0c, 0x81, 0x4e, 0xb1, 0x8e, 0xb1, 0xbc, 0x01, 0xe4, 0x50,
        0xe9, 0x61, 0x0c, 0x81, 0x0d, 0x0a, 0x84, 0x43, 0x98, 0x72,
        0x0d, 0x0c, 0x0f, 0x38, 0x1d, 0xc1, 0x5f, 0x26,
        0xfd
    };
    writeData(L_GroundArea22, L_GroundArea22_data, sizeof(L_GroundArea22_data));

    // L_UndergroundArea1
    //
    const uint8_t L_UndergroundArea1_data[] = {
        0x48, 0x0f,
        0x0e, 0x01, 0x5e, 0x02, 0xa7, 0x00, 0xbc, 0x73, 0x1a, 0xe0,
        0x39, 0x61, 0x58, 0x62, 0x77, 0x63, 0x97, 0x63, 0xb8, 0x62,
        0xd6, 0x07, 0xf8, 0x62, 0x19, 0xe1, 0x75, 0x52, 0x86, 0x40,
        0x87, 0x50, 0x95, 0x52, 0x93, 0x43, 0xa5, 0x21, 0xc5, 0x52,
        0xd6, 0x40, 0xd7, 0x20, 0xe5, 0x06, 0xe6, 0x51, 0x3e, 0x8d,
        0x5e, 0x03, 0x67, 0x52, 0x77, 0x52, 0x7e, 0x02, 0x9e, 0x03,
        0xa6, 0x43, 0xa7, 0x23, 0xde, 0x05, 0xfe, 0x02, 0x1e, 0x83,
        0x33, 0x54, 0x46, 0x40, 0x47, 0x21, 0x56, 0x04, 0x5e, 0x02,
        0x83, 0x54, 0x93, 0x52, 0x96, 0x07, 0x97, 0x50, 0xbe, 0x03,
        0xc7, 0x23, 0xfe, 0x02, 0x0c, 0x82, 0x43, 0x45, 0x45, 0x24,
        0x46, 0x24, 0x90, 0x08, 0x95, 0x51, 0x78, 0xfa, 0xd7, 0x73,
        0x39, 0xf1, 0x8c, 0x01, 0xa8, 0x52, 0xb8, 0x52, 0xcc, 0x01,
        0x5f, 0xb3, 0x97, 0x63, 0x9e, 0x00, 0x0e, 0x81, 0x16, 0x24,
        0x66, 0x04, 0x8e, 0x00, 0xfe, 0x01, 0x08, 0xd2, 0x0e, 0x06,
        0x6f, 0x47, 0x9e, 0x0f, 0x0e, 0x82, 0x2d, 0x47, 0x28, 0x7a,
        0x68, 0x7a, 0xa8, 0x7a, 0xae, 0x01, 0xde, 0x0f, 0x6d, 0xc5,
        0xfd
    };
    writeData(L_UndergroundArea1, L_UndergroundArea1_data, sizeof(L_UndergroundArea1_data));

    // L_UndergroundArea2
    //
    const uint8_t L_UndergroundArea2_data[] = {
        0x48, 0x0f,
        0x0e, 0x01, 0x5e, 0x02, 0xbc, 0x01, 0xfc, 0x01, 0x2c, 0x82,
        0x41, 0x52, 0x4e, 0x04, 0x67, 0x25, 0x68, 0x24, 0x69, 0x24,
        0xba, 0x42, 0xc7, 0x04, 0xde, 0x0b, 0xb2, 0x87, 0xfe, 0x02,
        0x2c, 0xe1, 0x2c, 0x71, 0x67, 0x01, 0x77, 0x00, 0x87, 0x01,
        0x8e, 0x00, 0xee, 0x01, 0xf6, 0x02, 0x03, 0x85, 0x05, 0x02,
        0x13, 0x21, 0x16, 0x02, 0x27, 0x02, 0x2e, 0x02, 0x88, 0x72,
        0xc7, 0x20, 0xd7, 0x07, 0xe4, 0x76, 0x07, 0xa0, 0x17, 0x06,
        0x48, 0x7a, 0x76, 0x20, 0x98, 0x72, 0x79, 0xe1, 0x88, 0x62,
        0x9c, 0x01, 0xb7, 0x73, 0xdc, 0x01, 0xf8, 0x62, 0xfe, 0x01,
        0x08, 0xe2, 0x0e, 0x00, 0x6e, 0x02, 0x73, 0x20, 0x77, 0x23,
        0x83, 0x04, 0x93, 0x20, 0xae, 0x00, 0xfe, 0x0a, 0x0e, 0x82,
        0x39, 0x71, 0xa8, 0x72, 0xe7, 0x73, 0x0c, 0x81, 0x8f, 0x32,
        0xae, 0x00, 0xfe, 0x04, 0x04, 0xd1, 0x17, 0x04, 0x26, 0x49,
        0x27, 0x29, 0xdf, 0x33, 0xfe, 0x02, 0x44, 0xf6, 0x7c, 0x01,
        0x8e, 0x06, 0xbf, 0x47, 0xee, 0x0f, 0x4d, 0xc7, 0x0e, 0x82,
        0x68, 0x7a, 0xae, 0x01, 0xde, 0x0f, 0x6d, 0xc5,
        0xfd
    };
    writeData(L_UndergroundArea2, L_UndergroundArea2_data, sizeof(L_UndergroundArea2_data));

    // L_UndergroundArea3
    //
    const uint8_t L_UndergroundArea3_data[] = {
        0x48, 0x01,
        0x0e, 0x01, 0x00, 0x5a, 0x3e, 0x06, 0x45, 0x46, 0x47, 0x46,
        0x53, 0x44, 0xae, 0x01, 0xdf, 0x4a, 0x4d, 0xc7, 0x0e, 0x81,
        0x00, 0x5a, 0x2e, 0x04, 0x37, 0x28, 0x3a, 0x48, 0x46, 0x47,
        0xc7, 0x07, 0xce, 0x0f, 0xdf, 0x4a, 0x4d, 0xc7, 0x0e, 0x81,
        0x00, 0x5a, 0x33, 0x53, 0x43, 0x51, 0x46, 0x40, 0x47, 0x50,
        0x53, 0x04, 0x55, 0x40, 0x56, 0x50, 0x62, 0x43, 0x64, 0x40,
        0x65, 0x50, 0x71, 0x41, 0x73, 0x51, 0x83, 0x51, 0x94, 0x40,
        0x95, 0x50, 0xa3, 0x50, 0xa5, 0x40, 0xa6, 0x50, 0xb3, 0x51,
        0xb6, 0x40, 0xb7, 0x50, 0xc3, 0x53, 0xdf, 0x4a, 0x4d, 0xc7,
        0x0e, 0x81, 0x00, 0x5a, 0x2e, 0x02, 0x36, 0x47, 0x37, 0x52,
        0x3a, 0x49, 0x47, 0x25, 0xa7, 0x52, 0xd7, 0x04, 0xdf, 0x4a,
        0x4d, 0xc7, 0x0e, 0x81, 0x00, 0x5a, 0x3e, 0x02, 0x44, 0x51,
        0x53, 0x44, 0x54, 0x44, 0x55, 0x24, 0xa1, 0x54, 0xae, 0x01,
        0xb4, 0x21, 0xdf, 0x4a, 0xe5, 0x07, 0x4d, 0xc7,
        0xfd
    };
    writeData(L_UndergroundArea3, L_UndergroundArea3_data, sizeof(L_UndergroundArea3_data));

    // L_WaterArea1
    //
    const uint8_t L_WaterArea1_data[] = {
        0x41, 0x01,
        0xb4, 0x34, 0xc8, 0x52, 0xf2, 0x51, 0x47, 0xd3, 0x6c, 0x03,
        0x65, 0x49, 0x9e, 0x07, 0xbe, 0x01, 0xcc, 0x03, 0xfe, 0x07,
        0x0d, 0xc9, 0x1e, 0x01, 0x6c, 0x01, 0x62, 0x35, 0x63, 0x53,
        0x8a, 0x41, 0xac, 0x01, 0xb3, 0x53, 0xe9, 0x51, 0x26, 0xc3,
        0x27, 0x33, 0x63, 0x43, 0x64, 0x33, 0xba, 0x60, 0xc9, 0x61,
        0xce, 0x0b, 0xe5, 0x09, 0xee, 0x0f, 0x7d, 0xca, 0x7d, 0x47,
        0xfd
    };
    writeData(L_WaterArea1, L_WaterArea1_data, sizeof(L_WaterArea1_data));

    // L_WaterArea2
    //
    const uint8_t L_WaterArea2_data[] = {
        0x41, 0x01,
        0xb8, 0x52, 0xea, 0x41, 0x27, 0xb2, 0xb3, 0x42, 0x16, 0xd4,
        0x4a, 0x42, 0xa5, 0x51, 0xa7, 0x31, 0x27, 0xd3, 0x08, 0xe2,
        0x16, 0x64, 0x2c, 0x04, 0x38, 0x42, 0x76, 0x64, 0x88, 0x62,
        0xde, 0x07, 0xfe, 0x01, 0x0d, 0xc9, 0x23, 0x32, 0x31, 0x51,
        0x98, 0x52, 0x0d, 0xc9, 0x59, 0x42, 0x63, 0x53, 0x67, 0x31,
        0x14, 0xc2, 0x36, 0x31, 0x87, 0x53, 0x17, 0xe3, 0x29, 0x61,
        0x30, 0x62, 0x3c, 0x08, 0x42, 0x37, 0x59, 0x40, 0x6a, 0x42,
        0x99, 0x40, 0xc9, 0x61, 0xd7, 0x63, 0x39, 0xd1, 0x58, 0x52,
        0xc3, 0x67, 0xd3, 0x31, 0xdc, 0x06, 0xf7, 0x42, 0xfa, 0x42,
        0x23, 0xb1, 0x43, 0x67, 0xc3, 0x34, 0xc7, 0x34, 0xd1, 0x51,
        0x43, 0xb3, 0x47, 0x33, 0x9a, 0x30, 0xa9, 0x61, 0xb8, 0x62,
        0xbe, 0x0b, 0xd5, 0x09, 0xde, 0x0f, 0x0d, 0xca, 0x7d, 0x47,
        0xfd
    };
    writeData(L_WaterArea2, L_WaterArea2_data, sizeof(L_WaterArea2_data));

    // L_WaterArea3
    //
    const uint8_t L_WaterArea3_data[] = {
        0x49, 0x0f,
        0x1e, 0x01, 0x39, 0x73, 0x5e, 0x07, 0xae, 0x0b, 0x1e, 0x82,
        0x6e, 0x88, 0x9e, 0x02, 0x0d, 0x04, 0x2e, 0x0b, 0x45, 0x09,
        0x4e, 0x0f, 0xed, 0x47,
        0xfd,
        0xff
    };
    writeData(L_WaterArea3, L_WaterArea3_data, sizeof(L_WaterArea3_data));

    // X_SubtracterData
    //
    const uint8_t X_SubtracterData_data[] = {
        0x00, 0x10
    };
    writeData(X_SubtracterData, X_SubtracterData_data, sizeof(X_SubtracterData_data));

    // OffscrJoypadBitsData
    //
    const uint8_t OffscrJoypadBitsData_data[] = {
        0x01, 0x02
    };
    writeData(OffscrJoypadBitsData, OffscrJoypadBitsData_data, sizeof(OffscrJoypadBitsData_data));

    // Hidden1UpCoinAmts
    //
    const uint8_t Hidden1UpCoinAmts_data[] = {
        0x15, 0x23, 0x16, 0x1b, 0x17, 0x18, 0x23, 0x63
    };
    writeData(Hidden1UpCoinAmts, Hidden1UpCoinAmts_data, sizeof(Hidden1UpCoinAmts_data));

    // ClimbAdderLow
    //
    const uint8_t ClimbAdderLow_data[] = {
        0x0e, 0x04, 0xfc, 0xf2
    };
    writeData(ClimbAdderLow, ClimbAdderLow_data, sizeof(ClimbAdderLow_data));

    // ClimbAdderHigh
    //
    const uint8_t ClimbAdderHigh_data[] = {
        0x00, 0x00, 0xff, 0xff
    };
    writeData(ClimbAdderHigh, ClimbAdderHigh_data, sizeof(ClimbAdderHigh_data));

    // JumpMForceData
    //
    const uint8_t JumpMForceData_data[] = {
        0x20, 0x20, 0x1e, 0x28, 0x28, 0x0d, 0x04
    };
    writeData(JumpMForceData, JumpMForceData_data, sizeof(JumpMForceData_data));

    // FallMForceData
    //
    const uint8_t FallMForceData_data[] = {
        0x70, 0x70, 0x60, 0x90, 0x90, 0x0a, 0x09
    };
    writeData(FallMForceData, FallMForceData_data, sizeof(FallMForceData_data));

    // PlayerYSpdData
    //
    const uint8_t PlayerYSpdData_data[] = {
        0xfc, 0xfc, 0xfc, 0xfb, 0xfb, 0xfe, 0xff
    };
    writeData(PlayerYSpdData, PlayerYSpdData_data, sizeof(PlayerYSpdData_data));

    // InitMForceData
    //
    const uint8_t InitMForceData_data[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00
    };
    writeData(InitMForceData, InitMForceData_data, sizeof(InitMForceData_data));

    // MaxLeftXSpdData
    //
    const uint8_t MaxLeftXSpdData_data[] = {
        0xd8, 0xe8, 0xf0
    };
    writeData(MaxLeftXSpdData, MaxLeftXSpdData_data, sizeof(MaxLeftXSpdData_data));

    // MaxRightXSpdData
    //
    const uint8_t MaxRightXSpdData_data[] = {
        0x28, 0x18, 0x10,
        0x0c // used for pipe intros
    };
    writeData(MaxRightXSpdData, MaxRightXSpdData_data, sizeof(MaxRightXSpdData_data));

    // FrictionData
    //
    const uint8_t FrictionData_data[] = {
        0xe4, 0x98, 0xd0
    };
    writeData(FrictionData, FrictionData_data, sizeof(FrictionData_data));

    // Climb_Y_SpeedData
    //
    const uint8_t Climb_Y_SpeedData_data[] = {
        0x00, 0xff, 0x01
    };
    writeData(Climb_Y_SpeedData, Climb_Y_SpeedData_data, sizeof(Climb_Y_SpeedData_data));

    // Climb_Y_MForceData
    //
    const uint8_t Climb_Y_MForceData_data[] = {
        0x00, 0x20, 0xff
    };
    writeData(Climb_Y_MForceData, Climb_Y_MForceData_data, sizeof(Climb_Y_MForceData_data));

    // PlayerAnimTmrData
    //
    const uint8_t PlayerAnimTmrData_data[] = {
        0x02, 0x04, 0x07
    };
    writeData(PlayerAnimTmrData, PlayerAnimTmrData_data, sizeof(PlayerAnimTmrData_data));

    // FireballXSpdData
    //
    const uint8_t FireballXSpdData_data[] = {
        0x40, 0xc0
    };
    writeData(FireballXSpdData, FireballXSpdData_data, sizeof(FireballXSpdData_data));

    // Bubble_MForceData
    //
    const uint8_t Bubble_MForceData_data[] = {
        0xff, 0x50
    };
    writeData(Bubble_MForceData, Bubble_MForceData_data, sizeof(Bubble_MForceData_data));

    // BubbleTimerData
    //
    const uint8_t BubbleTimerData_data[] = {
        0x40, 0x20
    };
    writeData(BubbleTimerData, BubbleTimerData_data, sizeof(BubbleTimerData_data));

    // FlagpoleScoreMods
    //
    const uint8_t FlagpoleScoreMods_data[] = {
        0x05, 0x02, 0x08, 0x04, 0x01
    };
    writeData(FlagpoleScoreMods, FlagpoleScoreMods_data, sizeof(FlagpoleScoreMods_data));

    // FlagpoleScoreDigits
    //
    const uint8_t FlagpoleScoreDigits_data[] = {
        0x03, 0x03, 0x04, 0x04, 0x04
    };
    writeData(FlagpoleScoreDigits, FlagpoleScoreDigits_data, sizeof(FlagpoleScoreDigits_data));

    // Jumpspring_Y_PosData
    //
    const uint8_t Jumpspring_Y_PosData_data[] = {
        0x08, 0x10, 0x08, 0x00
    };
    writeData(Jumpspring_Y_PosData, Jumpspring_Y_PosData_data, sizeof(Jumpspring_Y_PosData_data));

    // VineHeightData
    //
    const uint8_t VineHeightData_data[] = {
        0x30, 0x60
    };
    writeData(VineHeightData, VineHeightData_data, sizeof(VineHeightData_data));

    // CannonBitmasks
    //
    const uint8_t CannonBitmasks_data[] = {
        0b00001111, 0b00000111
    };
    writeData(CannonBitmasks, CannonBitmasks_data, sizeof(CannonBitmasks_data));

    // BulletBillXSpdData
    //
    const uint8_t BulletBillXSpdData_data[] = {
        0x18, 0xe8
    };
    writeData(BulletBillXSpdData, BulletBillXSpdData_data, sizeof(BulletBillXSpdData_data));

    // HammerEnemyOfsData
    //
    const uint8_t HammerEnemyOfsData_data[] = {
        0x04, 0x04, 0x04, 0x05, 0x05, 0x05,
        0x06, 0x06, 0x06
    };
    writeData(HammerEnemyOfsData, HammerEnemyOfsData_data, sizeof(HammerEnemyOfsData_data));

    // HammerXSpdData
    //
    const uint8_t HammerXSpdData_data[] = {
        0x10, 0xf0
    };
    writeData(HammerXSpdData, HammerXSpdData_data, sizeof(HammerXSpdData_data));

    // CoinTallyOffsets
    //
    const uint8_t CoinTallyOffsets_data[] = {
        0x17, 0x1d
    };
    writeData(CoinTallyOffsets, CoinTallyOffsets_data, sizeof(CoinTallyOffsets_data));

    // ScoreOffsets
    //
    const uint8_t ScoreOffsets_data[] = {
        0x0b, 0x11
    };
    writeData(ScoreOffsets, ScoreOffsets_data, sizeof(ScoreOffsets_data));

    // StatusBarNybbles
    //
    const uint8_t StatusBarNybbles_data[] = {
        0x02, 0x13
    };
    writeData(StatusBarNybbles, StatusBarNybbles_data, sizeof(StatusBarNybbles_data));

    // BlockYPosAdderData
    //
    const uint8_t BlockYPosAdderData_data[] = {
        0x04, 0x12
    };
    writeData(BlockYPosAdderData, BlockYPosAdderData_data, sizeof(BlockYPosAdderData_data));

    // BrickQBlockMetatiles
    //
    const uint8_t BrickQBlockMetatiles_data[] = {
        0xc1, 0xc0, 0x5f, 0x60, // used by question blocks
        0x55, 0x56, 0x57, 0x58, 0x59, // used by ground level types
        0x5a, 0x5b, 0x5c, 0x5d, 0x5e // used by other level types
    };
    writeData(BrickQBlockMetatiles, BrickQBlockMetatiles_data, sizeof(BrickQBlockMetatiles_data));

    // MaxSpdBlockData
    //
    const uint8_t MaxSpdBlockData_data[] = {
        0x06, 0x08
    };
    writeData(MaxSpdBlockData, MaxSpdBlockData_data, sizeof(MaxSpdBlockData_data));

    // LoopCmdWorldNumber
    //
    const uint8_t LoopCmdWorldNumber_data[] = {
        0x03, 0x03, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07
    };
    writeData(LoopCmdWorldNumber, LoopCmdWorldNumber_data, sizeof(LoopCmdWorldNumber_data));

    // LoopCmdPageNumber
    //
    const uint8_t LoopCmdPageNumber_data[] = {
        0x05, 0x09, 0x04, 0x05, 0x06, 0x08, 0x09, 0x0a, 0x06, 0x0b, 0x10
    };
    writeData(LoopCmdPageNumber, LoopCmdPageNumber_data, sizeof(LoopCmdPageNumber_data));

    // LoopCmdYPosition
    //
    const uint8_t LoopCmdYPosition_data[] = {
        0x40, 0xb0, 0xb0, 0x80, 0x40, 0x40, 0x80, 0x40, 0xf0, 0xf0, 0xf0
    };
    writeData(LoopCmdYPosition, LoopCmdYPosition_data, sizeof(LoopCmdYPosition_data));

    // NormalXSpdData
    //
    const uint8_t NormalXSpdData_data[] = {
        0xf8, 0xf4
    };
    writeData(NormalXSpdData, NormalXSpdData_data, sizeof(NormalXSpdData_data));

    // HBroWalkingTimerData
    //
    const uint8_t HBroWalkingTimerData_data[] = {
        0x80, 0x50
    };
    writeData(HBroWalkingTimerData, HBroWalkingTimerData_data, sizeof(HBroWalkingTimerData_data));

    // PRDiffAdjustData
    //
    const uint8_t PRDiffAdjustData_data[] = {
        0x26, 0x2c, 0x32, 0x38,
        0x20, 0x22, 0x24, 0x26,
        0x13, 0x14, 0x15, 0x16
    };
    writeData(PRDiffAdjustData, PRDiffAdjustData_data, sizeof(PRDiffAdjustData_data));

    // FirebarSpinSpdData
    //
    const uint8_t FirebarSpinSpdData_data[] = {
        0x28, 0x38, 0x28, 0x38, 0x28
    };
    writeData(FirebarSpinSpdData, FirebarSpinSpdData_data, sizeof(FirebarSpinSpdData_data));

    // FirebarSpinDirData
    //
    const uint8_t FirebarSpinDirData_data[] = {
        0x00, 0x00, 0x10, 0x10, 0x00
    };
    writeData(FirebarSpinDirData, FirebarSpinDirData_data, sizeof(FirebarSpinDirData_data));

    // FlyCCXPositionData
    //
    const uint8_t FlyCCXPositionData_data[] = {
        0x80, 0x30, 0x40, 0x80,
        0x30, 0x50, 0x50, 0x70,
        0x20, 0x40, 0x80, 0xa0,
        0x70, 0x40, 0x90, 0x68
    };
    writeData(FlyCCXPositionData, FlyCCXPositionData_data, sizeof(FlyCCXPositionData_data));

    // FlyCCXSpeedData
    //
    const uint8_t FlyCCXSpeedData_data[] = {
        0x0e, 0x05, 0x06, 0x0e,
        0x1c, 0x20, 0x10, 0x0c,
        0x1e, 0x22, 0x18, 0x14
    };
    writeData(FlyCCXSpeedData, FlyCCXSpeedData_data, sizeof(FlyCCXSpeedData_data));

    // FlyCCTimerData
    //
    const uint8_t FlyCCTimerData_data[] = {
        0x10, 0x60, 0x20, 0x48
    };
    writeData(FlyCCTimerData, FlyCCTimerData_data, sizeof(FlyCCTimerData_data));

    // FlameYPosData
    //
    const uint8_t FlameYPosData_data[] = {
        0x90, 0x80, 0x70, 0x90
    };
    writeData(FlameYPosData, FlameYPosData_data, sizeof(FlameYPosData_data));

    // FlameYMFAdderData
    //
    const uint8_t FlameYMFAdderData_data[] = {
        0xff, 0x01
    };
    writeData(FlameYMFAdderData, FlameYMFAdderData_data, sizeof(FlameYMFAdderData_data));

    // FireworksXPosData
    //
    const uint8_t FireworksXPosData_data[] = {
        0x00, 0x30, 0x60, 0x60, 0x00, 0x20
    };
    writeData(FireworksXPosData, FireworksXPosData_data, sizeof(FireworksXPosData_data));

    // FireworksYPosData
    //
    const uint8_t FireworksYPosData_data[] = {
        0x60, 0x40, 0x70, 0x40, 0x60, 0x30
    };
    writeData(FireworksYPosData, FireworksYPosData_data, sizeof(FireworksYPosData_data));

    // Bitmasks
    //
    const uint8_t Bitmasks_data[] = {
        0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000
    };
    writeData(Bitmasks, Bitmasks_data, sizeof(Bitmasks_data));

    // Enemy17YPosData
    //
    const uint8_t Enemy17YPosData_data[] = {
        0x40, 0x30, 0x90, 0x50, 0x20, 0x60, 0xa0, 0x70
    };
    writeData(Enemy17YPosData, Enemy17YPosData_data, sizeof(Enemy17YPosData_data));

    // SwimCC_IDData
    //
    const uint8_t SwimCC_IDData_data[] = {
        0x0a, 0x0b
    };
    writeData(SwimCC_IDData, SwimCC_IDData_data, sizeof(SwimCC_IDData_data));

    // PlatPosDataLow
    //
    const uint8_t PlatPosDataLow_data[] = {
        0x08, 0x0c, 0xf8
    };
    writeData(PlatPosDataLow, PlatPosDataLow_data, sizeof(PlatPosDataLow_data));

    // PlatPosDataHigh
    //
    const uint8_t PlatPosDataHigh_data[] = {
        0x00, 0x00, 0xff
    };
    writeData(PlatPosDataHigh, PlatPosDataHigh_data, sizeof(PlatPosDataHigh_data));

    // HammerThrowTmrData
    //
    const uint8_t HammerThrowTmrData_data[] = {
        0x30, 0x1c
    };
    writeData(HammerThrowTmrData, HammerThrowTmrData_data, sizeof(HammerThrowTmrData_data));

    // XSpeedAdderData
    //
    const uint8_t XSpeedAdderData_data[] = {
        0x00, 0xe8, 0x00, 0x18
    };
    writeData(XSpeedAdderData, XSpeedAdderData_data, sizeof(XSpeedAdderData_data));

    // RevivedXSpeed
    //
    const uint8_t RevivedXSpeed_data[] = {
        0x08, 0xf8, 0x0c, 0xf4
    };
    writeData(RevivedXSpeed, RevivedXSpeed_data, sizeof(RevivedXSpeed_data));

    // HammerBroJumpLData
    //
    const uint8_t HammerBroJumpLData_data[] = {
        0x20, 0x37
    };
    writeData(HammerBroJumpLData, HammerBroJumpLData_data, sizeof(HammerBroJumpLData_data));

    // BlooberBitmasks
    //
    const uint8_t BlooberBitmasks_data[] = {
        0b00111111, 0b00000011
    };
    writeData(BlooberBitmasks, BlooberBitmasks_data, sizeof(BlooberBitmasks_data));

    // SwimCCXMoveData
    //
    const uint8_t SwimCCXMoveData_data[] = {
        0x40, 0x80,
        0x04, 0x04 // residual data, not used
    };
    writeData(SwimCCXMoveData, SwimCCXMoveData_data, sizeof(SwimCCXMoveData_data));

    // FirebarPosLookupTbl
    //
    const uint8_t FirebarPosLookupTbl_data[] = {
        0x00, 0x01, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x08,
        0x00, 0x03, 0x06, 0x09, 0x0b, 0x0d, 0x0e, 0x0f, 0x10,
        0x00, 0x04, 0x09, 0x0d, 0x10, 0x13, 0x16, 0x17, 0x18,
        0x00, 0x06, 0x0c, 0x12, 0x16, 0x1a, 0x1d, 0x1f, 0x20,
        0x00, 0x07, 0x0f, 0x16, 0x1c, 0x21, 0x25, 0x27, 0x28,
        0x00, 0x09, 0x12, 0x1b, 0x21, 0x27, 0x2c, 0x2f, 0x30,
        0x00, 0x0b, 0x15, 0x1f, 0x27, 0x2e, 0x33, 0x37, 0x38,
        0x00, 0x0c, 0x18, 0x24, 0x2d, 0x35, 0x3b, 0x3e, 0x40,
        0x00, 0x0e, 0x1b, 0x28, 0x32, 0x3b, 0x42, 0x46, 0x48,
        0x00, 0x0f, 0x1f, 0x2d, 0x38, 0x42, 0x4a, 0x4e, 0x50,
        0x00, 0x11, 0x22, 0x31, 0x3e, 0x49, 0x51, 0x56, 0x58
    };
    writeData(FirebarPosLookupTbl, FirebarPosLookupTbl_data, sizeof(FirebarPosLookupTbl_data));

    // FirebarMirrorData
    //
    const uint8_t FirebarMirrorData_data[] = {
        0x01, 0x03, 0x02, 0x00
    };
    writeData(FirebarMirrorData, FirebarMirrorData_data, sizeof(FirebarMirrorData_data));

    // FirebarTblOffsets
    //
    const uint8_t FirebarTblOffsets_data[] = {
        0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d,
        0x36, 0x3f, 0x48, 0x51, 0x5a, 0x63
    };
    writeData(FirebarTblOffsets, FirebarTblOffsets_data, sizeof(FirebarTblOffsets_data));

    // FirebarYPos
    //
    const uint8_t FirebarYPos_data[] = {
        0x0c, 0x18
    };
    writeData(FirebarYPos, FirebarYPos_data, sizeof(FirebarYPos_data));

    // PRandomSubtracter
    //
    const uint8_t PRandomSubtracter_data[] = {
        0xf8, 0xa0, 0x70, 0xbd, 0x00
    };
    writeData(PRandomSubtracter, PRandomSubtracter_data, sizeof(PRandomSubtracter_data));

    // FlyCCBPriority
    //
    const uint8_t FlyCCBPriority_data[] = {
        0x20, 0x20, 0x20, 0x00, 0x00
    };
    writeData(FlyCCBPriority, FlyCCBPriority_data, sizeof(FlyCCBPriority_data));

    // LakituDiffAdj
    //
    const uint8_t LakituDiffAdj_data[] = {
        0x15, 0x30, 0x40
    };
    writeData(LakituDiffAdj, LakituDiffAdj_data, sizeof(LakituDiffAdj_data));

    // BridgeCollapseData
    //
    const uint8_t BridgeCollapseData_data[] = {
        0x1a, // axe
        0x58, // chain
        0x98, 0x96, 0x94, 0x92, 0x90, 0x8e, 0x8c, // bridge
        0x8a, 0x88, 0x86, 0x84, 0x82, 0x80
    };
    writeData(BridgeCollapseData, BridgeCollapseData_data, sizeof(BridgeCollapseData_data));

    // PRandomRange
    //
    const uint8_t PRandomRange_data[] = {
        0x21, 0x41, 0x11, 0x31
    };
    writeData(PRandomRange, PRandomRange_data, sizeof(PRandomRange_data));

    // FlameTimerData
    //
    const uint8_t FlameTimerData_data[] = {
        0xbf, 0x40, 0xbf, 0xbf, 0xbf, 0x40, 0x40, 0xbf
    };
    writeData(FlameTimerData, FlameTimerData_data, sizeof(FlameTimerData_data));

    // StarFlagYPosAdder
    //
    const uint8_t StarFlagYPosAdder_data[] = {
        0x00, 0x00, 0x08, 0x08
    };
    writeData(StarFlagYPosAdder, StarFlagYPosAdder_data, sizeof(StarFlagYPosAdder_data));

    // StarFlagXPosAdder
    //
    const uint8_t StarFlagXPosAdder_data[] = {
        0x00, 0x08, 0x00, 0x08
    };
    writeData(StarFlagXPosAdder, StarFlagXPosAdder_data, sizeof(StarFlagXPosAdder_data));

    // StarFlagTileData
    //
    const uint8_t StarFlagTileData_data[] = {
        0x54, 0x55, 0x56, 0x57
    };
    writeData(StarFlagTileData, StarFlagTileData_data, sizeof(StarFlagTileData_data));

    // BowserIdentities
    //
    const uint8_t BowserIdentities_data[] = {
        Goomba, GreenKoopa, BuzzyBeetle, Spiny, Lakitu, Bloober, HammerBro, Bowser
    };
    writeData(BowserIdentities, BowserIdentities_data, sizeof(BowserIdentities_data));

    // ResidualXSpdData
    //
    const uint8_t ResidualXSpdData_data[] = {
        0x18, 0xe8
    };
    writeData(ResidualXSpdData, ResidualXSpdData_data, sizeof(ResidualXSpdData_data));

    // KickedShellXSpdData
    //
    const uint8_t KickedShellXSpdData_data[] = {
        0x30, 0xd0
    };
    writeData(KickedShellXSpdData, KickedShellXSpdData_data, sizeof(KickedShellXSpdData_data));

    // DemotedKoopaXSpdData
    //
    const uint8_t DemotedKoopaXSpdData_data[] = {
        0x08, 0xf8
    };
    writeData(DemotedKoopaXSpdData, DemotedKoopaXSpdData_data, sizeof(DemotedKoopaXSpdData_data));

    // KickedShellPtsData
    //
    const uint8_t KickedShellPtsData_data[] = {
        0x0a, 0x06, 0x04
    };
    writeData(KickedShellPtsData, KickedShellPtsData_data, sizeof(KickedShellPtsData_data));

    // StompedEnemyPtsData
    //
    const uint8_t StompedEnemyPtsData_data[] = {
        0x02, 0x06, 0x05, 0x06
    };
    writeData(StompedEnemyPtsData, StompedEnemyPtsData_data, sizeof(StompedEnemyPtsData_data));

    // RevivalRateData
    //
    const uint8_t RevivalRateData_data[] = {
        0x10, 0x0b
    };
    writeData(RevivalRateData, RevivalRateData_data, sizeof(RevivalRateData_data));

    // SetBitsMask
    //
    const uint8_t SetBitsMask_data[] = {
        0b10000000, 0b01000000, 0b00100000, 0b00010000, 0b00001000, 0b00000100, 0b00000010
    };
    writeData(SetBitsMask, SetBitsMask_data, sizeof(SetBitsMask_data));

    // ClearBitsMask
    //
    const uint8_t ClearBitsMask_data[] = {
        0b01111111, 0b10111111, 0b11011111, 0b11101111, 0b11110111, 0b11111011, 0b11111101
    };
    writeData(ClearBitsMask, ClearBitsMask_data, sizeof(ClearBitsMask_data));

    // PlayerPosSPlatData
    //
    const uint8_t PlayerPosSPlatData_data[] = {
        0x80, 0x00
    };
    writeData(PlayerPosSPlatData, PlayerPosSPlatData_data, sizeof(PlayerPosSPlatData_data));

    // PlayerBGUpperExtent
    //
    const uint8_t PlayerBGUpperExtent_data[] = {
        0x20, 0x10
    };
    writeData(PlayerBGUpperExtent, PlayerBGUpperExtent_data, sizeof(PlayerBGUpperExtent_data));

    // AreaChangeTimerData
    //
    const uint8_t AreaChangeTimerData_data[] = {
        0xa0, 0x34
    };
    writeData(AreaChangeTimerData, AreaChangeTimerData_data, sizeof(AreaChangeTimerData_data));

    // ClimbXPosAdder
    //
    const uint8_t ClimbXPosAdder_data[] = {
        0xf9, 0x07
    };
    writeData(ClimbXPosAdder, ClimbXPosAdder_data, sizeof(ClimbXPosAdder_data));

    // ClimbPLocAdder
    //
    const uint8_t ClimbPLocAdder_data[] = {
        0xff, 0x00
    };
    writeData(ClimbPLocAdder, ClimbPLocAdder_data, sizeof(ClimbPLocAdder_data));

    // FlagpoleYPosData
    //
    const uint8_t FlagpoleYPosData_data[] = {
        0x18, 0x22, 0x50, 0x68, 0x90
    };
    writeData(FlagpoleYPosData, FlagpoleYPosData_data, sizeof(FlagpoleYPosData_data));

    // SolidMTileUpperExt
    //
    const uint8_t SolidMTileUpperExt_data[] = {
        0x10, 0x61, 0x88, 0xc4
    };
    writeData(SolidMTileUpperExt, SolidMTileUpperExt_data, sizeof(SolidMTileUpperExt_data));

    // ClimbMTileUpperExt
    //
    const uint8_t ClimbMTileUpperExt_data[] = {
        0x24, 0x6d, 0x8a, 0xc6
    };
    writeData(ClimbMTileUpperExt, ClimbMTileUpperExt_data, sizeof(ClimbMTileUpperExt_data));

    // EnemyBGCStateData
    //
    const uint8_t EnemyBGCStateData_data[] = {
        0x01, 0x01, 0x02, 0x02, 0x02, 0x05
    };
    writeData(EnemyBGCStateData, EnemyBGCStateData_data, sizeof(EnemyBGCStateData_data));

    // EnemyBGCXSpdData
    //
    const uint8_t EnemyBGCXSpdData_data[] = {
        0x10, 0xf0
    };
    writeData(EnemyBGCXSpdData, EnemyBGCXSpdData_data, sizeof(EnemyBGCXSpdData_data));

    // BoundBoxCtrlData
    //
    const uint8_t BoundBoxCtrlData_data[] = {
        0x02, 0x08, 0x0e, 0x20,
        0x03, 0x14, 0x0d, 0x20,
        0x02, 0x14, 0x0e, 0x20,
        0x02, 0x09, 0x0e, 0x15,
        0x00, 0x00, 0x18, 0x06,
        0x00, 0x00, 0x20, 0x0d,
        0x00, 0x00, 0x30, 0x0d,
        0x00, 0x00, 0x08, 0x08,
        0x06, 0x04, 0x0a, 0x08,
        0x03, 0x0e, 0x0d, 0x14,
        0x00, 0x02, 0x10, 0x15,
        0x04, 0x04, 0x0c, 0x1c
    };
    writeData(BoundBoxCtrlData, BoundBoxCtrlData_data, sizeof(BoundBoxCtrlData_data));

    // BlockBufferAdderData
    //
    const uint8_t BlockBufferAdderData_data[] = {
        0x00, 0x07, 0x0e
    };
    writeData(BlockBufferAdderData, BlockBufferAdderData_data, sizeof(BlockBufferAdderData_data));

    // BlockBuffer_X_Adder
    //
    const uint8_t BlockBuffer_X_Adder_data[] = {
        0x08, 0x03, 0x0c, 0x02, 0x02, 0x0d, 0x0d, 0x08,
        0x03, 0x0c, 0x02, 0x02, 0x0d, 0x0d, 0x08, 0x03,
        0x0c, 0x02, 0x02, 0x0d, 0x0d, 0x08, 0x00, 0x10,
        0x04, 0x14, 0x04, 0x04
    };
    writeData(BlockBuffer_X_Adder, BlockBuffer_X_Adder_data, sizeof(BlockBuffer_X_Adder_data));

    // BlockBuffer_Y_Adder
    //
    const uint8_t BlockBuffer_Y_Adder_data[] = {
        0x04, 0x20, 0x20, 0x08, 0x18, 0x08, 0x18, 0x02,
        0x20, 0x20, 0x08, 0x18, 0x08, 0x18, 0x12, 0x20,
        0x20, 0x18, 0x18, 0x18, 0x18, 0x18, 0x14, 0x14,
        0x06, 0x06, 0x08, 0x10
    };
    writeData(BlockBuffer_Y_Adder, BlockBuffer_Y_Adder_data, sizeof(BlockBuffer_Y_Adder_data));

    // VineYPosAdder
    //
    const uint8_t VineYPosAdder_data[] = {
        0x00, 0x30
    };
    writeData(VineYPosAdder, VineYPosAdder_data, sizeof(VineYPosAdder_data));

    // FirstSprXPos
    //
    const uint8_t FirstSprXPos_data[] = {
        0x04, 0x00, 0x04, 0x00
    };
    writeData(FirstSprXPos, FirstSprXPos_data, sizeof(FirstSprXPos_data));

    // FirstSprYPos
    //
    const uint8_t FirstSprYPos_data[] = {
        0x00, 0x04, 0x00, 0x04
    };
    writeData(FirstSprYPos, FirstSprYPos_data, sizeof(FirstSprYPos_data));

    // SecondSprXPos
    //
    const uint8_t SecondSprXPos_data[] = {
        0x00, 0x08, 0x00, 0x08
    };
    writeData(SecondSprXPos, SecondSprXPos_data, sizeof(SecondSprXPos_data));

    // SecondSprYPos
    //
    const uint8_t SecondSprYPos_data[] = {
        0x08, 0x00, 0x08, 0x00
    };
    writeData(SecondSprYPos, SecondSprYPos_data, sizeof(SecondSprYPos_data));

    // FirstSprTilenum
    //
    const uint8_t FirstSprTilenum_data[] = {
        0x80, 0x82, 0x81, 0x83
    };
    writeData(FirstSprTilenum, FirstSprTilenum_data, sizeof(FirstSprTilenum_data));

    // SecondSprTilenum
    //
    const uint8_t SecondSprTilenum_data[] = {
        0x81, 0x83, 0x80, 0x82
    };
    writeData(SecondSprTilenum, SecondSprTilenum_data, sizeof(SecondSprTilenum_data));

    // HammerSprAttrib
    //
    const uint8_t HammerSprAttrib_data[] = {
        0x03, 0x03, 0xc3, 0xc3
    };
    writeData(HammerSprAttrib, HammerSprAttrib_data, sizeof(HammerSprAttrib_data));

    // FlagpoleScoreNumTiles
    //
    const uint8_t FlagpoleScoreNumTiles_data[] = {
        0xf9, 0x50,
        0xf7, 0x50,
        0xfa, 0xfb,
        0xf8, 0xfb,
        0xf6, 0xfb
    };
    writeData(FlagpoleScoreNumTiles, FlagpoleScoreNumTiles_data, sizeof(FlagpoleScoreNumTiles_data));

    // JumpingCoinTiles
    //
    const uint8_t JumpingCoinTiles_data[] = {
        0x60, 0x61, 0x62, 0x63
    };
    writeData(JumpingCoinTiles, JumpingCoinTiles_data, sizeof(JumpingCoinTiles_data));

    // PowerUpGfxTable
    //
    const uint8_t PowerUpGfxTable_data[] = {
        0x76, 0x77, 0x78, 0x79, // regular mushroom
        0xd6, 0xd6, 0xd9, 0xd9, // fire flower
        0x8d, 0x8d, 0xe4, 0xe4, // star
        0x76, 0x77, 0x78, 0x79 // 1-up mushroom
    };
    writeData(PowerUpGfxTable, PowerUpGfxTable_data, sizeof(PowerUpGfxTable_data));

    // PowerUpAttributes
    //
    const uint8_t PowerUpAttributes_data[] = {
        0x02, 0x01, 0x02, 0x01
    };
    writeData(PowerUpAttributes, PowerUpAttributes_data, sizeof(PowerUpAttributes_data));

    // EnemyGraphicsTable
    //
    const uint8_t EnemyGraphicsTable_data[] = {
        0xfc, 0xfc, 0xaa, 0xab, 0xac, 0xad, // buzzy beetle frame 1
        0xfc, 0xfc, 0xae, 0xaf, 0xb0, 0xb1, //              frame 2
        0xfc, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, // koopa troopa frame 1
        0xfc, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, //              frame 2
        0x69, 0xa5, 0x6a, 0xa7, 0xa8, 0xa9, // koopa paratroopa frame 1
        0x6b, 0xa0, 0x6c, 0xa2, 0xa3, 0xa4, //                  frame 2
        0xfc, 0xfc, 0x96, 0x97, 0x98, 0x99, // spiny frame 1
        0xfc, 0xfc, 0x9a, 0x9b, 0x9c, 0x9d, //       frame 2
        0xfc, 0xfc, 0x8f, 0x8e, 0x8e, 0x8f, // spiny's egg frame 1
        0xfc, 0xfc, 0x95, 0x94, 0x94, 0x95, //             frame 2
        0xfc, 0xfc, 0xdc, 0xdc, 0xdf, 0xdf, // bloober frame 1
        0xdc, 0xdc, 0xdd, 0xdd, 0xde, 0xde, //         frame 2
        0xfc, 0xfc, 0xb2, 0xb3, 0xb4, 0xb5, // cheep-cheep frame 1
        0xfc, 0xfc, 0xb6, 0xb3, 0xb7, 0xb5, //             frame 2
        0xfc, 0xfc, 0x70, 0x71, 0x72, 0x73, // goomba
        0xfc, 0xfc, 0x6e, 0x6e, 0x6f, 0x6f, // koopa shell frame 1 (upside-down)
        0xfc, 0xfc, 0x6d, 0x6d, 0x6f, 0x6f, //             frame 2
        0xfc, 0xfc, 0x6f, 0x6f, 0x6e, 0x6e, // koopa shell frame 1 (rightsideup)
        0xfc, 0xfc, 0x6f, 0x6f, 0x6d, 0x6d, //             frame 2
        0xfc, 0xfc, 0xf4, 0xf4, 0xf5, 0xf5, // buzzy beetle shell frame 1 (rightsideup)
        0xfc, 0xfc, 0xf4, 0xf4, 0xf5, 0xf5, //                    frame 2
        0xfc, 0xfc, 0xf5, 0xf5, 0xf4, 0xf4, // buzzy beetle shell frame 1 (upside-down)
        0xfc, 0xfc, 0xf5, 0xf5, 0xf4, 0xf4, //                    frame 2
        0xfc, 0xfc, 0xfc, 0xfc, 0xef, 0xef, // defeated goomba
        0xb9, 0xb8, 0xbb, 0xba, 0xbc, 0xbc, // lakitu frame 1
        0xfc, 0xfc, 0xbd, 0xbd, 0xbc, 0xbc, //        frame 2
        0x7a, 0x7b, 0xda, 0xdb, 0xd8, 0xd8, // princess
        0xcd, 0xcd, 0xce, 0xce, 0xcf, 0xcf, // mushroom retainer
        0x7d, 0x7c, 0xd1, 0x8c, 0xd3, 0xd2, // hammer bro frame 1
        0x7d, 0x7c, 0x89, 0x88, 0x8b, 0x8a, //            frame 2
        0xd5, 0xd4, 0xe3, 0xe2, 0xd3, 0xd2, //            frame 3
        0xd5, 0xd4, 0xe3, 0xe2, 0x8b, 0x8a, //            frame 4
        0xe5, 0xe5, 0xe6, 0xe6, 0xeb, 0xeb, // piranha plant frame 1
        0xec, 0xec, 0xed, 0xed, 0xee, 0xee, //               frame 2
        0xfc, 0xfc, 0xd0, 0xd0, 0xd7, 0xd7, // podoboo
        0xbf, 0xbe, 0xc1, 0xc0, 0xc2, 0xfc, // bowser front frame 1
        0xc4, 0xc3, 0xc6, 0xc5, 0xc8, 0xc7, // bowser rear frame 1
        0xbf, 0xbe, 0xca, 0xc9, 0xc2, 0xfc, //        front frame 2
        0xc4, 0xc3, 0xc6, 0xc5, 0xcc, 0xcb, //        rear frame 2
        0xfc, 0xfc, 0xe8, 0xe7, 0xea, 0xe9, // bullet bill
        0xf2, 0xf2, 0xf3, 0xf3, 0xf2, 0xf2, // jumpspring frame 1
        0xf1, 0xf1, 0xf1, 0xf1, 0xfc, 0xfc, //            frame 2
        0xf0, 0xf0, 0xfc, 0xfc, 0xfc, 0xfc //            frame 3
    };
    writeData(EnemyGraphicsTable, EnemyGraphicsTable_data, sizeof(EnemyGraphicsTable_data));

    // EnemyGfxTableOffsets
    //
    const uint8_t EnemyGfxTableOffsets_data[] = {
        0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0xa8, 0x54, 0x3c,
        0xea, 0x18, 0x48, 0x48, 0xcc, 0xc0, 0x18, 0x18,
        0x18, 0x90, 0x24, 0xff, 0x48, 0x9c, 0xd2, 0xd8,
        0xf0, 0xf6, 0xfc
    };
    writeData(EnemyGfxTableOffsets, EnemyGfxTableOffsets_data, sizeof(EnemyGfxTableOffsets_data));

    // EnemyAttributeData
    //
    const uint8_t EnemyAttributeData_data[] = {
        0x01, 0x02, 0x03, 0x02, 0x01, 0x01, 0x03, 0x03,
        0x03, 0x01, 0x01, 0x02, 0x02, 0x21, 0x01, 0x02,
        0x01, 0x01, 0x02, 0xff, 0x02, 0x02, 0x01, 0x01,
        0x02, 0x02, 0x02
    };
    writeData(EnemyAttributeData, EnemyAttributeData_data, sizeof(EnemyAttributeData_data));

    // EnemyAnimTimingBMask
    //
    const uint8_t EnemyAnimTimingBMask_data[] = {
        0x08, 0x18
    };
    writeData(EnemyAnimTimingBMask, EnemyAnimTimingBMask_data, sizeof(EnemyAnimTimingBMask_data));

    // JumpspringFrameOffsets
    //
    const uint8_t JumpspringFrameOffsets_data[] = {
        0x18, 0x19, 0x1a, 0x19, 0x18
    };
    writeData(JumpspringFrameOffsets, JumpspringFrameOffsets_data, sizeof(JumpspringFrameOffsets_data));

    // DefaultBlockObjTiles
    //
    const uint8_t DefaultBlockObjTiles_data[] = {
        0x85, 0x85, 0x86, 0x86 // brick w/ line (these are sprite tiles, not BG!)
    };
    writeData(DefaultBlockObjTiles, DefaultBlockObjTiles_data, sizeof(DefaultBlockObjTiles_data));

    // ExplosionTiles
    //
    const uint8_t ExplosionTiles_data[] = {
        0x68, 0x67, 0x66
    };
    writeData(ExplosionTiles, ExplosionTiles_data, sizeof(ExplosionTiles_data));

    // PlayerGfxTblOffsets
    //
    const uint8_t PlayerGfxTblOffsets_data[] = {
        0x20, 0x28, 0xc8, 0x18, 0x00, 0x40, 0x50, 0x58,
        0x80, 0x88, 0xb8, 0x78, 0x60, 0xa0, 0xb0, 0xb8
    };
    writeData(PlayerGfxTblOffsets, PlayerGfxTblOffsets_data, sizeof(PlayerGfxTblOffsets_data));

    // PlayerGraphicsTable
    //
    const uint8_t PlayerGraphicsTable_data[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // walking frame 1
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, //         frame 2
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, //         frame 3
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, // skidding
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, // jumping
        0x08, 0x09, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, // swimming frame 1
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x30, 0x2c, 0x2d, //          frame 2
        0x08, 0x09, 0x0a, 0x0b, 0x2e, 0x2f, 0x2c, 0x2d, //          frame 3
        0x08, 0x09, 0x28, 0x29, 0x2a, 0x2b, 0x5c, 0x5d, // climbing frame 1
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x5e, 0x5f, //          frame 2
        0xfc, 0xfc, 0x08, 0x09, 0x58, 0x59, 0x5a, 0x5a, // crouching
        0x08, 0x09, 0x28, 0x29, 0x2a, 0x2b, 0x0e, 0x0f, // fireball throwing
        0xfc, 0xfc, 0xfc, 0xfc, 0x32, 0x33, 0x34, 0x35, // walking frame 1
        0xfc, 0xfc, 0xfc, 0xfc, 0x36, 0x37, 0x38, 0x39, //         frame 2
        0xfc, 0xfc, 0xfc, 0xfc, 0x3a, 0x37, 0x3b, 0x3c, //         frame 3
        0xfc, 0xfc, 0xfc, 0xfc, 0x3d, 0x3e, 0x3f, 0x40, // skidding
        0xfc, 0xfc, 0xfc, 0xfc, 0x32, 0x41, 0x42, 0x43, // jumping
        0xfc, 0xfc, 0xfc, 0xfc, 0x32, 0x33, 0x44, 0x45, // swimming frame 1
        0xfc, 0xfc, 0xfc, 0xfc, 0x32, 0x33, 0x44, 0x47, //          frame 2
        0xfc, 0xfc, 0xfc, 0xfc, 0x32, 0x33, 0x48, 0x49, //          frame 3
        0xfc, 0xfc, 0xfc, 0xfc, 0x32, 0x33, 0x90, 0x91, // climbing frame 1
        0xfc, 0xfc, 0xfc, 0xfc, 0x3a, 0x37, 0x92, 0x93, //          frame 2
        0xfc, 0xfc, 0xfc, 0xfc, 0x9e, 0x9e, 0x9f, 0x9f, // killed
        0xfc, 0xfc, 0xfc, 0xfc, 0x3a, 0x37, 0x4f, 0x4f, // small player standing
        0xfc, 0xfc, 0x00, 0x01, 0x4c, 0x4d, 0x4e, 0x4e, // intermediate grow frame
        0x00, 0x01, 0x4c, 0x4d, 0x4a, 0x4a, 0x4b, 0x4b // big player standing
    };
    writeData(PlayerGraphicsTable, PlayerGraphicsTable_data, sizeof(PlayerGraphicsTable_data));

    // SwimKickTileNum
    //
    const uint8_t SwimKickTileNum_data[] = {
        0x31, 0x46
    };
    writeData(SwimKickTileNum, SwimKickTileNum_data, sizeof(SwimKickTileNum_data));

    // IntermediatePlayerData
    //
    const uint8_t IntermediatePlayerData_data[] = {
        0x58, 0x01, 0x00, 0x60, 0xff, 0x04
    };
    writeData(IntermediatePlayerData, IntermediatePlayerData_data, sizeof(IntermediatePlayerData_data));

    // ChangeSizeOffsetAdder
    //
    const uint8_t ChangeSizeOffsetAdder_data[] = {
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 0x01, 0x02,
        0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00
    };
    writeData(ChangeSizeOffsetAdder, ChangeSizeOffsetAdder_data, sizeof(ChangeSizeOffsetAdder_data));

    // ObjOffsetData
    //
    const uint8_t ObjOffsetData_data[] = {
        0x07, 0x16, 0x0d
    };
    writeData(ObjOffsetData, ObjOffsetData_data, sizeof(ObjOffsetData_data));

    // XOffscreenBitsData
    //
    const uint8_t XOffscreenBitsData_data[] = {
        0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00,
        0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff
    };
    writeData(XOffscreenBitsData, XOffscreenBitsData_data, sizeof(XOffscreenBitsData_data));

    // DefaultXOnscreenOfs
    //
    const uint8_t DefaultXOnscreenOfs_data[] = {
        0x07, 0x0f, 0x07
    };
    writeData(DefaultXOnscreenOfs, DefaultXOnscreenOfs_data, sizeof(DefaultXOnscreenOfs_data));

    // YOffscreenBitsData
    //
    const uint8_t YOffscreenBitsData_data[] = {
        0x00, 0x08, 0x0c, 0x0e,
        0x0f, 0x07, 0x03, 0x01,
        0x00
    };
    writeData(YOffscreenBitsData, YOffscreenBitsData_data, sizeof(YOffscreenBitsData_data));

    // DefaultYOnscreenOfs
    //
    const uint8_t DefaultYOnscreenOfs_data[] = {
        0x04, 0x00, 0x04
    };
    writeData(DefaultYOnscreenOfs, DefaultYOnscreenOfs_data, sizeof(DefaultYOnscreenOfs_data));

    // HighPosUnitData
    //
    const uint8_t HighPosUnitData_data[] = {
        0xff, 0x00
    };
    writeData(HighPosUnitData, HighPosUnitData_data, sizeof(HighPosUnitData_data));

    // SwimStompEnvelopeData
    //
    const uint8_t SwimStompEnvelopeData_data[] = {
        0x9f, 0x9b, 0x98, 0x96, 0x95, 0x94, 0x92, 0x90,
        0x90, 0x9a, 0x97, 0x95, 0x93, 0x92
    };
    writeData(SwimStompEnvelopeData, SwimStompEnvelopeData_data, sizeof(SwimStompEnvelopeData_data));

    // ExtraLifeFreqData
    //
    const uint8_t ExtraLifeFreqData_data[] = {
        0x58, 0x02, 0x54, 0x56, 0x4e, 0x44
    };
    writeData(ExtraLifeFreqData, ExtraLifeFreqData_data, sizeof(ExtraLifeFreqData_data));

    // PowerUpGrabFreqData
    //
    const uint8_t PowerUpGrabFreqData_data[] = {
        0x4c, 0x52, 0x4c, 0x48, 0x3e, 0x36, 0x3e, 0x36, 0x30,
        0x28, 0x4a, 0x50, 0x4a, 0x64, 0x3c, 0x32, 0x3c, 0x32,
        0x2c, 0x24, 0x3a, 0x64, 0x3a, 0x34, 0x2c, 0x22, 0x2c,
        0x22, 0x1c, 0x14
    };
    writeData(PowerUpGrabFreqData, PowerUpGrabFreqData_data, sizeof(PowerUpGrabFreqData_data));

    // PUp_VGrow_FreqData
    //
    const uint8_t PUp_VGrow_FreqData_data[] = {
        0x14, 0x04, 0x22, 0x24, 0x16, 0x04, 0x24, 0x26, // used by both
        0x18, 0x04, 0x26, 0x28, 0x1a, 0x04, 0x28, 0x2a,
        0x1c, 0x04, 0x2a, 0x2c, 0x1e, 0x04, 0x2c, 0x2e, // used by vinegrow
        0x20, 0x04, 0x2e, 0x30, 0x22, 0x04, 0x30, 0x32
    };
    writeData(PUp_VGrow_FreqData, PUp_VGrow_FreqData_data, sizeof(PUp_VGrow_FreqData_data));

    // BrickShatterFreqData
    //
    const uint8_t BrickShatterFreqData_data[] = {
        0x01, 0x0e, 0x0e, 0x0d, 0x0b, 0x06, 0x0c, 0x0f,
        0x0a, 0x09, 0x03, 0x0d, 0x08, 0x0d, 0x06, 0x0c
    };
    writeData(BrickShatterFreqData, BrickShatterFreqData_data, sizeof(BrickShatterFreqData_data));

    // MusicHeaderData
    //
    const uint8_t MusicHeaderData_data[] = {
        DeathMusHdr - MHD, // event music
        GameOverMusHdr - MHD,
        VictoryMusHdr - MHD,
        WinCastleMusHdr - MHD,
        GameOverMusHdr - MHD,
        EndOfLevelMusHdr - MHD,
        TimeRunningOutHdr - MHD,
        SilenceHdr - MHD,
        GroundLevelPart1Hdr - MHD, // area music
        WaterMusHdr - MHD,
        UndergroundMusHdr - MHD,
        CastleMusHdr - MHD,
        Star_CloudHdr - MHD,
        GroundLevelLeadInHdr - MHD,
        Star_CloudHdr - MHD,
        SilenceHdr - MHD,
        GroundLevelLeadInHdr - MHD, // ground level music layout
        GroundLevelPart1Hdr - MHD, GroundLevelPart1Hdr - MHD,
        GroundLevelPart2AHdr - MHD, GroundLevelPart2BHdr - MHD, GroundLevelPart2AHdr - MHD, GroundLevelPart2CHdr - MHD,
        GroundLevelPart2AHdr - MHD, GroundLevelPart2BHdr - MHD, GroundLevelPart2AHdr - MHD, GroundLevelPart2CHdr - MHD,
        GroundLevelPart3AHdr - MHD, GroundLevelPart3BHdr - MHD, GroundLevelPart3AHdr - MHD, GroundLevelLeadInHdr - MHD,
        GroundLevelPart1Hdr - MHD, GroundLevelPart1Hdr - MHD,
        GroundLevelPart4AHdr - MHD, GroundLevelPart4BHdr - MHD, GroundLevelPart4AHdr - MHD, GroundLevelPart4CHdr - MHD,
        GroundLevelPart4AHdr - MHD, GroundLevelPart4BHdr - MHD, GroundLevelPart4AHdr - MHD, GroundLevelPart4CHdr - MHD,
        GroundLevelPart3AHdr - MHD, GroundLevelPart3BHdr - MHD, GroundLevelPart3AHdr - MHD, GroundLevelLeadInHdr - MHD,
        GroundLevelPart4AHdr - MHD, GroundLevelPart4BHdr - MHD, GroundLevelPart4AHdr - MHD, GroundLevelPart4CHdr - MHD
    };
    writeData(MusicHeaderData, MusicHeaderData_data, sizeof(MusicHeaderData_data));

    // TimeRunningOutHdr
    //
    const uint8_t TimeRunningOutHdr_data[] = {
        0x08, LOBYTE(TimeRunOutMusData), HIBYTE(TimeRunOutMusData), 0x27, 0x18
    };
    writeData(TimeRunningOutHdr, TimeRunningOutHdr_data, sizeof(TimeRunningOutHdr_data));

    // Star_CloudHdr
    //
    const uint8_t Star_CloudHdr_data[] = {
        0x20, LOBYTE(Star_CloudMData), HIBYTE(Star_CloudMData), 0x2e, 0x1a, 0x40
    };
    writeData(Star_CloudHdr, Star_CloudHdr_data, sizeof(Star_CloudHdr_data));

    // EndOfLevelMusHdr
    //
    const uint8_t EndOfLevelMusHdr_data[] = {
        0x20, LOBYTE(WinLevelMusData), HIBYTE(WinLevelMusData), 0x3d, 0x21
    };
    writeData(EndOfLevelMusHdr, EndOfLevelMusHdr_data, sizeof(EndOfLevelMusHdr_data));

    // ResidualHeaderData
    //
    const uint8_t ResidualHeaderData_data[] = {
        0x20, 0xc4, 0xfc, 0x3f, 0x1d
    };
    writeData(ResidualHeaderData, ResidualHeaderData_data, sizeof(ResidualHeaderData_data));

    // UndergroundMusHdr
    //
    const uint8_t UndergroundMusHdr_data[] = {
        0x18, LOBYTE(UndergroundMusData), HIBYTE(UndergroundMusData), 0x00, 0x00
    };
    writeData(UndergroundMusHdr, UndergroundMusHdr_data, sizeof(UndergroundMusHdr_data));

    // SilenceHdr
    //
    const uint8_t SilenceHdr_data[] = {
        0x08, LOBYTE(SilenceData), HIBYTE(SilenceData), 0x00
    };
    writeData(SilenceHdr, SilenceHdr_data, sizeof(SilenceHdr_data));

    // CastleMusHdr
    //
    const uint8_t CastleMusHdr_data[] = {
        0x00, LOBYTE(CastleMusData), HIBYTE(CastleMusData), 0x93, 0x62
    };
    writeData(CastleMusHdr, CastleMusHdr_data, sizeof(CastleMusHdr_data));

    // VictoryMusHdr
    //
    const uint8_t VictoryMusHdr_data[] = {
        0x10, LOBYTE(VictoryMusData), HIBYTE(VictoryMusData), 0x24, 0x14
    };
    writeData(VictoryMusHdr, VictoryMusHdr_data, sizeof(VictoryMusHdr_data));

    // GameOverMusHdr
    //
    const uint8_t GameOverMusHdr_data[] = {
        0x18, LOBYTE(GameOverMusData), HIBYTE(GameOverMusData), 0x1e, 0x14
    };
    writeData(GameOverMusHdr, GameOverMusHdr_data, sizeof(GameOverMusHdr_data));

    // WaterMusHdr
    //
    const uint8_t WaterMusHdr_data[] = {
        0x08, LOBYTE(WaterMusData), HIBYTE(WaterMusData), 0xa0, 0x70, 0x68
    };
    writeData(WaterMusHdr, WaterMusHdr_data, sizeof(WaterMusHdr_data));

    // WinCastleMusHdr
    //
    const uint8_t WinCastleMusHdr_data[] = {
        0x08, LOBYTE(EndOfCastleMusData), HIBYTE(EndOfCastleMusData), 0x4c, 0x24
    };
    writeData(WinCastleMusHdr, WinCastleMusHdr_data, sizeof(WinCastleMusHdr_data));

    // GroundLevelPart1Hdr
    //
    const uint8_t GroundLevelPart1Hdr_data[] = {
        0x18, LOBYTE(GroundM_P1Data), HIBYTE(GroundM_P1Data), 0x2d, 0x1c, 0xb8
    };
    writeData(GroundLevelPart1Hdr, GroundLevelPart1Hdr_data, sizeof(GroundLevelPart1Hdr_data));

    // GroundLevelPart2AHdr
    //
    const uint8_t GroundLevelPart2AHdr_data[] = {
        0x18, LOBYTE(GroundM_P2AData), HIBYTE(GroundM_P2AData), 0x20, 0x12, 0x70
    };
    writeData(GroundLevelPart2AHdr, GroundLevelPart2AHdr_data, sizeof(GroundLevelPart2AHdr_data));

    // GroundLevelPart2BHdr
    //
    const uint8_t GroundLevelPart2BHdr_data[] = {
        0x18, LOBYTE(GroundM_P2BData), HIBYTE(GroundM_P2BData), 0x1b, 0x10, 0x44
    };
    writeData(GroundLevelPart2BHdr, GroundLevelPart2BHdr_data, sizeof(GroundLevelPart2BHdr_data));

    // GroundLevelPart2CHdr
    //
    const uint8_t GroundLevelPart2CHdr_data[] = {
        0x18, LOBYTE(GroundM_P2CData), HIBYTE(GroundM_P2CData), 0x11, 0x0a, 0x1c
    };
    writeData(GroundLevelPart2CHdr, GroundLevelPart2CHdr_data, sizeof(GroundLevelPart2CHdr_data));

    // GroundLevelPart3AHdr
    //
    const uint8_t GroundLevelPart3AHdr_data[] = {
        0x18, LOBYTE(GroundM_P3AData), HIBYTE(GroundM_P3AData), 0x2d, 0x10, 0x58
    };
    writeData(GroundLevelPart3AHdr, GroundLevelPart3AHdr_data, sizeof(GroundLevelPart3AHdr_data));

    // GroundLevelPart3BHdr
    //
    const uint8_t GroundLevelPart3BHdr_data[] = {
        0x18, LOBYTE(GroundM_P3BData), HIBYTE(GroundM_P3BData), 0x14, 0x0d, 0x3f
    };
    writeData(GroundLevelPart3BHdr, GroundLevelPart3BHdr_data, sizeof(GroundLevelPart3BHdr_data));

    // GroundLevelLeadInHdr
    //
    const uint8_t GroundLevelLeadInHdr_data[] = {
        0x18, LOBYTE(GroundMLdInData), HIBYTE(GroundMLdInData), 0x15, 0x0d, 0x21
    };
    writeData(GroundLevelLeadInHdr, GroundLevelLeadInHdr_data, sizeof(GroundLevelLeadInHdr_data));

    // GroundLevelPart4AHdr
    //
    const uint8_t GroundLevelPart4AHdr_data[] = {
        0x18, LOBYTE(GroundM_P4AData), HIBYTE(GroundM_P4AData), 0x18, 0x10, 0x7a
    };
    writeData(GroundLevelPart4AHdr, GroundLevelPart4AHdr_data, sizeof(GroundLevelPart4AHdr_data));

    // GroundLevelPart4BHdr
    //
    const uint8_t GroundLevelPart4BHdr_data[] = {
        0x18, LOBYTE(GroundM_P4BData), HIBYTE(GroundM_P4BData), 0x19, 0x0f, 0x54
    };
    writeData(GroundLevelPart4BHdr, GroundLevelPart4BHdr_data, sizeof(GroundLevelPart4BHdr_data));

    // GroundLevelPart4CHdr
    //
    const uint8_t GroundLevelPart4CHdr_data[] = {
        0x18, LOBYTE(GroundM_P4CData), HIBYTE(GroundM_P4CData), 0x1e, 0x12, 0x2b
    };
    writeData(GroundLevelPart4CHdr, GroundLevelPart4CHdr_data, sizeof(GroundLevelPart4CHdr_data));

    // DeathMusHdr
    //
    const uint8_t DeathMusHdr_data[] = {
        0x18, LOBYTE(DeathMusData), HIBYTE(DeathMusData), 0x1e, 0x0f, 0x2d
    };
    writeData(DeathMusHdr, DeathMusHdr_data, sizeof(DeathMusHdr_data));

    // Star_CloudMData
    //
    const uint8_t Star_CloudMData_data[] = {
        0x84, 0x2c, 0x2c, 0x2c, 0x82, 0x04, 0x2c, 0x04, 0x85, 0x2c, 0x84, 0x2c, 0x2c,
        0x2a, 0x2a, 0x2a, 0x82, 0x04, 0x2a, 0x04, 0x85, 0x2a, 0x84, 0x2a, 0x2a, 0x00,
        0x1f, 0x1f, 0x1f, 0x98, 0x1f, 0x1f, 0x98, 0x9e, 0x98, 0x1f,
        0x1d, 0x1d, 0x1d, 0x94, 0x1d, 0x1d, 0x94, 0x9c, 0x94, 0x1d,
        0x86, 0x18, 0x85, 0x26, 0x30, 0x84, 0x04, 0x26, 0x30,
        0x86, 0x14, 0x85, 0x22, 0x2c, 0x84, 0x04, 0x22, 0x2c,
        0x21, 0xd0, 0xc4, 0xd0, 0x31, 0xd0, 0xc4, 0xd0, 0x00
    };
    writeData(Star_CloudMData, Star_CloudMData_data, sizeof(Star_CloudMData_data));

    // GroundM_P1Data
    //
    const uint8_t GroundM_P1Data_data[] = {
        0x85, 0x2c, 0x22, 0x1c, 0x84, 0x26, 0x2a, 0x82, 0x28, 0x26, 0x04,
        0x87, 0x22, 0x34, 0x3a, 0x82, 0x40, 0x04, 0x36, 0x84, 0x3a, 0x34,
        0x82, 0x2c, 0x30, 0x85, 0x2a
    };
    writeData(GroundM_P1Data, GroundM_P1Data_data, sizeof(GroundM_P1Data_data));

    // SilenceData
    //
    const uint8_t SilenceData_data[] = {
        0x00,
        0x5d, 0x55, 0x4d, 0x15, 0x19, 0x96, 0x15, 0xd5, 0xe3, 0xeb,
        0x2d, 0xa6, 0x2b, 0x27, 0x9c, 0x9e, 0x59,
        0x85, 0x22, 0x1c, 0x14, 0x84, 0x1e, 0x22, 0x82, 0x20, 0x1e, 0x04, 0x87,
        0x1c, 0x2c, 0x34, 0x82, 0x36, 0x04, 0x30, 0x34, 0x04, 0x2c, 0x04, 0x26,
        0x2a, 0x85, 0x22
    };
    writeData(SilenceData, SilenceData_data, sizeof(SilenceData_data));

    // GroundM_P2AData
    //
    const uint8_t GroundM_P2AData_data[] = {
        0x84, 0x04, 0x82, 0x3a, 0x38, 0x36, 0x32, 0x04, 0x34,
        0x04, 0x24, 0x26, 0x2c, 0x04, 0x26, 0x2c, 0x30, 0x00,
        0x05, 0xb4, 0xb2, 0xb0, 0x2b, 0xac, 0x84,
        0x9c, 0x9e, 0xa2, 0x84, 0x94, 0x9c, 0x9e,
        0x85, 0x14, 0x22, 0x84, 0x2c, 0x85, 0x1e,
        0x82, 0x2c, 0x84, 0x2c, 0x1e
    };
    writeData(GroundM_P2AData, GroundM_P2AData_data, sizeof(GroundM_P2AData_data));

    // GroundM_P2BData
    //
    const uint8_t GroundM_P2BData_data[] = {
        0x84, 0x04, 0x82, 0x3a, 0x38, 0x36, 0x32, 0x04, 0x34,
        0x04, 0x64, 0x04, 0x64, 0x86, 0x64, 0x00,
        0x05, 0xb4, 0xb2, 0xb0, 0x2b, 0xac, 0x84,
        0x37, 0xb6, 0xb6, 0x45,
        0x85, 0x14, 0x1c, 0x82, 0x22, 0x84, 0x2c,
        0x4e, 0x82, 0x4e, 0x84, 0x4e, 0x22
    };
    writeData(GroundM_P2BData, GroundM_P2BData_data, sizeof(GroundM_P2BData_data));

    // GroundM_P2CData
    //
    const uint8_t GroundM_P2CData_data[] = {
        0x84, 0x04, 0x85, 0x32, 0x85, 0x30, 0x86, 0x2c, 0x04, 0x00,
        0x05, 0xa4, 0x05, 0x9e, 0x05, 0x9d, 0x85,
        0x84, 0x14, 0x85, 0x24, 0x28, 0x2c, 0x82,
        0x22, 0x84, 0x22, 0x14,
        0x21, 0xd0, 0xc4, 0xd0, 0x31, 0xd0, 0xc4, 0xd0, 0x00
    };
    writeData(GroundM_P2CData, GroundM_P2CData_data, sizeof(GroundM_P2CData_data));

    // GroundM_P3AData
    //
    const uint8_t GroundM_P3AData_data[] = {
        0x82, 0x2c, 0x84, 0x2c, 0x2c, 0x82, 0x2c, 0x30,
        0x04, 0x34, 0x2c, 0x04, 0x26, 0x86, 0x22, 0x00,
        0xa4, 0x25, 0x25, 0xa4, 0x29, 0xa2, 0x1d, 0x9c, 0x95
    };
    writeData(GroundM_P3AData, GroundM_P3AData_data, sizeof(GroundM_P3AData_data));

    // GroundM_P3BData
    //
    const uint8_t GroundM_P3BData_data[] = {
        0x82, 0x2c, 0x2c, 0x04, 0x2c, 0x04, 0x2c, 0x30, 0x85, 0x34, 0x04, 0x04, 0x00,
        0xa4, 0x25, 0x25, 0xa4, 0xa8, 0x63, 0x04,
        0x85, 0x0e, 0x1a, 0x84, 0x24, 0x85, 0x22, 0x14, 0x84, 0x0c
    };
    writeData(GroundM_P3BData, GroundM_P3BData_data, sizeof(GroundM_P3BData_data));

    // GroundMLdInData
    //
    const uint8_t GroundMLdInData_data[] = {
        0x82, 0x34, 0x84, 0x34, 0x34, 0x82, 0x2c, 0x84, 0x34, 0x86, 0x3a, 0x04, 0x00,
        0xa0, 0x21, 0x21, 0xa0, 0x21, 0x2b, 0x05, 0xa3,
        0x82, 0x18, 0x84, 0x18, 0x18, 0x82, 0x18, 0x18, 0x04, 0x86, 0x3a, 0x22,
        0x31, 0x90, 0x31, 0x90, 0x31, 0x71, 0x31, 0x90, 0x90, 0x90, 0x00
    };
    writeData(GroundMLdInData, GroundMLdInData_data, sizeof(GroundMLdInData_data));

    // GroundM_P4AData
    //
    const uint8_t GroundM_P4AData_data[] = {
        0x82, 0x34, 0x84, 0x2c, 0x85, 0x22, 0x84, 0x24,
        0x82, 0x26, 0x36, 0x04, 0x36, 0x86, 0x26, 0x00,
        0xac, 0x27, 0x5d, 0x1d, 0x9e, 0x2d, 0xac, 0x9f,
        0x85, 0x14, 0x82, 0x20, 0x84, 0x22, 0x2c,
        0x1e, 0x1e, 0x82, 0x2c, 0x2c, 0x1e, 0x04
    };
    writeData(GroundM_P4AData, GroundM_P4AData_data, sizeof(GroundM_P4AData_data));

    // GroundM_P4BData
    //
    const uint8_t GroundM_P4BData_data[] = {
        0x87, 0x2a, 0x40, 0x40, 0x40, 0x3a, 0x36,
        0x82, 0x34, 0x2c, 0x04, 0x26, 0x86, 0x22, 0x00,
        0xe3, 0xf7, 0xf7, 0xf7, 0xf5, 0xf1, 0xac, 0x27, 0x9e, 0x9d,
        0x85, 0x18, 0x82, 0x1e, 0x84, 0x22, 0x2a,
        0x22, 0x22, 0x82, 0x2c, 0x2c, 0x22, 0x04
    };
    writeData(GroundM_P4BData, GroundM_P4BData_data, sizeof(GroundM_P4BData_data));

    // DeathMusData
    //
    const uint8_t DeathMusData_data[] = {
        0x86, 0x04 // death music share data with fourth part c of ground level music 
    };
    writeData(DeathMusData, DeathMusData_data, sizeof(DeathMusData_data));

    // GroundM_P4CData
    //
    const uint8_t GroundM_P4CData_data[] = {
        0x82, 0x2a, 0x36, 0x04, 0x36, 0x87, 0x36, 0x34, 0x30, 0x86, 0x2c, 0x04, 0x00,
        0x00, 0x68, 0x6a, 0x6c, 0x45, // death music only
        0xa2, 0x31, 0xb0, 0xf1, 0xed, 0xeb, 0xa2, 0x1d, 0x9c, 0x95,
        0x86, 0x04, // death music only
        0x85, 0x22, 0x82, 0x22, 0x87, 0x22, 0x26, 0x2a, 0x84, 0x2c, 0x22, 0x86, 0x14,
        0x51, 0x90, 0x31, 0x11, 0x00
    };
    writeData(GroundM_P4CData, GroundM_P4CData_data, sizeof(GroundM_P4CData_data));

    // CastleMusData
    //
    const uint8_t CastleMusData_data[] = {
        0x80, 0x22, 0x28, 0x22, 0x26, 0x22, 0x24, 0x22, 0x26,
        0x22, 0x28, 0x22, 0x2a, 0x22, 0x28, 0x22, 0x26,
        0x22, 0x28, 0x22, 0x26, 0x22, 0x24, 0x22, 0x26,
        0x22, 0x28, 0x22, 0x2a, 0x22, 0x28, 0x22, 0x26,
        0x20, 0x26, 0x20, 0x24, 0x20, 0x26, 0x20, 0x28,
        0x20, 0x26, 0x20, 0x28, 0x20, 0x26, 0x20, 0x24,
        0x20, 0x26, 0x20, 0x24, 0x20, 0x26, 0x20, 0x28,
        0x20, 0x26, 0x20, 0x28, 0x20, 0x26, 0x20, 0x24,
        0x28, 0x30, 0x28, 0x32, 0x28, 0x30, 0x28, 0x2e,
        0x28, 0x30, 0x28, 0x2e, 0x28, 0x2c, 0x28, 0x2e,
        0x28, 0x30, 0x28, 0x32, 0x28, 0x30, 0x28, 0x2e,
        0x28, 0x30, 0x28, 0x2e, 0x28, 0x2c, 0x28, 0x2e, 0x00,
        0x04, 0x70, 0x6e, 0x6c, 0x6e, 0x70, 0x72, 0x70, 0x6e,
        0x70, 0x6e, 0x6c, 0x6e, 0x70, 0x72, 0x70, 0x6e,
        0x6e, 0x6c, 0x6e, 0x70, 0x6e, 0x70, 0x6e, 0x6c,
        0x6e, 0x6c, 0x6e, 0x70, 0x6e, 0x70, 0x6e, 0x6c,
        0x76, 0x78, 0x76, 0x74, 0x76, 0x74, 0x72, 0x74,
        0x76, 0x78, 0x76, 0x74, 0x76, 0x74, 0x72, 0x74,
        0x84, 0x1a, 0x83, 0x18, 0x20, 0x84, 0x1e, 0x83, 0x1c, 0x28,
        0x26, 0x1c, 0x1a, 0x1c
    };
    writeData(CastleMusData, CastleMusData_data, sizeof(CastleMusData_data));

    // GameOverMusData
    //
    const uint8_t GameOverMusData_data[] = {
        0x82, 0x2c, 0x04, 0x04, 0x22, 0x04, 0x04, 0x84, 0x1c, 0x87,
        0x26, 0x2a, 0x26, 0x84, 0x24, 0x28, 0x24, 0x80, 0x22, 0x00,
        0x9c, 0x05, 0x94, 0x05, 0x0d, 0x9f, 0x1e, 0x9c, 0x98, 0x9d,
        0x82, 0x22, 0x04, 0x04, 0x1c, 0x04, 0x04, 0x84, 0x14,
        0x86, 0x1e, 0x80, 0x16, 0x80, 0x14
    };
    writeData(GameOverMusData, GameOverMusData_data, sizeof(GameOverMusData_data));

    // TimeRunOutMusData
    //
    const uint8_t TimeRunOutMusData_data[] = {
        0x81, 0x1c, 0x30, 0x04, 0x30, 0x30, 0x04, 0x1e, 0x32, 0x04, 0x32, 0x32,
        0x04, 0x20, 0x34, 0x04, 0x34, 0x34, 0x04, 0x36, 0x04, 0x84, 0x36, 0x00,
        0x46, 0xa4, 0x64, 0xa4, 0x48, 0xa6, 0x66, 0xa6, 0x4a, 0xa8, 0x68, 0xa8,
        0x6a, 0x44, 0x2b,
        0x81, 0x2a, 0x42, 0x04, 0x42, 0x42, 0x04, 0x2c, 0x64, 0x04, 0x64, 0x64,
        0x04, 0x2e, 0x46, 0x04, 0x46, 0x46, 0x04, 0x22, 0x04, 0x84, 0x22
    };
    writeData(TimeRunOutMusData, TimeRunOutMusData_data, sizeof(TimeRunOutMusData_data));

    // WinLevelMusData
    //
    const uint8_t WinLevelMusData_data[] = {
        0x87, 0x04, 0x06, 0x0c, 0x14, 0x1c, 0x22, 0x86, 0x2c, 0x22,
        0x87, 0x04, 0x60, 0x0e, 0x14, 0x1a, 0x24, 0x86, 0x2c, 0x24,
        0x87, 0x04, 0x08, 0x10, 0x18, 0x1e, 0x28, 0x86, 0x30, 0x30,
        0x80, 0x64, 0x00,
        0xcd, 0xd5, 0xdd, 0xe3, 0xed, 0xf5, 0xbb, 0xb5, 0xcf, 0xd5,
        0xdb, 0xe5, 0xed, 0xf3, 0xbd, 0xb3, 0xd1, 0xd9, 0xdf, 0xe9,
        0xf1, 0xf7, 0xbf, 0xff, 0xff, 0xff, 0x34,
        0x00, // unused byte
        0x86, 0x04, 0x87, 0x14, 0x1c, 0x22, 0x86, 0x34, 0x84, 0x2c,
        0x04, 0x04, 0x04, 0x87, 0x14, 0x1a, 0x24, 0x86, 0x32, 0x84,
        0x2c, 0x04, 0x86, 0x04, 0x87, 0x18, 0x1e, 0x28, 0x86, 0x36,
        0x87, 0x30, 0x30, 0x30, 0x80, 0x2c
    };
    writeData(WinLevelMusData, WinLevelMusData_data, sizeof(WinLevelMusData_data));

    // UndergroundMusData
    //
    const uint8_t UndergroundMusData_data[] = {
        0x82, 0x14, 0x2c, 0x62, 0x26, 0x10, 0x28, 0x80, 0x04,
        0x82, 0x14, 0x2c, 0x62, 0x26, 0x10, 0x28, 0x80, 0x04,
        0x82, 0x08, 0x1e, 0x5e, 0x18, 0x60, 0x1a, 0x80, 0x04,
        0x82, 0x08, 0x1e, 0x5e, 0x18, 0x60, 0x1a, 0x86, 0x04,
        0x83, 0x1a, 0x18, 0x16, 0x84, 0x14, 0x1a, 0x18, 0x0e, 0x0c,
        0x16, 0x83, 0x14, 0x20, 0x1e, 0x1c, 0x28, 0x26, 0x87,
        0x24, 0x1a, 0x12, 0x10, 0x62, 0x0e, 0x80, 0x04, 0x04,
        0x00
    };
    writeData(UndergroundMusData, UndergroundMusData_data, sizeof(UndergroundMusData_data));

    // WaterMusData
    //
    const uint8_t WaterMusData_data[] = {
        0x82, 0x18, 0x1c, 0x20, 0x22, 0x26, 0x28,
        0x81, 0x2a, 0x2a, 0x2a, 0x04, 0x2a, 0x04, 0x83, 0x2a, 0x82, 0x22,
        0x86, 0x34, 0x32, 0x34, 0x81, 0x04, 0x22, 0x26, 0x2a, 0x2c, 0x30,
        0x86, 0x34, 0x83, 0x32, 0x82, 0x36, 0x84, 0x34, 0x85, 0x04, 0x81, 0x22,
        0x86, 0x30, 0x2e, 0x30, 0x81, 0x04, 0x22, 0x26, 0x2a, 0x2c, 0x2e,
        0x86, 0x30, 0x83, 0x22, 0x82, 0x36, 0x84, 0x34, 0x85, 0x04, 0x81, 0x22,
        0x86, 0x3a, 0x3a, 0x3a, 0x82, 0x3a, 0x81, 0x40, 0x82, 0x04, 0x81, 0x3a,
        0x86, 0x36, 0x36, 0x36, 0x82, 0x36, 0x81, 0x3a, 0x82, 0x04, 0x81, 0x36,
        0x86, 0x34, 0x82, 0x26, 0x2a, 0x36,
        0x81, 0x34, 0x34, 0x85, 0x34, 0x81, 0x2a, 0x86, 0x2c, 0x00,
        0x84, 0x90, 0xb0, 0x84, 0x50, 0x50, 0xb0, 0x00,
        0x98, 0x96, 0x94, 0x92, 0x94, 0x96, 0x58, 0x58, 0x58, 0x44,
        0x5c, 0x44, 0x9f, 0xa3, 0xa1, 0xa3, 0x85, 0xa3, 0xe0, 0xa6,
        0x23, 0xc4, 0x9f, 0x9d, 0x9f, 0x85, 0x9f, 0xd2, 0xa6, 0x23,
        0xc4, 0xb5, 0xb1, 0xaf, 0x85, 0xb1, 0xaf, 0xad, 0x85, 0x95,
        0x9e, 0xa2, 0xaa, 0x6a, 0x6a, 0x6b, 0x5e, 0x9d,
        0x84, 0x04, 0x04, 0x82, 0x22, 0x86, 0x22,
        0x82, 0x14, 0x22, 0x2c, 0x12, 0x22, 0x2a, 0x14, 0x22, 0x2c,
        0x1c, 0x22, 0x2c, 0x14, 0x22, 0x2c, 0x12, 0x22, 0x2a, 0x14,
        0x22, 0x2c, 0x1c, 0x22, 0x2c, 0x18, 0x22, 0x2a, 0x16, 0x20,
        0x28, 0x18, 0x22, 0x2a, 0x12, 0x22, 0x2a, 0x18, 0x22, 0x2a,
        0x12, 0x22, 0x2a, 0x14, 0x22, 0x2c, 0x0c, 0x22, 0x2c, 0x14, 0x22, 0x34, 0x12,
        0x22, 0x30, 0x10, 0x22, 0x2e, 0x16, 0x22, 0x34, 0x18, 0x26,
        0x36, 0x16, 0x26, 0x36, 0x14, 0x26, 0x36, 0x12, 0x22, 0x36,
        0x5c, 0x22, 0x34, 0x0c, 0x22, 0x22, 0x81, 0x1e, 0x1e, 0x85, 0x1e,
        0x81, 0x12, 0x86, 0x14
    };
    writeData(WaterMusData, WaterMusData_data, sizeof(WaterMusData_data));

    // EndOfCastleMusData
    //
    const uint8_t EndOfCastleMusData_data[] = {
        0x81, 0x2c, 0x22, 0x1c, 0x2c, 0x22, 0x1c, 0x85, 0x2c, 0x04,
        0x81, 0x2e, 0x24, 0x1e, 0x2e, 0x24, 0x1e, 0x85, 0x2e, 0x04,
        0x81, 0x32, 0x28, 0x22, 0x32, 0x28, 0x22, 0x85, 0x32,
        0x87, 0x36, 0x36, 0x36, 0x84, 0x3a, 0x00,
        0x5c, 0x54, 0x4c, 0x5c, 0x54, 0x4c,
        0x5c, 0x1c, 0x1c, 0x5c, 0x5c, 0x5c, 0x5c,
        0x5e, 0x56, 0x4e, 0x5e, 0x56, 0x4e,
        0x5e, 0x1e, 0x1e, 0x5e, 0x5e, 0x5e, 0x5e,
        0x62, 0x5a, 0x50, 0x62, 0x5a, 0x50,
        0x62, 0x22, 0x22, 0x62, 0xe7, 0xe7, 0xe7, 0x2b,
        0x86, 0x14, 0x81, 0x14, 0x80, 0x14, 0x14, 0x81, 0x14, 0x14, 0x14, 0x14,
        0x86, 0x16, 0x81, 0x16, 0x80, 0x16, 0x16, 0x81, 0x16, 0x16, 0x16, 0x16,
        0x81, 0x28, 0x22, 0x1a, 0x28, 0x22, 0x1a, 0x28, 0x80, 0x28, 0x28,
        0x81, 0x28, 0x87, 0x2c, 0x2c, 0x2c, 0x84, 0x30
    };
    writeData(EndOfCastleMusData, EndOfCastleMusData_data, sizeof(EndOfCastleMusData_data));

    // VictoryMusData
    //
    const uint8_t VictoryMusData_data[] = {
        0x83, 0x04, 0x84, 0x0c, 0x83, 0x62, 0x10, 0x84, 0x12,
        0x83, 0x1c, 0x22, 0x1e, 0x22, 0x26, 0x18, 0x1e, 0x04, 0x1c, 0x00,
        0xe3, 0xe1, 0xe3, 0x1d, 0xde, 0xe0, 0x23,
        0xec, 0x75, 0x74, 0xf0, 0xf4, 0xf6, 0xea, 0x31, 0x2d,
        0x83, 0x12, 0x14, 0x04, 0x18, 0x1a, 0x1c, 0x14,
        0x26, 0x22, 0x1e, 0x1c, 0x18, 0x1e, 0x22, 0x0c, 0x14,
        0xff, 0xff, 0xff
    };
    writeData(VictoryMusData, VictoryMusData_data, sizeof(VictoryMusData_data));

    // FreqRegLookupTbl
    //
    const uint8_t FreqRegLookupTbl_data[] = {
        0x00, 0x88, 0x00, 0x2f, 0x00, 0x00,
        0x02, 0xa6, 0x02, 0x80, 0x02, 0x5c, 0x02, 0x3a,
        0x02, 0x1a, 0x01, 0xdf, 0x01, 0xc4, 0x01, 0xab,
        0x01, 0x93, 0x01, 0x7c, 0x01, 0x67, 0x01, 0x53,
        0x01, 0x40, 0x01, 0x2e, 0x01, 0x1d, 0x01, 0x0d,
        0x00, 0xfe, 0x00, 0xef, 0x00, 0xe2, 0x00, 0xd5,
        0x00, 0xc9, 0x00, 0xbe, 0x00, 0xb3, 0x00, 0xa9,
        0x00, 0xa0, 0x00, 0x97, 0x00, 0x8e, 0x00, 0x86,
        0x00, 0x77, 0x00, 0x7e, 0x00, 0x71, 0x00, 0x54,
        0x00, 0x64, 0x00, 0x5f, 0x00, 0x59, 0x00, 0x50,
        0x00, 0x47, 0x00, 0x43, 0x00, 0x3b, 0x00, 0x35,
        0x00, 0x2a, 0x00, 0x23, 0x04, 0x75, 0x03, 0x57,
        0x02, 0xf9, 0x02, 0xcf, 0x01, 0xfc, 0x00, 0x6a
    };
    writeData(FreqRegLookupTbl, FreqRegLookupTbl_data, sizeof(FreqRegLookupTbl_data));

    // MusicLengthLookupTbl
    //
    const uint8_t MusicLengthLookupTbl_data[] = {
        0x05, 0x0a, 0x14, 0x28, 0x50, 0x1e, 0x3c, 0x02,
        0x04, 0x08, 0x10, 0x20, 0x40, 0x18, 0x30, 0x0c,
        0x03, 0x06, 0x0c, 0x18, 0x30, 0x12, 0x24, 0x08,
        0x36, 0x03, 0x09, 0x06, 0x12, 0x1b, 0x24, 0x0c,
        0x24, 0x02, 0x06, 0x04, 0x0c, 0x12, 0x18, 0x08,
        0x12, 0x01, 0x03, 0x02, 0x06, 0x09, 0x0c, 0x04
    };
    writeData(MusicLengthLookupTbl, MusicLengthLookupTbl_data, sizeof(MusicLengthLookupTbl_data));

    // EndOfCastleMusicEnvData
    //
    const uint8_t EndOfCastleMusicEnvData_data[] = {
        0x98, 0x99, 0x9a, 0x9b
    };
    writeData(EndOfCastleMusicEnvData, EndOfCastleMusicEnvData_data, sizeof(EndOfCastleMusicEnvData_data));

    // AreaMusicEnvData
    //
    const uint8_t AreaMusicEnvData_data[] = {
        0x90, 0x94, 0x94, 0x95, 0x95, 0x96, 0x97, 0x98
    };
    writeData(AreaMusicEnvData, AreaMusicEnvData_data, sizeof(AreaMusicEnvData_data));

    // WaterEventMusEnvData
    //
    const uint8_t WaterEventMusEnvData_data[] = {
        0x90, 0x91, 0x92, 0x92, 0x93, 0x93, 0x93, 0x94,
        0x94, 0x94, 0x94, 0x94, 0x94, 0x95, 0x95, 0x95,
        0x95, 0x95, 0x95, 0x96, 0x96, 0x96, 0x96, 0x96,
        0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96,
        0x96, 0x96, 0x96, 0x96, 0x95, 0x95, 0x94, 0x93
    };
    writeData(WaterEventMusEnvData, WaterEventMusEnvData_data, sizeof(WaterEventMusEnvData_data));

    // BowserFlameEnvData
    //
    const uint8_t BowserFlameEnvData_data[] = {
        0x15, 0x16, 0x16, 0x17, 0x17, 0x18, 0x19, 0x19,
        0x1a, 0x1a, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f,
        0x1f, 0x1f, 0x1f, 0x1e, 0x1d, 0x1c, 0x1e, 0x1f,
        0x1f, 0x1e, 0x1d, 0x1c, 0x1a, 0x18, 0x16, 0x14
    };
    writeData(BowserFlameEnvData, BowserFlameEnvData_data, sizeof(BowserFlameEnvData_data));

    // BrickShatterEnvData
    //
    const uint8_t BrickShatterEnvData_data[] = {
        0x15, 0x16, 0x16, 0x17, 0x17, 0x18, 0x19, 0x19,
        0x1a, 0x1a, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f
    };
    writeData(BrickShatterEnvData, BrickShatterEnvData_data, sizeof(BrickShatterEnvData_data));

}

